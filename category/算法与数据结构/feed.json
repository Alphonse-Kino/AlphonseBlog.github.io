{
    "version": "https://jsonfeed.org/version/1",
    "title": "Alphonse-Kino • All posts by \"算法与数据结构\" category",
    "description": "",
    "home_page_url": "https://alphonse-Kino.github.io",
    "items": [
        {
            "id": "https://alphonse-kino.github.io/2021/07/08/10.%E6%A0%91%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/",
            "url": "https://alphonse-kino.github.io/2021/07/08/10.%E6%A0%91%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/",
            "title": "树结构基础部分",
            "date_published": "2021-07-08T13:57:20.817Z",
            "content_html": "<h1 id=\"树\"><a class=\"markdownIt-Anchor\" href=\"#树\">#</a> 树</h1>\n<h2 id=\"三种存储方式的比较\"><a class=\"markdownIt-Anchor\" href=\"#三种存储方式的比较\">#</a> 三种存储方式的比较</h2>\n<ul>\n<li>数组存储方式分析\n<ul>\n<li>优点：通过下标方式访问元素，速度快。<strong>对于有序数组</strong>，还可使用二分查找提高检索速度。</li>\n<li>缺点：如果要检索具体某个值，或者插入值 (按一定顺序)<strong> 会整体移动</strong>，效率较低</li>\n</ul>\n</li>\n<li>链表存储方式分析\n<ul>\n<li>优点：在一定程度上对数组存储方式有优化 (比如：插入一个数值节点，只需要将插入节点，链接到链表中即可， 删除效率也很好)</li>\n<li>缺点：在进行检索时，效率仍然较低，比如 (检索某个值，需要从头节点开始遍历)</li>\n</ul>\n</li>\n<li>树的存储方式分析\n<ul>\n<li>能提高数据<strong>存储，读取</strong>的效率，比如利用 <strong>二叉排序树</strong> (Binary Sort Tree)，既可以保证数据的检索速度，同时也可以保证数据的插入，删除，修改的速度。</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/R7mZ6K\"><img src=\"https://z3.ax1x.com/2021/07/06/R7mZ6K.png\" alt=\"R7mZ6K.png\"></a></p>\n<h2 id=\"树的示意图\"><a class=\"markdownIt-Anchor\" href=\"#树的示意图\">#</a> 树的示意图</h2>\n<p><a href=\"https://imgtu.com/i/R7mu0e\"><img src=\"https://z3.ax1x.com/2021/07/06/R7mu0e.png\" alt=\"R7mu0e.png\"></a></p>\n<h2 id=\"树的常用术语\"><a class=\"markdownIt-Anchor\" href=\"#树的常用术语\">#</a> 树的常用术语</h2>\n<ol>\n<li>节点</li>\n<li>根节点（root 节点）</li>\n<li>父节点</li>\n<li>子节点</li>\n<li>叶子节点（没有子节点的节点）</li>\n<li>节点的权（节点值）</li>\n<li>路径（从 root 节点找到该节点的路线）</li>\n<li>层</li>\n<li>子树</li>\n<li>树的高度（最大层数）</li>\n<li>森林：多棵子树构成森林</li>\n</ol>\n<h1 id=\"二叉树\"><a class=\"markdownIt-Anchor\" href=\"#二叉树\">#</a> 二叉树</h1>\n<h2 id=\"二叉树的概念\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的概念\">#</a> 二叉树的概念</h2>\n<ol>\n<li>树的种类有很多，每个节点<strong>最多只能有两个子节点</strong>的<strong>一种</strong>形式称为<strong>二叉树</strong></li>\n<li>二叉树的子节点分为左节点和右节点</li>\n<li>如果该二叉树的所有叶子节点都在最后一层，并且结点总数 = 2^n -1 , n 为层数，则我们称为满二叉树。</li>\n<li><a href=\"https://imgtu.com/i/R7mQkd\"><img src=\"https://z3.ax1x.com/2021/07/06/R7mQkd.png\" alt=\"R7mQkd.png\"></a></li>\n<li>如果该二叉树的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们成为完全二叉树</li>\n<li><a href=\"https://imgtu.com/i/R7m1fI\"><img src=\"https://z3.ax1x.com/2021/07/06/R7m1fI.png\" alt=\"R7m1fI.png\"></a></li>\n</ol>\n<h2 id=\"二叉树的遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的遍历\">#</a> 二叉树的遍历</h2>\n<ul>\n<li>\n<p>前序遍历：先输出父节点，再遍历左子树和右子树</p>\n</li>\n<li>\n<p>中序遍历：先遍历左子树，再输出父节点，再遍历右子树</p>\n</li>\n<li>\n<p>后序遍历：先遍历左子树，再遍历右子树，最后输出父节点</p>\n</li>\n<li>\n<p>小结：看输出父节点的顺序，就确定是前序，中序还是后序</p>\n</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/R7mJ6f\"><img src=\"https://z3.ax1x.com/2021/07/06/R7mJ6f.png\" alt=\"R7mJ6f.png\"></a></p>\n<h3 id=\"代码展示\"><a class=\"markdownIt-Anchor\" href=\"#代码展示\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先创建一棵二叉树</span></span><br><span class=\"line\">        BinaryTree binaryTree=<span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">        <span class=\"comment\">//创建需要的节点</span></span><br><span class=\"line\">        HeroNode root=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>,<span class=\"string\">&quot;zoffy&quot;</span>);</span><br><span class=\"line\">        HeroNode node2=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>,<span class=\"string\">&quot;man&quot;</span>);</span><br><span class=\"line\">        HeroNode node3=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>,<span class=\"string\">&quot;taro&quot;</span>);</span><br><span class=\"line\">        HeroNode node4=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>,<span class=\"string\">&quot;taiga&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//先手动创建该二叉树，后面学习递归方式创建二叉树</span></span><br><span class=\"line\">        root.setLeft(node2);</span><br><span class=\"line\">        root.setRight(node3);</span><br><span class=\"line\">        node3.setRight(node4);</span><br><span class=\"line\">        binaryTree.setRoot(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;前序遍历&quot;</span>);</span><br><span class=\"line\">        binaryTree.preOrder();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;中序遍历&quot;</span>);</span><br><span class=\"line\">        binaryTree.infixOrder();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后序遍历&quot;</span>);</span><br><span class=\"line\">        binaryTree.postOrder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义BinaryTree 二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(HeroNode root)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.root=root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.root.preOrder();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;二叉树为null，无法遍历&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.root.infixOrder();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;二叉树为null，无法遍历&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.root.postOrder();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;二叉树为null，无法遍历&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建HeroNode 节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode left;  <span class=\"comment\">//默认为null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode right; <span class=\"comment\">//默认为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(HeroNode left)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(HeroNode right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode &#123; no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写前序遍历的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);<span class=\"comment\">//先输出根节点</span></span><br><span class=\"line\">        <span class=\"comment\">//递归向左子树前序遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//递归向右子树前序遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先递归向左子树中序遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//然后输出根节点</span></span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"comment\">//递归向右子树中序遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先递归向左子树中序遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.postOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//然后递归向右子树中序遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.postOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//最后输出根节点</span></span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树的查找\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的查找\">#</a> 二叉树的查找</h2>\n<p><a href=\"https://imgtu.com/i/R7m0ts\"><img src=\"https://z3.ax1x.com/2021/07/06/R7m0ts.png\" alt=\"R7m0ts.png\"></a></p>\n<h3 id=\"代码展示-2\"><a class=\"markdownIt-Anchor\" href=\"#代码展示-2\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTreeDemoSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先创建一棵二叉树</span></span><br><span class=\"line\">        BinaryTree binaryTree=<span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">        <span class=\"comment\">//创建需要的节点</span></span><br><span class=\"line\">        HeroNode root=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>,<span class=\"string\">&quot;zoffy&quot;</span>);</span><br><span class=\"line\">        HeroNode node2=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>,<span class=\"string\">&quot;man&quot;</span>);</span><br><span class=\"line\">        HeroNode node3=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>,<span class=\"string\">&quot;taro&quot;</span>);</span><br><span class=\"line\">        HeroNode node4=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>,<span class=\"string\">&quot;taiga&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//先手动创建该二叉树，后面学习递归方式创建二叉树</span></span><br><span class=\"line\">        root.setLeft(node2);</span><br><span class=\"line\">        root.setRight(node3);</span><br><span class=\"line\">        node3.setRight(node4);</span><br><span class=\"line\">        binaryTree.setRoot(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//查找</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;前序查找&quot;</span>);</span><br><span class=\"line\">        HeroNode node = binaryTree.preOrderSearch(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;找到了，信息为no=%d,name=%s&quot;</span>,node.getNo(), node.getName());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;没找到&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义BinaryTree 二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(HeroNode root)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.root=root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//前序查找</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.preOrderSearch(no);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序查找</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.infixOrderSearch(no);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后序查找</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.postOrderSearch(no);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建HeroNode 节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode left;  <span class=\"comment\">//默认为null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode right; <span class=\"comment\">//默认为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(HeroNode left)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(HeroNode right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode &#123; no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前序遍历查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> no    查找no</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>      如果找到就返回该Node，如果没有找到就返回 null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">preOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//比较当前节点是不是要查找的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.no==no)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//1.判断当前节点的左子节点是否为 null，如果不为 null，则递归前序查找</span></span><br><span class=\"line\">        <span class=\"comment\">//2.如果左递归前序查找，找到节点，则返回</span></span><br><span class=\"line\">        HeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            resNode=<span class=\"keyword\">this</span>.left.preOrderSearch(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resNode!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//说明找到了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//1.左递归前序查找，找到节点，则返回，否则继续判断</span></span><br><span class=\"line\">        <span class=\"comment\">//2.当前的节点的右子节点是否为null，如果不为 null，则继续向右递归前序查找</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            resNode=<span class=\"keyword\">this</span>.right.preOrderSearch(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历查找</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">infixOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\">        HeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断当前节点的左子节点是否为null，如果不为null，则递归中序查找</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            resNode=<span class=\"keyword\">this</span>.left.infixOrderSearch(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resNode!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//说明找到了</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果找到，就返回，如果没找到就和当前节点比较，如果是则返回当前节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.no==no)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//否则继续进行右递归的中序查找</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            resNode=<span class=\"keyword\">this</span>.right.infixOrderSearch(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后序遍历查找</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">postOrderSearch</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\">        HeroNode resNode = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//判断当前节点的左子节点是否为null，如果不为null，则递归后序查找</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            resNode=<span class=\"keyword\">this</span>.left.postOrderSearch(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resNode!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//说明在左子树找到</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果左子树没有找到，就向右递归进行后序遍历查找</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            resNode=<span class=\"keyword\">this</span>.right.postOrderSearch(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果左右子树都没有找到，就比较当前节点是不是</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.no==no)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉树的删除\"><a class=\"markdownIt-Anchor\" href=\"#二叉树的删除\">#</a> 二叉树的删除</h2>\n<p><a href=\"https://imgtu.com/i/R7ms10\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ms10.png\" alt=\"R7ms10.png\"></a></p>\n<h3 id=\"代码展示-3\"><a class=\"markdownIt-Anchor\" href=\"#代码展示-3\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo03;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTreeDemoDelete</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先创建一棵二叉树</span></span><br><span class=\"line\">        BinaryTree binaryTree = <span class=\"keyword\">new</span> BinaryTree();</span><br><span class=\"line\">        <span class=\"comment\">//创建需要的节点</span></span><br><span class=\"line\">        HeroNode root = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;zoffy&quot;</span>);</span><br><span class=\"line\">        HeroNode node2 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>, <span class=\"string\">&quot;man&quot;</span>);</span><br><span class=\"line\">        HeroNode node3 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;taro&quot;</span>);</span><br><span class=\"line\">        HeroNode node4 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>, <span class=\"string\">&quot;taiga&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//先手动创建该二叉树，后面学习递归方式创建二叉树</span></span><br><span class=\"line\">        root.setLeft(node2);</span><br><span class=\"line\">        root.setRight(node3);</span><br><span class=\"line\">        node3.setRight(node4);</span><br><span class=\"line\">        binaryTree.setRoot(root);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试删除</span></span><br><span class=\"line\">        binaryTree.delNode(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义BinaryTree 二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(HeroNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果只有一个root节点，这里立即判断root是不是就是要删除的节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.getNo()==no)&#123;</span><br><span class=\"line\">                root=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                root.delNode(no);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;这个树是空树，不能删除~~~&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建HeroNode 节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode left;  <span class=\"comment\">//默认为null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode right; <span class=\"comment\">//默认为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(HeroNode left)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(HeroNode right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode &#123; no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//递归删除节点</span></span><br><span class=\"line\">    <span class=\"comment\">//1.如果删除的节点是叶子节点，则删除该节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2.如归删除的节点是非叶子节点，则删除该子树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 思路：</span></span><br><span class=\"line\"><span class=\"comment\">         * 1.因为我们的二叉树是单向的，所以我们是判断当前节点的子节点是否需要删除节点，而不能去判断当前这个节点是不是需要删除节点</span></span><br><span class=\"line\"><span class=\"comment\">         * 2.如果当前节点的左子节点不为空，而且左子节点就是要删除节点，就将this.left = null；并且就返回（结束递归删除）</span></span><br><span class=\"line\"><span class=\"comment\">         * 3.如果当前节点的右子节点不为空，并且右子节点就是要删除节点，就将this.right= null；并且就返回（结束递归删除）</span></span><br><span class=\"line\"><span class=\"comment\">         * 4.如果第2步和第3步没有删除节点，那么我们就需要向左子树进行递归删除</span></span><br><span class=\"line\"><span class=\"comment\">         * 5.如果第4步也没有删除节点应当向右子树进行递归删除</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">//2.如果当前节点的左子节点不为空，而且左子节点就是要删除节点，就将this.left = null；并且就返回（结束递归删除）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.no == no) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//3.如果当前节点的右子节点不为空，并且右子节点就是要删除节点，就将this.right= null；并且就返回（结束递归删除）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.no == no) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//4.向左子树进行递归删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.delNode(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//5.向右子树进行递归删除</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.delNode(no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"顺序存储二叉树\"><a class=\"markdownIt-Anchor\" href=\"#顺序存储二叉树\">#</a> 顺序存储二叉树</h1>\n<h2 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\">#</a> 基本介绍</h2>\n<p>从数据存储来看，<strong>数组存储方式</strong>和<strong>树</strong>的存储方式可以相互转换，即数组可以转换成树，树也可以转换成数组，如下面所示。</p>\n<p><a href=\"https://imgtu.com/i/R7m2BF\"><img src=\"https://z3.ax1x.com/2021/07/06/R7m2BF.png\" alt=\"R7m2BF.png\"></a></p>\n<ul>\n<li>\n<p>顺序二叉树通常只考虑完全二叉树</p>\n</li>\n<li>\n<p>第 n 个元素的左子节点为 2 * n + 1</p>\n</li>\n<li>\n<p>第 n 个元素的右子节点为 2 * n + 2</p>\n</li>\n<li>\n<p>第 n 个元素的父节点为 (n-1) / 2</p>\n</li>\n<li>\n<p>n : 表示二叉树中的第几个元素 (按 0 开始编号 如上图所示)</p>\n</li>\n</ul>\n<h2 id=\"代码展示-4\"><a class=\"markdownIt-Anchor\" href=\"#代码展示-4\">#</a> 代码展示</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo04;</span><br><span class=\"line\"><span class=\"comment\">//顺序存储二叉树的前、中、后序遍历</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayBinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个ArrBinaryTree</span></span><br><span class=\"line\">        ArrayBinaryTree binaryTree=<span class=\"keyword\">new</span> ArrayBinaryTree(arr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;前序遍历&quot;</span>);</span><br><span class=\"line\">        binaryTree.preOrder();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;中序遍历&quot;</span>);</span><br><span class=\"line\">        binaryTree.infixOrder();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后序遍历&quot;</span>);</span><br><span class=\"line\">        binaryTree.postOrder();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//编写一个ArrayBinaryTree，实现顺序存储二叉树遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayBinaryTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">//存储数据节点的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayBinaryTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.arr = arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重载 preOrder</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.preOrder(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重载 infixOrder</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.infixOrder(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重载 postOrder</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.postOrder(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法，完成顺序存储二叉树的前序遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果数组为空，或者 arr.length == 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr == <span class=\"keyword\">null</span> || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;数组为空，无法进行二叉树的前序遍历&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//输出当前这个元素</span></span><br><span class=\"line\">        System.out.print(arr[index]);</span><br><span class=\"line\">        <span class=\"comment\">//向左遍历递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index * <span class=\"number\">2</span> + <span class=\"number\">1</span> &lt; arr.length) &#123;</span><br><span class=\"line\">            preOrder(<span class=\"number\">2</span> * index + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向右遍历递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index * <span class=\"number\">2</span> + <span class=\"number\">2</span> &lt; arr.length) &#123;</span><br><span class=\"line\">            preOrder(<span class=\"number\">2</span> * index + <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法，完成顺序存储二叉树的中序遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果数组为空，或者 arr.length == 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr == <span class=\"keyword\">null</span> || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;数组为空，无法进行二叉树的中序遍历&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向左遍历递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index * <span class=\"number\">2</span> + <span class=\"number\">1</span> &lt; arr.length) &#123;</span><br><span class=\"line\">            infixOrder(<span class=\"number\">2</span> * index + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//输出当前这个元素</span></span><br><span class=\"line\">        System.out.print(arr[index]);</span><br><span class=\"line\">        <span class=\"comment\">//向右遍历递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index * <span class=\"number\">2</span> + <span class=\"number\">2</span> &lt; arr.length) &#123;</span><br><span class=\"line\">            infixOrder(<span class=\"number\">2</span> * index + <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法，完成顺序存储二叉树的后序遍历</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 数组下标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postOrder</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果数组为空，或者 arr.length == 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr == <span class=\"keyword\">null</span> || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;数组为空，无法进行二叉树的后序遍历&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向左遍历递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index * <span class=\"number\">2</span> + <span class=\"number\">1</span> &lt; arr.length) &#123;</span><br><span class=\"line\">            postOrder(<span class=\"number\">2</span> * index + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向右遍历递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index * <span class=\"number\">2</span> + <span class=\"number\">2</span> &lt; arr.length) &#123;</span><br><span class=\"line\">            postOrder(<span class=\"number\">2</span> * index + <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//输出当前这个元素</span></span><br><span class=\"line\">        System.out.print(arr[index]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure>\n<h1 id=\"线索化二叉树\"><a class=\"markdownIt-Anchor\" href=\"#线索化二叉树\">#</a> 线索化二叉树</h1>\n<h2 id=\"基本介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍-2\">#</a> 基本介绍</h2>\n<ul>\n<li>\n<p>n 个结点的二叉链表中含有 n+1 【公式 2n-(n-1)=n+1】 个空指针域。利用二叉链表中的空指针域，存放指向<strong>该</strong><a href=\"\">结点</a>) 在<strong>某种遍历次序</strong>下的前驱和后继结点的指针（这种附加的指针称为 &quot;线索&quot;）</p>\n</li>\n<li>\n<p>这种加上了线索的二叉链表 称为<strong>线索链表</strong>，相应的二叉树称为<strong>线索二叉树 (Threaded BinaryTree)</strong>。根据线索性质的不同，线索二叉树可分为<strong>前序线索二叉树、中序线索二叉树和后序线索二叉树</strong>三种</p>\n</li>\n<li>\n<p>一个结点的前一个结点，称为<strong>前驱</strong>结点</p>\n</li>\n<li>\n<p>一个结点的后一个结点，称为<strong>后继</strong>结点</p>\n</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/R7m4hR\"><img src=\"https://z3.ax1x.com/2021/07/06/R7m4hR.png\" alt=\"R7m4hR.png\"></a></p>\n<ul>\n<li>说明：当线索化二叉树，Node 节点的属性 left 和 right，有以下两种情况：(根据上图分析)\n<ol>\n<li>left 指向的是左子树，也可能是指向的前驱节点，比如 1 号 节点 left 指向的左子树，而 10 号 节点的 left 指向的就是前驱节点</li>\n<li>right 指向的是右子树，也可能是指向后继节点， 比如 1 号 节点 right 指向的右子树，而 10 号 节点的 right 指向的是后继节点</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"代码展示-5\"><a class=\"markdownIt-Anchor\" href=\"#代码展示-5\">#</a> 代码展示</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadedBinaryTreeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建需要的节点</span></span><br><span class=\"line\">        HeroNode root = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;zoffy&quot;</span>);</span><br><span class=\"line\">        HeroNode node2 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;man&quot;</span>);</span><br><span class=\"line\">        HeroNode node3 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">6</span>, <span class=\"string\">&quot;taro&quot;</span>);</span><br><span class=\"line\">        HeroNode node4 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">8</span>, <span class=\"string\">&quot;taiga&quot;</span>);</span><br><span class=\"line\">        HeroNode node5 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">10</span>, <span class=\"string\">&quot;mebius&quot;</span>);</span><br><span class=\"line\">        HeroNode node6 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">14</span>, <span class=\"string\">&quot;zero&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//二叉树，后面我们递归创建，现在简单处理使用手动创建</span></span><br><span class=\"line\">        root.setLeft(node2);</span><br><span class=\"line\">        root.setRight(node3);</span><br><span class=\"line\">        node2.setLeft(node4);</span><br><span class=\"line\">        node2.setRight(node5);</span><br><span class=\"line\">        node3.setLeft(node6);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试线索化</span></span><br><span class=\"line\">        ThreadedBinaryTree threadedBinaryTree = <span class=\"keyword\">new</span> ThreadedBinaryTree();</span><br><span class=\"line\">        threadedBinaryTree.setRoot(root);</span><br><span class=\"line\">        threadedBinaryTree.threadedNodes();</span><br><span class=\"line\"></span><br><span class=\"line\">        HeroNode left = node5.getLeft();</span><br><span class=\"line\">        System.out.println(left);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当线索化二叉树后，不能再使用原来的方法遍历</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用线索化的方式遍历线索化二叉树&quot;</span>);</span><br><span class=\"line\">        threadedBinaryTree.threadedList();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义ThreadedBinaryTree 实现了线索化功能的二叉树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadedBinaryTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了实现线索化，需要创建要给指向当前节点的前驱节点的指针</span></span><br><span class=\"line\">    <span class=\"comment\">//在递归进行线索化时，pre 总是保留前一个节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode pre = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRoot</span><span class=\"params\">(HeroNode root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.root = root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重载threadedNodes方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedNodes</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threadedNodes(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历线索化二叉树的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个变量，存储当前遍历的节点，从root开始</span></span><br><span class=\"line\">        HeroNode node = root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//循环的找到leftType==1的节点，第一个找到的是8节点</span></span><br><span class=\"line\">            <span class=\"comment\">//后面随着遍历而变化，因为当leftType==1时，说明该节点是按照线索化处理后的有效节点</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node.getLeftType() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                node = node.getLeft();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//打印这个节点</span></span><br><span class=\"line\">            System.out.println(node);</span><br><span class=\"line\">            <span class=\"comment\">//如果当前节点的右指针指向的是后继节点，就一直输出</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (node.getRightType() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取到当前节点的后继节点</span></span><br><span class=\"line\">                node = node.getRight();</span><br><span class=\"line\">                System.out.println(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//替换这个遍历的节点</span></span><br><span class=\"line\">            node = node.getRight();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写对二叉树进行中序线索化的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">threadedNodes</span><span class=\"params\">(HeroNode node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果node==null 不能线索化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//第一步 先线索化左子树</span></span><br><span class=\"line\">        threadedNodes(node.getLeft());</span><br><span class=\"line\">        <span class=\"comment\">//第二步 线索化当前节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//处理当前节点的前驱节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.getLeft() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//让当前节点的左指针指向前驱节点</span></span><br><span class=\"line\">            node.setLeft(pre);</span><br><span class=\"line\">            <span class=\"comment\">//修改当前节点的左指针的类型，指向前驱节点</span></span><br><span class=\"line\">            node.setLeftType(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//处理后继节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pre != <span class=\"keyword\">null</span> &amp;&amp; pre.getRight() == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//让前驱节点的右指针指向当前节点</span></span><br><span class=\"line\">            pre.setRight(node);</span><br><span class=\"line\">            <span class=\"comment\">//修改前驱节点的右指针类型</span></span><br><span class=\"line\">            pre.setRightType(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//！！！！！！！！每处理一个节点后，让当前节点是下一个节点的前驱节点</span></span><br><span class=\"line\">        pre = node;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//第三步 再线索化右子树</span></span><br><span class=\"line\">        threadedNodes(node.getRight());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建HeroNode 节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode left;  <span class=\"comment\">//默认为null</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode right; <span class=\"comment\">//默认为null</span></span><br><span class=\"line\">    <span class=\"comment\">//说明：</span></span><br><span class=\"line\">    <span class=\"comment\">//1.如果leftType == 0 表示指向的是左子树，如果leftType == 1 则表示指向前驱节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2.如果rightType ==0 表示指向的是右子树，如果rightType == 1 表示指向后继节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> leftType;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rightType;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getLeft</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeft</span><span class=\"params\">(HeroNode left)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.left = left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getRight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRight</span><span class=\"params\">(HeroNode right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.right = right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLeftType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> leftType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLeftType</span><span class=\"params\">(<span class=\"keyword\">int</span> leftType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leftType = leftType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getRightType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rightType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRightType</span><span class=\"params\">(<span class=\"keyword\">int</span> rightType)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rightType = rightType;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode &#123; no=&quot;</span> + no + <span class=\"string\">&quot;, name=&quot;</span> + name + <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法与数据结构",
                "二叉树",
                "顺序存储二叉树",
                "线索化二叉树"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/07/07/09.%E5%93%88%E5%B8%8C%E8%A1%A8/",
            "url": "https://alphonse-kino.github.io/2021/07/07/09.%E5%93%88%E5%B8%8C%E8%A1%A8/",
            "title": "哈希表",
            "date_published": "2021-07-07T14:17:13.384Z",
            "content_html": "<h1 id=\"哈希表\"><a class=\"markdownIt-Anchor\" href=\"#哈希表\">#</a> 哈希表</h1>\n<h2 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\">#</a> 基本介绍</h2>\n<p><strong>散列表</strong>（Hash table，也叫哈希表）</p>\n<p>​\t根据关键码值（key value）而直接进行访问<strong>数据结构</strong>。也就是说，他通过吧关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<strong>散列函数</strong>，存放记录的数组叫做<strong>散列表</strong></p>\n<p><a href=\"https://imgtu.com/i/R7mCTJ\"><img src=\"https://z3.ax1x.com/2021/07/06/R7mCTJ.png\" alt=\"R7mCTJ.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7mFYR\"><img src=\"https://z3.ax1x.com/2021/07/06/R7mFYR.png\" alt=\"R7mFYR.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7e7wQ\"><img src=\"https://z3.ax1x.com/2021/07/06/R7e7wQ.png\" alt=\"R7e7wQ.png\"></a></p>\n<h3 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\">#</a> 例题</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有一个公司,当有新的员工来报道时,要求将该员工的信息加入\u000b(id,性别,年龄,名字,住址..),当输入该员工的id时,要求查找到该员工的所有信息.</span><br><span class=\"line\">要求: </span><br><span class=\"line\">不使用数据库,,速度越快越好=&gt;哈希表(散列)</span><br><span class=\"line\">添加时，保证按照id从低到高插入  </span><br><span class=\"line\">[课后思考：如果id不是从\u000b低到高插入，但要求各条链表仍是从低到高，怎么解决?]</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgtu.com/i/R7mkf1\"><img src=\"https://z3.ax1x.com/2021/07/06/R7mkf1.png\" alt=\"R7mkf1.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTabDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建哈希表</span></span><br><span class=\"line\">        HashTab hashTab=<span class=\"keyword\">new</span> HashTab(<span class=\"number\">7</span>);</span><br><span class=\"line\">        <span class=\"comment\">//写一个简单陈的菜单</span></span><br><span class=\"line\">        String key=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;add:  添加雇员&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;list: 显示雇员&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;find: 查找雇员&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;exit: 退出系统&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            key=scanner.next();</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (key)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;add&quot;</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;输入id&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> id = scanner.nextInt();</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;输入姓名&quot;</span>);</span><br><span class=\"line\">                    String name = scanner.next();</span><br><span class=\"line\">                    <span class=\"comment\">//创建雇员</span></span><br><span class=\"line\">                    Emp emp=<span class=\"keyword\">new</span> Emp(id,name);</span><br><span class=\"line\">                    hashTab.add(emp);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;list&quot;</span>:</span><br><span class=\"line\">                    hashTab.list();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;find&quot;</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;请输入查找的 id&quot;</span>);</span><br><span class=\"line\">                    id = scanner.nextInt();</span><br><span class=\"line\">                    hashTab.findEmpById(id);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">                    scanner.close();</span><br><span class=\"line\">                    System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建HashTable 管理多条链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HashTab</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EmpLinkedList[] empLinkedListArray;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size;  <span class=\"comment\">//表示共有多少条链表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashTab</span><span class=\"params\">(<span class=\"keyword\">int</span> size)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size=size;</span><br><span class=\"line\">        <span class=\"comment\">//初始化 empLinkedListArray</span></span><br><span class=\"line\">        empLinkedListArray = <span class=\"keyword\">new</span> EmpLinkedList[size];</span><br><span class=\"line\">        <span class=\"comment\">// ?????这是不要忘了分别初始化每条链表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            empLinkedListArray[i]=<span class=\"keyword\">new</span> EmpLinkedList();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加雇员</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据员工的id，得到该员工应当添加到那条链表</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> empLinkListNO=hashFun(emp.id);</span><br><span class=\"line\">        <span class=\"comment\">//将emp 添加到对应的链表中</span></span><br><span class=\"line\">        empLinkedListArray[empLinkListNO].add(emp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历所有的链表,遍历hashTab</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            empLinkedListArray[i].list(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据输入的id，查找雇员</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用散列函数确定到哪条链表查找</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> empLinkedListNO=hashFun(id);</span><br><span class=\"line\">        Emp emp=empLinkedListArray[empLinkedListNO].findEmpById(id);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (emp!=<span class=\"keyword\">null</span>)&#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;在第 %d 链表中找到 雇员 id=%d\\n&quot;</span>,(empLinkedListNO+<span class=\"number\">1</span>),id);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;在哈希表中，没有找到该雇员~~&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个散列函数，使用一个简单的取模法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">hashFun</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id % size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表示 一个雇员</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emp</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Emp next;  <span class=\"comment\">//  next 默认为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Emp</span><span class=\"params\">(<span class=\"keyword\">int</span> id, String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建 EmpLinkedList，表示链表</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmpLinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//头指针，指向第一个Emp，因此我们这个链表的head是直接指向第一个 Emp</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Emp head; <span class=\"comment\">//默认为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加雇员到链表</span></span><br><span class=\"line\">    <span class=\"comment\">//说明</span></span><br><span class=\"line\">    <span class=\"comment\">//1.假定，当添加雇员时，id 是自增长的，即id的分配总是从小到大</span></span><br><span class=\"line\">    <span class=\"comment\">//   因此我们将该雇员直接加入到本链表的最后即可</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Emp emp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果是添加第一个雇员</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            head = emp;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果不是第一个雇员，则使用一个辅助 指针，帮助定位到最后</span></span><br><span class=\"line\">        Emp curEmp = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curEmp.next == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//说明到链表最后</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curEmp = curEmp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//退出时直接将 emp 加入到链表</span></span><br><span class=\"line\">        curEmp.next = emp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历链表的雇员信息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//说明链表为 null</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;第&quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot;条链表为 null&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;第&quot;</span>+(no+<span class=\"number\">1</span>)+<span class=\"string\">&quot;条链表的信息为：&quot;</span>);</span><br><span class=\"line\">        Emp curEmp = head;<span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;=&gt; id=%d,name=%s\\n&quot;</span>, curEmp.id, curEmp.name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curEmp.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明curEmp 已经是最后一个节点</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curEmp = curEmp.next;<span class=\"comment\">//后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据id查找雇员</span></span><br><span class=\"line\">    <span class=\"comment\">//如果查找到，就返回Emp，如果没找到，就返回 null</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Emp <span class=\"title\">findEmpById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断链表是否为 null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为 null&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//辅助指针</span></span><br><span class=\"line\">        Emp curEmp=head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(curEmp.id==id)&#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;<span class=\"comment\">//这时curEmp就指向要查找的雇员</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//退出条件</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(curEmp.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明遍历当前链表没有找到该雇员</span></span><br><span class=\"line\">                curEmp=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curEmp=curEmp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curEmp;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法与数据结构",
                "哈希表"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/07/07/08.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "url": "https://alphonse-kino.github.io/2021/07/07/08.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "title": "查找算法",
            "date_published": "2021-07-07T14:15:31.909Z",
            "content_html": "<h1 id=\"查找算法介绍\"><a class=\"markdownIt-Anchor\" href=\"#查找算法介绍\">#</a> 查找算法介绍</h1>\n<p>在 java 中，我们常用的查找有四种：</p>\n<ol>\n<li>顺序（线性）查找</li>\n<li>二分查找 / 折半查找</li>\n<li>插值查找</li>\n<li>斐波那契查找</li>\n</ol>\n<h2 id=\"顺序线性查找算法\"><a class=\"markdownIt-Anchor\" href=\"#顺序线性查找算法\">#</a> 顺序（线性）查找算法</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeqSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=&#123;<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">74</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,-<span class=\"number\">238</span>&#125;;<span class=\"comment\">//无序数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = seqSearch(arr,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;没有找到&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到该值下标为&quot;</span>+index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//普通的线性查找</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">seqSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//线性查找是注意比较，发现有相同值，就返回下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] == value) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"二分查找-折半查找算法\"><a class=\"markdownIt-Anchor\" href=\"#二分查找-折半查找算法\">#</a> 二分查找 / 折半查找算法</h2>\n<p><a href=\"https://imgtu.com/i/R7e1MT\"><img src=\"https://z3.ax1x.com/2021/07/06/R7e1MT.png\" alt=\"R7e1MT.png\"></a></p>\n<h3 id=\"代码示例\"><a class=\"markdownIt-Anchor\" href=\"#代码示例\">#</a> 代码示例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二分查找必须保证该数组是有序的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">213</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> resIndex=binarySearch(arr,<span class=\"number\">0</span>,arr.length,<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(resIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr     数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left    左边的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right   右边的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> findVal 需要查找的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到就返回下标，没有找到就返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&gt;right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (findVal &gt; midVal) &#123;<span class=\"comment\">//向右递归</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123;<span class=\"comment\">//向左递归</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"进阶代码\"><a class=\"markdownIt-Anchor\" href=\"#进阶代码\">#</a> 进阶代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *课后习题：</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;1, 8, 10, 89, 100,100,100, 213&#125;当一个有序数组中</span></span><br><span class=\"line\"><span class=\"comment\"> * 有多个相同数值时，如何将所有的数值都查找到</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 思路分析：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、在找到mid 索引值，不需要马上返回</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、向mid 索引值的左边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList 中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、向mid 索引值的右边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、将 ArrayList 返回</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二分查找必须保证该数组是有序的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch_pro</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">213</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;Integer&gt; integers = binarySearch_pro(arr, <span class=\"number\">0</span>, arr.length-<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(integers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr     数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left    左边的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right   右边的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> findVal 需要查找的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到就返回下标，没有找到就返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; <span class=\"title\">binarySearch_pro</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&gt;right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (findVal &gt; midVal) &#123;<span class=\"comment\">//向右递归</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch_pro(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123;<span class=\"comment\">//向左递归</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch_pro(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 思路分析：</span></span><br><span class=\"line\"><span class=\"comment\">             * 1、在找到mid 索引值，不需要马上返回</span></span><br><span class=\"line\"><span class=\"comment\">             * 2、向mid 索引值的左边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList中</span></span><br><span class=\"line\"><span class=\"comment\">             * 3、向mid 索引值的右边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList</span></span><br><span class=\"line\"><span class=\"comment\">             * 4、将 ArrayList 返回</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            ArrayList&lt;Integer&gt; resIndexList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//向mid 索引值的左边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList 中</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp=mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp&lt;<span class=\"number\">0</span>||arr[temp]!=findVal)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//退出</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//否则，就将temp放入到resIndexList 中</span></span><br><span class=\"line\">                resIndexList.add(temp);</span><br><span class=\"line\">                temp-=<span class=\"number\">1</span>; <span class=\"comment\">//temp 左移</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resIndexList.add(mid);</span><br><span class=\"line\">            <span class=\"comment\">//向mid 索引值的右边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList</span></span><br><span class=\"line\">            temp=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp&gt;arr.length-<span class=\"number\">1</span> || arr[temp]!=findVal)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//退出</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//否则，就将temp放入到resIndexList 中</span></span><br><span class=\"line\">                resIndexList.add(temp);</span><br><span class=\"line\">                temp+=<span class=\"number\">1</span>; <span class=\"comment\">//temp 右移</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resIndexList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"插值查找算法\"><a class=\"markdownIt-Anchor\" href=\"#插值查找算法\">#</a> 插值查找算法</h2>\n<h3 id=\"原理介绍\"><a class=\"markdownIt-Anchor\" href=\"#原理介绍\">#</a> 原理介绍</h3>\n<ol>\n<li>\n<p>插值查找算法类似于二分查找，不同的是插值查找每次从<strong>自适应</strong> mid 处开始查找。</p>\n</li>\n<li>\n<p>将折半查找中的求 mid 索引的公式，low 表示左边索引 left, high 表示右边索引 right。key 就是前面我们讲的 findVal</p>\n<p><a href=\"https://imgtu.com/i/R7eJZ4\"><img src=\"https://z3.ax1x.com/2021/07/06/R7eJZ4.png\" alt=\"R7eJZ4.png\"></a></p>\n</li>\n<li>\n<p>int mid = low + (high - low) * (key - arr[low]) / (arr[high] - arr[low]) ;   <em>插值索引</em><br>\n对应前面的代码公式：<br>\nint mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7edRx\"><img src=\"https://z3.ax1x.com/2021/07/06/R7edRx.png\" alt=\"R7edRx.png\"></a></p>\n<h3 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ol>\n<li>\n<p>对于数据量较大，<strong>关键字分布比较均匀</strong>的查找表来说，采用<strong>插值查找，速度较快.</strong></p>\n</li>\n<li>\n<p>关键字分布不均匀的情况下，该方法不一定比折半查找要好</p>\n</li>\n</ol>\n<h3 id=\"代码展示\"><a class=\"markdownIt-Anchor\" href=\"#代码展示\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo03;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertValueSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            arr[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = insertValueSearch(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index=&quot;</span>+index);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写插值查找算法</span></span><br><span class=\"line\"><span class=\"comment\">     * 说明：插值查找算法也要求数组是有序的</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr     数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left    左边索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right   右边索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> findVal 查找的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到就返回对应的下标，没有就返回 -1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">insertValueSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断退出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right || findVal &lt; arr[<span class=\"number\">0</span>] || findVal &gt; arr[arr.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//求出 mid</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> midVal=arr[mid];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(findVal&gt;midVal)&#123; <span class=\"comment\">//说明应该向右边递归查找</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> insertValueSearch(arr,mid+<span class=\"number\">1</span>,right,findVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(findVal&lt;midVal)&#123; <span class=\"comment\">//说明应该向左边递归查找</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> insertValueSearch(arr,left,mid-<span class=\"number\">1</span>,findVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"斐波那契查找算法\"><a class=\"markdownIt-Anchor\" href=\"#斐波那契查找算法\">#</a> 斐波那契查找算法</h2>\n<h3 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\">#</a> 基本介绍</h3>\n<p>黄金分割点是指把一条<a href=\"\">线段</a>分割为两部分，使其中一部分与全长之比等于另一部分与这部分之比。取其前三位数字的近似值是<a href=\"\"> 0.618</a>。由于按此比例设计的造型十分美丽，因此称为<a href=\"\">黄金分割</a>，也称为<a href=\"\">中外比</a>。这是一个神奇的数字，会带来意向不大的效果。</p>\n<p><strong>斐波那契数列</strong> {1, 1, 2, 3, 5, 8, 13, 21, 34, 55} 发现斐波那契数列的两个相邻数 的比例，无限接近 黄金分割值 0.618</p>\n<h3 id=\"原理分析\"><a class=\"markdownIt-Anchor\" href=\"#原理分析\">#</a> 原理分析</h3>\n<p><strong>斐波那契 (黄金分割法) 原理:</strong></p>\n<p><strong>斐波那契查找</strong>原理与前两种相似，仅仅改变了中间结点（mid）的位置，mid 不再是中间或插值得到，而是位于黄金分割点附近，即<strong> mid=low+F (k-1)-1</strong>（F 代表斐波那契数列），如下图所示</p>\n<p><a href=\"https://imgtu.com/i/R7ecod\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ecod.png\" alt=\"R7ecod.png\"></a></p>\n<p><strong>对 F (k-1)-1 的理解：</strong></p>\n<p>1、由斐波那契数列 <strong>F[k]=F[k-1]+F[k-2]</strong> 的性质，可以得到 <strong>（F[k]-1）=（F[k-1]-1）+（F[k-2]-1）+1</strong> 。该式说明：只要顺序表的长度为<strong> F [k]-1</strong>，则可以将该表分成长度为<strong> F [k-1]-1</strong> 和<strong> F [k-2]-1</strong> 的两段，即如上图所示。从而中间位置为<strong> mid=low+F (k-1)-1</strong></p>\n<p>2、类似的，每一子段也可以用相同的方式分割</p>\n<p>3、但顺序表长度 n 不一定刚好等于 F [k]-1，所以需要将原来的顺序表长度 n 增加至 F [k]-1。这里的 k 值只要能使得 F [k]-1 恰好大于或等于 n 即可，由以下代码得到，顺序表长度增加后，新增的位置（从 n+1 到 F [k]-1 位置），都赋为 n 位置的值即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n&gt;fib(k)-<span class=\"number\">1</span>)</span><br><span class=\"line\">    k++;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码分析\"><a class=\"markdownIt-Anchor\" href=\"#代码分析\">#</a> 代码分析</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo04;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fibonaci</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxSize = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">1000</span>, <span class=\"number\">1024</span>&#125;;</span><br><span class=\"line\">        System.out.println(fibSearch(arr, <span class=\"number\">8</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//因为后面 mid=low+F(k-1)-1,需要使用斐波那契数列，所以先获取到一个菲波那契数列</span></span><br><span class=\"line\">    <span class=\"comment\">//非递归方式得到一个斐波那契数列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] fib() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] f = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class=\"line\">            f[i] = f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a   数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 需要查找的数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回对应的下标，如果没有就返回-1；</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//编写斐波那契算法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;<span class=\"comment\">//表示斐波那契数值下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>;<span class=\"comment\">//放mid 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] f = fib();<span class=\"comment\">//获取斐波那契数列</span></span><br><span class=\"line\">        <span class=\"comment\">//获取斐波那契分割数值的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (high &gt; f[k] - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为f[k] 值可能大于 a 的长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]</span></span><br><span class=\"line\">        <span class=\"comment\">//不足的部分会使用 0 填充</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = Arrays.copyOf(a, f[k]);</span><br><span class=\"line\">        <span class=\"comment\">//实际上需要使用a数组最后的数据填充temp</span></span><br><span class=\"line\">        <span class=\"comment\">//举例：</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;1,8,10,89,1000,1024,0,0,0&#125; -----&gt; &#123;1,8,10,89,1000,1024,1024,1024,1024&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = high + <span class=\"number\">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">            temp[i] = a[high];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用while来循环处理，找到我们的数 key</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            mid =low + f[k - <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &lt; temp[mid]) &#123;<span class=\"comment\">//向数组左边查找</span></span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//为什么是k--</span></span><br><span class=\"line\">                <span class=\"comment\">//说明</span></span><br><span class=\"line\">                <span class=\"comment\">//1.全部元素 = 前面的元素 + 后面的元素</span></span><br><span class=\"line\">                <span class=\"comment\">//2.f[k] = f[k-1] +f[k-2]</span></span><br><span class=\"line\">                <span class=\"comment\">//3.因为前面有f[k-1] 个元素，所有可以继续拆分f[k-1]=f[k-2]+f[k-3]</span></span><br><span class=\"line\">                <span class=\"comment\">//即 在f[k-1] 的前面继续查找 k--</span></span><br><span class=\"line\">                <span class=\"comment\">//即下次循环 mid=f[k-1-1]-1</span></span><br><span class=\"line\">                k--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; temp[mid]) &#123;<span class=\"comment\">//向数组右边查找</span></span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//为什么是k-=2;</span></span><br><span class=\"line\">                <span class=\"comment\">//说明</span></span><br><span class=\"line\">                <span class=\"comment\">//1.全部元素 = 前面的元素 + 后面的元素</span></span><br><span class=\"line\">                <span class=\"comment\">//2.f[k] = f[k-1] +f[k-2]</span></span><br><span class=\"line\">                <span class=\"comment\">//3.因为前面有f[k-2] 个元素，所有可以继续拆分f[k-2]=f[k-3]+f[k-4]</span></span><br><span class=\"line\">                <span class=\"comment\">//即 在f[k-2] 的前面继续查找 k-=2</span></span><br><span class=\"line\">                <span class=\"comment\">//即下次循环 mid=f[k-1-2]-1</span></span><br><span class=\"line\">                k -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">                <span class=\"comment\">//需要确定，返回的是哪个下标</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid &lt;= high) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> high;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法与数据结构",
                "线性查找",
                "二分/折半查找",
                "插值查找",
                "斐波那契查找"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/07/07/07.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "https://alphonse-kino.github.io/2021/07/07/07.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2021-07-07T14:12:53.203Z",
            "content_html": "<h2 id=\"排序算法\"><a class=\"markdownIt-Anchor\" href=\"#排序算法\">#</a> 排序算法</h2>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>排序也称排序算法 (Sort Algorithm)，排序是将一组数据，依指定的顺序进行排列的过程。</p>\n<h3 id=\"排序的分类\"><a class=\"markdownIt-Anchor\" href=\"#排序的分类\">#</a> 排序的分类</h3>\n<h4 id=\"内部排序\"><a class=\"markdownIt-Anchor\" href=\"#内部排序\">#</a> 内部排序</h4>\n<p>指将需要处理的所有数据都加载到 ** 内部存储器 (内存)** 中进行排序。</p>\n<h4 id=\"外部排序法\"><a class=\"markdownIt-Anchor\" href=\"#外部排序法\">#</a> 外部排序法</h4>\n<p>数据量过大，无法全部加载到内存中，需要借助 ** 外部存储 (文件等)** 进行排序。</p>\n<p><a href=\"https://imgtu.com/i/R7VESf\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VESf.png\" alt=\"R7VESf.png\"></a></p>\n<h3 id=\"算法的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#算法的时间复杂度\">#</a> 算法的时间复杂度</h3>\n<h4 id=\"度量一个程序算法执行时间的两种方法\"><a class=\"markdownIt-Anchor\" href=\"#度量一个程序算法执行时间的两种方法\">#</a> 度量一个程序 (算法) 执行时间的两种方法</h4>\n<ol>\n<li>\n<p>事后统计的方法</p>\n<ul>\n<li>这种方法可行，但是有两个问题 ：</li>\n<li>一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；</li>\n<li>二是所得时间的统计量依赖于计算机的硬件、软件等环境因素，<strong>这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快</strong>。</li>\n</ul>\n</li>\n<li>\n<p>事前估算的方法</p>\n<ul>\n<li>通过分析某个算法的<strong>时间复杂度</strong>来判断哪个算法更优.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"时间频度\"><a class=\"markdownIt-Anchor\" href=\"#时间频度\">#</a> 时间频度</h4>\n<p>一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。<strong>一个算法中的语句执行次数称为语句频度或时间频度</strong>。记为 T (n)。</p>\n<h5 id=\"1忽略常数项\"><a class=\"markdownIt-Anchor\" href=\"#1忽略常数项\">#</a> &lt;1&gt; 忽略常数项</h5>\n<p><a href=\"https://imgtu.com/i/R7Vuwj\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Vuwj.png\" alt=\"R7Vuwj.png\"></a></p>\n<h5 id=\"2忽略低次项\"><a class=\"markdownIt-Anchor\" href=\"#2忽略低次项\">#</a> &lt;2&gt; 忽略低次项</h5>\n<p><a href=\"https://imgtu.com/i/R7VQkn\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VQkn.png\" alt=\"R7VQkn.png\"></a></p>\n<h5 id=\"3忽略系数\"><a class=\"markdownIt-Anchor\" href=\"#3忽略系数\">#</a> &lt;3&gt; 忽略系数</h5>\n<p><a href=\"https://imgtu.com/i/R7VlYq\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VlYq.png\" alt=\"R7VlYq.png\"></a></p>\n<h3 id=\"时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度\">#</a> 时间复杂度</h3>\n<h4 id=\"概念-2\"><a class=\"markdownIt-Anchor\" href=\"#概念-2\">#</a> 概念</h4>\n<ol>\n<li>\n<p>一般情况下，算法中的基本操作语句的重复执行次数是问题规模 n 的某个函数，用 T (n) 表示，若有某个辅助函数 f (n)，使得当 n 趋近于无穷大时，T (n) /f (n) 的极限值为不等于零的常数，则称 f (n) 是 T (n) 的同数量级函数。记作 T (n)=Ｏ( f (n) )，称Ｏ( f (n) ) 为算法的渐进时间复杂度，简称时间复杂度。</p>\n</li>\n<li>\n<p>T (n) 不同，但时间复杂度可能相同。 如：T (n)=n²+7n+6 与 T (n)=3n²+2n+2 它们的 T (n) 不同，但时间复杂度相同，都为 O (n²)。</p>\n</li>\n</ol>\n<h4 id=\"计算时间复杂度的方法\"><a class=\"markdownIt-Anchor\" href=\"#计算时间复杂度的方法\">#</a> 计算时间复杂度的方法：</h4>\n<ol>\n<li>\n<p>用常数 1 代替运行时间中的所有加法常数 T (n)=n²+7n+6 =&gt; T (n)=n²+7n+1</p>\n</li>\n<li>\n<p>修改后的运行次数函数中，只保留最高阶项 T (n)=n²+7n+1 =&gt; T (n) = n²</p>\n</li>\n<li>\n<p>去除最高阶项的系数 T (n) = n² =&gt;  T (n) = n² =&gt; O (n²)</p>\n</li>\n</ol>\n<h4 id=\"常见的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#常见的时间复杂度\">#</a> 常见的时间复杂度</h4>\n<p><a href=\"https://imgtu.com/i/R7VGlT\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VGlT.png\" alt=\"R7VGlT.png\"></a></p>\n<h4 id=\"平均时间复杂度和最坏时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#平均时间复杂度和最坏时间复杂度\">#</a> 平均时间复杂度和最坏时间复杂度</h4>\n<ol>\n<li>\n<p>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</p>\n</li>\n<li>\n<p>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</p>\n</li>\n<li>\n<p>平均时间复杂度和最坏时间复杂度是否一致，和算法有关</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7Vgne\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Vgne.png\" alt=\"R7Vgne.png\"></a></p>\n<h3 id=\"空间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#空间复杂度\">#</a> 空间复杂度</h3>\n<h4 id=\"简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#简单介绍\">#</a> 简单介绍</h4>\n<ul>\n<li>类似于时间复杂度的讨论，一个算法的空间复杂度 (Space Complexity) 定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。</li>\n<li>空间复杂度 (Space Complexity) 是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</li>\n<li>在做算法分析时，<strong>主要讨论的是时间复杂度</strong>。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品 (redis, memcache) 和算法 (基数排序) 本质就是<strong>用空间换时间</strong>.</li>\n</ul>\n<h1 id=\"八种基本排序算法\"><a class=\"markdownIt-Anchor\" href=\"#八种基本排序算法\">#</a> 八种基本排序算法</h1>\n<h2 id=\"1-冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#1-冒泡排序\">#</a> 1、冒泡排序</h2>\n<h3 id=\"思路分析\"><a class=\"markdownIt-Anchor\" href=\"#思路分析\">#</a> 思路分析</h3>\n<p><a href=\"https://imgtu.com/i/R7VfAA\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VfAA.png\" alt=\"R7VfAA.png\"></a></p>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;3, 9, -1, 10, 9&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;排序前&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        bubbleSort(arr);</span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;排序后&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        //为了容易理解，我们把冒泡排序的演变过程，展示出来</span></span><br><span class=\"line\"><span class=\"comment\">        //第一趟排序，就是将最大的数排在最后</span></span><br><span class=\"line\"><span class=\"comment\">        int temp=0;//临时变量</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; arr.length-1; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\"><span class=\"comment\">            if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                temp=arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i]=arr[i+1];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i+1]=temp;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第一次排序后的数组&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        //第二趟排序，就是将第二大的数排在倒数第二位</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; arr.length-2; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\"><span class=\"comment\">            if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                temp=arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i]=arr[i+1];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i+1]=temp;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第二次排序后的数组&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第三趟排序，就是将第三大的数排在倒数第三位</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; arr.length-3; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\"><span class=\"comment\">            if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                temp=arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i]=arr[i+1];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i+1]=temp;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第三次排序后的数组&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第四趟排序，就是将第四大的数排在倒数第四位</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; arr.length-4; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\"><span class=\"comment\">            if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                temp=arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i]=arr[i+1];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i+1]=temp;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第四次排序后的数组&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//冒泡排序的时间复杂度O(n^2)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;<span class=\"comment\">//临时变量</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;<span class=\"comment\">//标识变量，标识是否进行交换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    temp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;第&quot;+(i+1)+&quot;次排序后的数组&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag)&#123;  <span class=\"comment\">//在一趟排序中，一次交换都没有发生过</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                flag=<span class=\"keyword\">false</span>;<span class=\"comment\">//重置flag，进行下次判断</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-选择排序\"><a class=\"markdownIt-Anchor\" href=\"#2-选择排序\">#</a> 2、选择排序</h2>\n<h3 id=\"思路分析-2\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-2\">#</a> 思路分析</h3>\n<p>选择排序（select sorting）也是一种简单的排序方法。</p>\n<p>它的<strong>基本思想</strong>是：</p>\n<p>第一次从 arr [0]~arr [n-1] 中选取最小值，与 arr [0] 交换，</p>\n<p>第二次从 arr [1]~arr [n-1] 中选取最小值，与 arr [1] 交换，</p>\n<p>第三次从 arr [2]~arr [n-1] 中选取最小值，与 arr [2] 交换，…，</p>\n<p>第 i 次从 arr [i-1]~arr [n-1] 中选取最小值，与 arr [i-1] 交换，…,</p>\n<p>第 n-1 次从 arr [n-2]~arr [n-1] 中选取最小值，与 arr [n-2] 交换，</p>\n<p>总共通过 n-1 次，得到一个按排序码从小到大排列的有序序列。</p>\n<p><a href=\"https://imgtu.com/i/R7VTc8\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VTc8.png\" alt=\"R7VTc8.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7VXAs\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VXAs.png\" alt=\"R7VXAs.png\"></a></p>\n<h3 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        slelctSort(arr);</span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//选择排序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">slelctSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//选择排序的时间复杂度O(n^2)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> minIndex = i;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min=arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length ; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(min&gt;arr[j])&#123;<span class=\"comment\">//说明假定的最小值，并不是最小</span></span><br><span class=\"line\">                    min=arr[j];<span class=\"comment\">//重置min</span></span><br><span class=\"line\">                    minIndex=j;<span class=\"comment\">//重置minIndex</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minIndex!=i)&#123;</span><br><span class=\"line\">                arr[minIndex]=arr[i];</span><br><span class=\"line\">                arr[i]=min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //使用逐步推导的方式来，讲解选择排序</span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮</span></span><br><span class=\"line\"><span class=\"comment\">        //原始数组：101,34,119,1</span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮排序：1,34,119,101</span></span><br><span class=\"line\"><span class=\"comment\">        //算法，先简单 --&gt;再复杂，就是可以把一个复杂的算法，拆分成简单的问题 --&gt;逐步解决</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮</span></span><br><span class=\"line\"><span class=\"comment\">        int minIndex = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        int min=arr[0];</span></span><br><span class=\"line\"><span class=\"comment\">        for(int j = 0+1;j&lt;arr.length;j++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if(min&gt;arr[j])&#123;//说明假定的最小值，并不是最小</span></span><br><span class=\"line\"><span class=\"comment\">                min=arr[j];//重置min</span></span><br><span class=\"line\"><span class=\"comment\">                minIndex=j;//重置minIndex</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //将最小值，放在arr[0],即交换</span></span><br><span class=\"line\"><span class=\"comment\">        if(minIndex!=0)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[minIndex]=arr[0];</span></span><br><span class=\"line\"><span class=\"comment\">            arr[0]=min;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第一轮后···&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第二轮</span></span><br><span class=\"line\"><span class=\"comment\">        minIndex = 1;</span></span><br><span class=\"line\"><span class=\"comment\">        min=arr[1];</span></span><br><span class=\"line\"><span class=\"comment\">        for(int j = 1+1;j&lt;arr.length;j++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if(min&gt;arr[j])&#123;//说明假定的最小值，并不是最小</span></span><br><span class=\"line\"><span class=\"comment\">                min=arr[j];//重置min</span></span><br><span class=\"line\"><span class=\"comment\">                minIndex=j;//重置minIndex</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //将最小值，放在arr[1],即交换</span></span><br><span class=\"line\"><span class=\"comment\">        if (minIndex != 1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[minIndex]=arr[1];</span></span><br><span class=\"line\"><span class=\"comment\">            arr[1]=min;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第二轮后···&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第三轮</span></span><br><span class=\"line\"><span class=\"comment\">        minIndex = 2;</span></span><br><span class=\"line\"><span class=\"comment\">        min=arr[2];</span></span><br><span class=\"line\"><span class=\"comment\">        for(int j = 2+1;j&lt;arr.length;j++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if(min&gt;arr[j])&#123;//说明假定的最小值，并不是最小</span></span><br><span class=\"line\"><span class=\"comment\">                min=arr[j];//重置min</span></span><br><span class=\"line\"><span class=\"comment\">                minIndex=j;//重置minIndex</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //将最小值，放在arr[2],即交换</span></span><br><span class=\"line\"><span class=\"comment\">        if (minIndex != 2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[minIndex]=arr[2];</span></span><br><span class=\"line\"><span class=\"comment\">            arr[2]=min;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第三轮后···&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-插入排序\"><a class=\"markdownIt-Anchor\" href=\"#3-插入排序\">#</a> 3、插入排序</h2>\n<h3 id=\"思路分析-3\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-3\">#</a> 思路分析</h3>\n<p>插入排序（Insertion Sorting）的<strong>基本思想</strong>是：</p>\n<p>把 n 个待排序的元素看成为一个有序表和一个无序表，</p>\n<p>开始时有序表中只包含一个元素，无序表中包含有 n-1 个元素，</p>\n<p>排序过程中每次从无序表中取出第一个元素，</p>\n<p>把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，</p>\n<p>使之成为新的有序表。</p>\n<h3 id=\"r7vjnnpng\"><a class=\"markdownIt-Anchor\" href=\"#r7vjnnpng\">#</a> <a href=\"https://imgtu.com/i/R7VjNn\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VjNn.png\" alt=\"R7VjNn.png\"></a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        int[] arr = &#123;101, 34, 119, 1, -1, 88&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//        insertSort(arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        insertSort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//插入排序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> insertVal = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> insertIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//使用for循环简化代码</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//定义待插入的数</span></span><br><span class=\"line\">            insertVal = arr[i];</span><br><span class=\"line\">            insertIndex = i - <span class=\"number\">1</span>;<span class=\"comment\">//即arr[1]的前面这个数的下标</span></span><br><span class=\"line\">            <span class=\"comment\">//给insertVal找到插入队伍</span></span><br><span class=\"line\">            <span class=\"comment\">//说明</span></span><br><span class=\"line\">            <span class=\"comment\">//1.insertIndex &gt;= 0 保证在给insertVal找插入位置，不越界</span></span><br><span class=\"line\">            <span class=\"comment\">//2.insertVal &lt; arr[insertIndex] 待插入的数，还没找到插入的位置</span></span><br><span class=\"line\">            <span class=\"comment\">//3.就需要将arr[insertIndex] 后移</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (insertIndex &gt;= <span class=\"number\">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class=\"line\">                arr[insertIndex + <span class=\"number\">1</span>] = arr[insertIndex];</span><br><span class=\"line\">                insertIndex--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当退出while循环时,说明插入的位置找到，insertIndex+1</span></span><br><span class=\"line\">            <span class=\"comment\">//这里判断是否需要赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(insertIndex+<span class=\"number\">1</span>!=i)&#123;</span><br><span class=\"line\">                arr[insertIndex + <span class=\"number\">1</span>] = insertVal;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.printf(&quot;第%d轮插入&quot;,i);</span></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        //使用逐步推导的方式来讲解，便于理解</span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮&#123;101,34,119,1&#125; =》&#123;34,101,119,1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //定义待插入的数</span></span><br><span class=\"line\"><span class=\"comment\">        int insertVal = arr[1];</span></span><br><span class=\"line\"><span class=\"comment\">        int insertIndex = 1 - 1;//即arr[1]的前面这个数的下标</span></span><br><span class=\"line\"><span class=\"comment\">        //给insertVal找到插入队伍</span></span><br><span class=\"line\"><span class=\"comment\">        //说明</span></span><br><span class=\"line\"><span class=\"comment\">        //1.insertIndex &gt;= 0 保证在给insertVal找插入位置，不越界</span></span><br><span class=\"line\"><span class=\"comment\">        //2.insertVal &lt; arr[insertIndex] 待插入的数，还没找到插入的位置</span></span><br><span class=\"line\"><span class=\"comment\">        //3.就需要将arr[insertIndex] 后移</span></span><br><span class=\"line\"><span class=\"comment\">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[insertIndex + 1] = arr[insertIndex];</span></span><br><span class=\"line\"><span class=\"comment\">            insertIndex--;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //当退出while循环时,说明插入的位置找到，insertIndex+1</span></span><br><span class=\"line\"><span class=\"comment\">        arr[insertIndex + 1] = insertVal;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.printf(&quot;第1轮插入&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第2轮</span></span><br><span class=\"line\"><span class=\"comment\">        insertVal = arr[2];</span></span><br><span class=\"line\"><span class=\"comment\">        insertIndex = 2 - 1;</span></span><br><span class=\"line\"><span class=\"comment\">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[insertIndex + 1] = arr[insertIndex];</span></span><br><span class=\"line\"><span class=\"comment\">            insertIndex--;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        arr[insertIndex + 1] = insertVal;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.printf(&quot;第2轮插入&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第3轮</span></span><br><span class=\"line\"><span class=\"comment\">        insertVal = arr[3];</span></span><br><span class=\"line\"><span class=\"comment\">        insertIndex = 3 - 1;</span></span><br><span class=\"line\"><span class=\"comment\">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[insertIndex + 1] = arr[insertIndex];</span></span><br><span class=\"line\"><span class=\"comment\">            insertIndex--;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        arr[insertIndex + 1] = insertVal;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.printf(&quot;第3轮插入&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#4-希尔排序\">#</a> 4、希尔排序</h2>\n<h3 id=\"希尔排序法介绍\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序法介绍\">#</a> 希尔排序法介绍</h3>\n<p>希尔排序是希尔（Donald Shell）于 1959 年提出的一种排序算法。希尔排序也是一种<strong>插入排序</strong>，它是简单插入排序经过改进之后的一个<strong>更高效的版本</strong>，也称为<strong>缩小增量排序</strong>。</p>\n<h3 id=\"思路分析-4\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-4\">#</a> 思路分析</h3>\n<p><strong>希尔排序法基本思想</strong></p>\n<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止</p>\n<p><a href=\"https://imgtu.com/i/R7ZpcT\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ZpcT.png\" alt=\"R7ZpcT.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7Vz90\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Vz90.png\" alt=\"R7Vz90.png\"></a></p>\n<h3 id=\"代码实现两种方法\"><a class=\"markdownIt-Anchor\" href=\"#代码实现两种方法\">#</a> 代码实现 (两种方法)</h3>\n<h4 id=\"交换法\"><a class=\"markdownIt-Anchor\" href=\"#交换法\">#</a> 交换法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;8, 9, 1, 7, 2, 3, 5, 4, 6, 0&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//shellSort(arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        shellSort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//循环处理</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - gap; j &gt;= <span class=\"number\">0</span>; j -= gap) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果当前元素大于加上步长后的那个元素，说明交换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + gap]) &#123;</span><br><span class=\"line\">                        temp = arr[j];</span><br><span class=\"line\">                        arr[j] = arr[j + gap];</span><br><span class=\"line\">                        arr[j + gap] = temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;第&quot; + (++count) + &quot;轮后&quot; + Arrays.toString(arr));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        //使用逐步推导的方式逐步说明</span></span><br><span class=\"line\"><span class=\"comment\">        int temp = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮</span></span><br><span class=\"line\"><span class=\"comment\">        //因为第一轮排序是将10个数据分成了5组</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 5; i &lt; arr.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //遍历各组中所有的元素（共5组，每组两个元素）</span></span><br><span class=\"line\"><span class=\"comment\">            for (int j = i - 5; j &gt;= 0; j -= 5) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //如果当前元素大于加上步长后的那个元素，说明交换</span></span><br><span class=\"line\"><span class=\"comment\">                if (arr[j] &gt; arr[j + 5]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    temp = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j] = arr[j + 5];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j + 5] = temp;</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第1轮后&quot;+ Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        //第二轮排序</span></span><br><span class=\"line\"><span class=\"comment\">        //因为第二轮排序是将10个数据分成了2组</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 2; i &lt; arr.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //遍历各组中所有的元素（共5组，每组两个元素）</span></span><br><span class=\"line\"><span class=\"comment\">            for (int j = i - 2; j &gt;= 0; j -= 2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //如果当前元素大于加上步长后的那个元素，说明交换</span></span><br><span class=\"line\"><span class=\"comment\">                if (arr[j] &gt; arr[j + 2]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    temp = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j] = arr[j + 2];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j + 2] = temp;</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第2轮后&quot;+ Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        //第三轮排序</span></span><br><span class=\"line\"><span class=\"comment\">        //因为第三轮排序是将10个数据分成了2/2=1组</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 1; i &lt; arr.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //遍历各组中所有的元素（共5组，每组两个元素）</span></span><br><span class=\"line\"><span class=\"comment\">            for (int j = i - 1; j &gt;= 0; j -= 1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //如果当前元素大于加上步长后的那个元素，说明交换</span></span><br><span class=\"line\"><span class=\"comment\">                if (arr[j] &gt; arr[j + 1]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    temp = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j] = arr[j + 1];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j + 1] = temp;</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第3轮后&quot;+ Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"移位法\"><a class=\"markdownIt-Anchor\" href=\"#移位法\">#</a> 移位法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;8, 9, 1, 7, 2, 3, 5, 4, 6, 0&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//shellSort(arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        shellSort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对交换式的希尔排序进行优化 -&gt; 移位法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//常量gap，并逐渐的缩小常量</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//从第gap个元素，逐个对其所在的组进行直接插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j=i;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp =arr[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[j]&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (j-gap&gt;=<span class=\"number\">0</span>&amp;&amp;temp&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//移动</span></span><br><span class=\"line\">                        arr[j]=arr[j-gap];</span><br><span class=\"line\">                        j-=gap;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//当退出while后，就给temp找到插入的位置</span></span><br><span class=\"line\">                    arr[j]=temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-快速排序\"><a class=\"markdownIt-Anchor\" href=\"#5-快速排序\">#</a> 5、快速排序</h2>\n<h3 id=\"思路分析-5\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-5\">#</a> 思路分析</h3>\n<p>** 快速排序（Quicksort）是对冒泡排序的一种改进。** 基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p>\n<p><a href=\"https://imgtu.com/i/R7Zt8P\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Zt8P.jpg\" alt=\"R7Zt8P.jpg\"></a></p>\n<h3 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo5;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        int[] arr = &#123;-9, 78, 0, 23, -567, 70,-5,54,899,-155&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//        quickSort(arr, 0, arr.length - 1);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;arr=&quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        quickSort(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = left;   <span class=\"comment\">//左小标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = right;  <span class=\"comment\">//右下标</span></span><br><span class=\"line\">        <span class=\"comment\">//pivot 中轴值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> pivot = arr[(left + right) / <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;<span class=\"comment\">//临时变量，交换时使用</span></span><br><span class=\"line\">        <span class=\"comment\">//while循环的目的是让比pivot值小的放到左边</span></span><br><span class=\"line\">        <span class=\"comment\">//比pivot大的值放到右边</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//在pivot的左边一直找，找到大于等于pivot值，才退出</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[l] &lt; pivot) &#123;</span><br><span class=\"line\">                l += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//在pivot的右边一直找，找到小于等于pivot值，才退出</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[r] &gt; pivot) &#123;</span><br><span class=\"line\">                r -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果 l &gt;= r 说明pivot 的左右两边的值，已经按照左边全部是小于等于pivot的值，右边全部是大于等于pivot的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//交换</span></span><br><span class=\"line\">            temp = arr[l];</span><br><span class=\"line\">            arr[l] = arr[r];</span><br><span class=\"line\">            arr[r] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//如果交换完后，发现这个arr[l]==pivot 值，相当于 r--，前移</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[l] == pivot) &#123;</span><br><span class=\"line\">                r -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果交换完后，发现这个arr[r]==pivot 值，相当于 l++，前移</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[r] == pivot) &#123;</span><br><span class=\"line\">                l += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果l==r,必须l++,r--,否则出现栈溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">            l += <span class=\"number\">1</span>;</span><br><span class=\"line\">            r -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向左递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; r) &#123;</span><br><span class=\"line\">            quickSort(arr, left, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向右递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &gt; l) &#123;</span><br><span class=\"line\">            quickSort(arr, l, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-归并排序\"><a class=\"markdownIt-Anchor\" href=\"#6-归并排序\">#</a> 6、归并排序</h2>\n<h3 id=\"思路分析-6\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-6\">#</a> 思路分析</h3>\n<p><strong>归并排序思想示意图 1:</strong></p>\n<p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分 (divide) 成一些小的问题然后递归求解，而治 (conquer) 的阶段则将分的阶段得到的各答案 &quot;修补&quot; 在一起，即分而治之)。</p>\n<p><a href=\"https://imgtu.com/i/R7ZdKS\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ZdKS.png\" alt=\"R7ZdKS.png\"></a></p>\n<p><strong>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程。</strong></p>\n<p><strong>归并排序思想示意图 2:</strong></p>\n<p><strong>再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将 [4,5,7,8] 和 [1,2,3,6] 两个已经有序的子序列，合并为最终序列 [1,2,3,4,5,6,7,8]，来看下实现步骤</strong></p>\n<p><a href=\"https://imgtu.com/i/R7Z6Cq\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Z6Cq.png\" alt=\"R7Z6Cq.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7ZWKU\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ZWKU.png\" alt=\"R7ZWKU.png\"></a></p>\n<h3 id=\"代码实现-4\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-4\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo6;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergetSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;8, 4, 5, 7, 1, 3, 6, 2&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];<span class=\"comment\">//归并排序需要一个额外空间</span></span><br><span class=\"line\">        mergeSort(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>,temp);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;归并排序后=&quot;</span>+ Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//分+合方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span>[] temp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;<span class=\"comment\">//中间索引</span></span><br><span class=\"line\">            <span class=\"comment\">//向左递归进行分解</span></span><br><span class=\"line\">            mergeSort(arr, left, mid, temp);</span><br><span class=\"line\">            <span class=\"comment\">//向右递归进行分际</span></span><br><span class=\"line\">            mergeSort(arr, mid+<span class=\"number\">1</span>, right, temp);</span><br><span class=\"line\">            <span class=\"comment\">//合并</span></span><br><span class=\"line\">            merge(arr,left,mid,right,temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并的方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   排序的原始数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左边有序序列的初始索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mid   中间索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右边有序序列的初始索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> temp  做中转的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span>[] temp)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;=========================&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;<span class=\"comment\">//初始化 i,左边有序序列的初始索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = mid + <span class=\"number\">1</span>;<span class=\"comment\">//初始化 j,右边有序序列的初始索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; <span class=\"comment\">//指向temp数组的当前索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//（一）</span></span><br><span class=\"line\">        <span class=\"comment\">//先把左右两边（有序）的数据按照规则填充到temp数组</span></span><br><span class=\"line\">        <span class=\"comment\">//直到左右两边的有序序列，有一边处理完毕</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<span class=\"comment\">//继续</span></span><br><span class=\"line\">            <span class=\"comment\">//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素</span></span><br><span class=\"line\">            <span class=\"comment\">//即将左边的当前元素，填充到temp数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class=\"line\">                temp[t] = arr[i];</span><br><span class=\"line\">                t += <span class=\"number\">1</span>;</span><br><span class=\"line\">                i += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//反之，将右边有序序列的当前元素，填充到temp数组中</span></span><br><span class=\"line\">                temp[t] = arr[j];</span><br><span class=\"line\">                t += <span class=\"number\">1</span>;</span><br><span class=\"line\">                j += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//（二）</span></span><br><span class=\"line\">        <span class=\"comment\">//把有剩余数据的一边的数据依次全部填充到temp</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid) &#123;<span class=\"comment\">//左边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class=\"line\">            temp[t] = arr[i];</span><br><span class=\"line\">            t += <span class=\"number\">1</span>;</span><br><span class=\"line\">            i += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= right) &#123;<span class=\"comment\">//右边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class=\"line\">            temp[t] = arr[j];</span><br><span class=\"line\">            t += <span class=\"number\">1</span>;</span><br><span class=\"line\">            j += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//（三）</span></span><br><span class=\"line\">        <span class=\"comment\">//将temp数组的元素拷贝到arr</span></span><br><span class=\"line\">        <span class=\"comment\">//注意：并不是每次都拷贝数组中所有的元素</span></span><br><span class=\"line\">        t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> templeft = left;</span><br><span class=\"line\">        <span class=\"comment\">//第一次合并 templeft = 0，right = 1；</span></span><br><span class=\"line\">        <span class=\"comment\">//第二次合并 templeft = 2，right = 3；</span></span><br><span class=\"line\">        <span class=\"comment\">//第三次合并 templeft = 0，right = 3；</span></span><br><span class=\"line\">        <span class=\"comment\">// . . .</span></span><br><span class=\"line\">        <span class=\"comment\">//最后一次合并 templeft = 0，right = 7；</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;templeft=&quot;+templeft+&quot;,right&quot;+right);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (templeft &lt;= right) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            arr[templeft] = temp[t];</span><br><span class=\"line\">            t += <span class=\"number\">1</span>;</span><br><span class=\"line\">            templeft += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-基数排序桶排序的扩展\"><a class=\"markdownIt-Anchor\" href=\"#7-基数排序桶排序的扩展\">#</a> 7、基数排序 (桶排序的扩展)</h2>\n<h3 id=\"思路分析-7\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-7\">#</a> 思路分析</h3>\n<ol>\n<li>\n<p><strong>基数排序</strong>（radix sort）属于 “分配式排序”（distribution sort），又称 “桶子法”（bucket sort）或 bin sort，顾名思义，它是通过键值的各个位的值，将要排序的<strong>元素分配</strong>至某些 “桶” 中，达到排序的作用</p>\n</li>\n<li>\n<p>基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法</p>\n</li>\n<li>\n<p>基数排序 (Radix Sort) 是<strong>桶排序</strong>的扩展</p>\n</li>\n<li>\n<p>基数排序是 1887 年赫尔曼・何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p>\n</li>\n</ol>\n<p><strong>基本思想</strong></p>\n<ul>\n<li>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序，这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列</li>\n</ul>\n<p><strong>图文解释</strong></p>\n<p><a href=\"https://imgtu.com/i/R7ZIa9\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ZIa9.png\" alt=\"R7ZIa9.png\"></a></p>\n<p><strong>基数排序的说明</strong></p>\n<ol>\n<li>\n<p>基数排序是对传统桶排序的扩展，速度很快.</p>\n</li>\n<li>\n<p>基数排序是经典的空间换时间的方式，占用内存很大，当对海量数据排序时，容易造成 OutOfMemoryError 。</p>\n</li>\n<li>\n<p>基数排序时稳定的。[注：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r [i]=r [j]，且 r [i] 在 r [j] 之前，而在排序后的序列中，r [i] 仍在 r [j] 之前，<strong>则称这种排序算法是稳定的；否则称为不稳定的</strong>]</p>\n</li>\n<li>\n<p><strong>有负数的数组，我们不用基数排序来进行排序</strong> **,** <strong>如果要支持负数，参考</strong> **😗* <strong><a href=\"https://code.i-harness.com/zh-CN/q/e98fa9\">https://code.i-harness.com/zh-CN/q/e98fa9</a></strong></p>\n</li>\n</ol>\n<h3 id=\"代码实现-5\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-5\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo7;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RadixSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;53, 3, 542, 748, 14, 214&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//radixSort(arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//80000 * 11 *4</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i] = (<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span> + format);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        radixSort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1 = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span> + format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;arr=&quot;+Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//基数排序方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">radixSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据前面的推导过程，我们可以得到最终的基数排序代码</span></span><br><span class=\"line\">        <span class=\"comment\">//1.得到数组中最大的数的位数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &gt; arr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                max = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//得到最大数是几位数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxLength = (max + <span class=\"string\">&quot;&quot;</span>).length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//定义一个二维数组，表示10个桶，每个桶都是一个一维数组</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 二维数组包含10个一维数组</span></span><br><span class=\"line\">        <span class=\"comment\">//2. 为了防止在放入数的时候，数据溢出，则每一个一维数组（桶），大小定为arr.length</span></span><br><span class=\"line\">        <span class=\"comment\">//3.明确，基数排序是使用空间换时间的经典算法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>][arr.length];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录各个桶的每次放入的数据个数</span></span><br><span class=\"line\">        <span class=\"comment\">//可以这样理解</span></span><br><span class=\"line\">        <span class=\"comment\">//比如：buckerElementCounts[0]，记录的就是 bucket[0] 桶的放入数据个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] buckerElementCounts = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, n = <span class=\"number\">1</span>; i &lt; maxLength; i++, n *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//（针对每个元素对应的位进行排序处理），第一次是个位，第二次是十位，第三次是百位 依次类推</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//取出每个元素对应位数的值</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> digitOfElement = arr[j] / n % <span class=\"number\">10</span>;</span><br><span class=\"line\">                <span class=\"comment\">//放入到对应的桶中</span></span><br><span class=\"line\">                bucket[digitOfElement][buckerElementCounts[digitOfElement]] = arr[j];</span><br><span class=\"line\">                buckerElementCounts[digitOfElement]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//按照这个桶的顺序（一维数组的下标依次取出数据，放回原来数组）</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个桶，并将桶中的数据，放回原来的数组中</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; buckerElementCounts.length; k++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果桶中，有数据，我们才放入到原数组中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buckerElementCounts[k] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//循环该桶即第k个桶（即第看个一维数组），放入</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; buckerElementCounts[k]; l++) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//取出元素放入到arr</span></span><br><span class=\"line\">                        arr[index++] = bucket[k][l];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//第 i+1 轮处理后需要将每个buckerElementCounts[k] 置零</span></span><br><span class=\"line\">                buckerElementCounts[k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;第&quot;+(i+1)+&quot;轮，对个位的排序处理arr = &quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮排序（针对每个元素的个位进行排序处理）</span></span><br><span class=\"line\"><span class=\"comment\">        //定义一个二维数组，表示10个桶，每个桶都是一个一维数组</span></span><br><span class=\"line\"><span class=\"comment\">        //说明</span></span><br><span class=\"line\"><span class=\"comment\">        //1. 二维数组包含10个一维数组</span></span><br><span class=\"line\"><span class=\"comment\">        //2. 为了防止在放入数的时候，数据溢出，则每一个一维数组（桶），大小定为arr.length</span></span><br><span class=\"line\"><span class=\"comment\">        //3.明确，基数排序是使用空间换时间的经典算法</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        int[][] bucket = new int[10][arr.length];</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录各个桶的每次放入的数据个数</span></span><br><span class=\"line\"><span class=\"comment\">        //可以这样理解</span></span><br><span class=\"line\"><span class=\"comment\">        //比如：buckerElementCounts[0]，记录的就是 bucket[0] 桶的放入数据个数</span></span><br><span class=\"line\"><span class=\"comment\">        int[] buckerElementCounts = new int[10];</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮（针对每个元素的个位进行排序处理）</span></span><br><span class=\"line\"><span class=\"comment\">        for (int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //取出每个元素的个位的值</span></span><br><span class=\"line\"><span class=\"comment\">            int digitOfElement = arr[j] / 1 % 10;</span></span><br><span class=\"line\"><span class=\"comment\">            //放入到对应的桶中</span></span><br><span class=\"line\"><span class=\"comment\">            bucket[digitOfElement][buckerElementCounts[digitOfElement]] = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[digitOfElement]++;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //按照这个桶的顺序（一维数组的下标依次取出数据，放回原来数组）</span></span><br><span class=\"line\"><span class=\"comment\">        int index = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        //遍历每一个桶，并将桶中的数据，放回原来的数组中</span></span><br><span class=\"line\"><span class=\"comment\">        for (int k = 0; k &lt; buckerElementCounts.length; k++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果桶中，有数据，我们才放入到原数组中</span></span><br><span class=\"line\"><span class=\"comment\">            if (buckerElementCounts[k] != 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //循环该桶即第k个桶（即第看个一维数组），放入</span></span><br><span class=\"line\"><span class=\"comment\">                for (int l = 0; l &lt; buckerElementCounts[k]; l++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    //取出元素放入到arr</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[index++] = bucket[k][l];</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            //第一轮处理后需要将每个buckerElementCounts[k] 置零</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[k] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第一轮，对个位的排序处理arr = &quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //---------------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第二轮（针对每个元素的十位进行排序处理）</span></span><br><span class=\"line\"><span class=\"comment\">        for (int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //取出每个元素的十位的值</span></span><br><span class=\"line\"><span class=\"comment\">            int digitOfElement = arr[j] / 10 % 10;</span></span><br><span class=\"line\"><span class=\"comment\">            //放入到对应的桶中</span></span><br><span class=\"line\"><span class=\"comment\">            bucket[digitOfElement][buckerElementCounts[digitOfElement]] = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[digitOfElement]++;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //按照这个桶的顺序（一维数组的下标依次取出数据，放回原来数组）</span></span><br><span class=\"line\"><span class=\"comment\">        index = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        //遍历每一个桶，并将桶中的数据，放回原来的数组中</span></span><br><span class=\"line\"><span class=\"comment\">        for (int k = 0; k &lt; buckerElementCounts.length; k++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果桶中，有数据，我们才放入到原数组中</span></span><br><span class=\"line\"><span class=\"comment\">            if (buckerElementCounts[k] != 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //循环该桶即第k个桶（即第看个一维数组），放入</span></span><br><span class=\"line\"><span class=\"comment\">                for (int l = 0; l &lt; buckerElementCounts[k]; l++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    //取出元素放入到arr</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[index++] = bucket[k][l];</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            //第二轮处理后需要将每个buckerElementCounts[k] 置零</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[k] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第二轮，对十位的排序处理arr = &quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        //---------------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第三轮（针对每个元素的百位进行排序处理）</span></span><br><span class=\"line\"><span class=\"comment\">        for (int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //取出每个元素的百位的值</span></span><br><span class=\"line\"><span class=\"comment\">            int digitOfElement = arr[j] / 100 % 10;</span></span><br><span class=\"line\"><span class=\"comment\">            //放入到对应的桶中</span></span><br><span class=\"line\"><span class=\"comment\">            bucket[digitOfElement][buckerElementCounts[digitOfElement]] = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[digitOfElement]++;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //按照这个桶的顺序（一维数组的下标依次取出数据，放回原来数组）</span></span><br><span class=\"line\"><span class=\"comment\">        index = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        //遍历每一个桶，并将桶中的数据，放回原来的数组中</span></span><br><span class=\"line\"><span class=\"comment\">        for (int k = 0; k &lt; buckerElementCounts.length; k++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果桶中，有数据，我们才放入到原数组中</span></span><br><span class=\"line\"><span class=\"comment\">            if (buckerElementCounts[k] != 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //循环该桶即第k个桶（即第看个一维数组），放入</span></span><br><span class=\"line\"><span class=\"comment\">                for (int l = 0; l &lt; buckerElementCounts[k]; l++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    //取出元素放入到arr</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[index++] = bucket[k][l];</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            //第三轮处理后需要将每个buckerElementCounts[k] 置零</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[k] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第三轮，对百个位的排序处理arr = &quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"8-堆排序未讲解\"><a class=\"markdownIt-Anchor\" href=\"#8-堆排序未讲解\">#</a> 8、堆排序（未讲解）</h2>\n<h3 id=\"思路分析-8\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-8\">#</a> 思路分析</h3>\n<h3 id=\"代码实现-6\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-6\">#</a> 代码实现</h3>\n<h2 id=\"基本排序算法的比较\"><a class=\"markdownIt-Anchor\" href=\"#基本排序算法的比较\">#</a> 基本排序算法的比较</h2>\n<ol>\n<li><a href=\"https://imgtu.com/i/R7Zzad\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Zzad.png\" alt=\"R7Zzad.png\"></a><strong> 稳定</strong>：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面；</li>\n<li><strong>不稳定</strong>：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面；</li>\n<li><strong>内排序</strong>：所有排序操作都在内存中完成；</li>\n<li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>\n<li><strong>时间复杂度：</strong> 一个算法执行所耗费的时间。</li>\n<li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小。</li>\n<li><strong>n:</strong> 数据规模</li>\n<li><strong>k:</strong> “桶” 的个数</li>\n<li><strong>In-place:</strong>  不占用额外内存</li>\n<li><strong>Out-place:</strong> 占用额外内存</li>\n</ol>\n",
            "tags": [
                "算法与数据结构",
                "排序算法",
                "冒泡排序",
                "时间复杂度",
                "选择排序",
                "插入排序",
                "希尔排序",
                "快速排序",
                "归并排序",
                "基数排序",
                "堆排序"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/07/07/06.%E9%80%92%E5%BD%92/",
            "url": "https://alphonse-kino.github.io/2021/07/07/06.%E9%80%92%E5%BD%92/",
            "title": "递归",
            "date_published": "2021-07-07T14:09:36.962Z",
            "content_html": "<h3 id=\"递归recursion\"><a class=\"markdownIt-Anchor\" href=\"#递归recursion\">#</a> 递归 (Recursion)</h3>\n<h4 id=\"递归的概念\"><a class=\"markdownIt-Anchor\" href=\"#递归的概念\">#</a> 递归的概念</h4>\n<p>递归就是方法自己调用自己，每次调用时传入不同的变量 **.**<strong> 递归有助于编程者解决复杂的问题</strong>，同时可以让代码变得简洁。</p>\n<h3 id=\"递归的调用机制\"><a class=\"markdownIt-Anchor\" href=\"#递归的调用机制\">#</a> 递归的调用机制</h3>\n<p><a href=\"https://imgtu.com/i/R7ETeJ\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ETeJ.png\" alt=\"R7ETeJ.png\"></a></p>\n<h4 id=\"代码演示\"><a class=\"markdownIt-Anchor\" href=\"#代码演示\">#</a> 代码演示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecursionTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = factorial(<span class=\"number\">3</span>);</span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">        test(<span class=\"number\">4</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//递归</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            test(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;n=&quot;</span> + n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//阶乘</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>) * n;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"递归的用途\"><a class=\"markdownIt-Anchor\" href=\"#递归的用途\">#</a> 递归的用途</h3>\n<ul>\n<li>\n<p>各种数学问题如: 8 皇后问题，汉诺塔，阶乘问题，迷宫问题，球和篮子的问题 (google 编程大赛)</p>\n</li>\n<li>\n<p>各种算法中也会使用到递归，比如快排，归并排序，二分查找，分治算法等.</p>\n</li>\n<li>\n<p>将用栈解决的问题–&gt; 第归代码比较简洁</p>\n</li>\n</ul>\n<h3 id=\"递归遵守的规则\"><a class=\"markdownIt-Anchor\" href=\"#递归遵守的规则\">#</a> 递归遵守的规则</h3>\n<ul>\n<li>执行一个方法时，就创建一个新的受保护的独立空间 (栈空间)</li>\n<li>方法的局部变量是独立的，不会相互影响，比如 n 变量</li>\n<li>如果方法中使用的是引用类型变量 (比如数组)，就会共享该引用类型的数据.</li>\n<li>递归必须向退出递归的条件逼近，否则就是无限递归，出现 StackOverflowError，死龟了：)</li>\n<li>当一个方法执行完毕，或者遇到 return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或者返回时，该方法也就执行完毕。</li>\n</ul>\n<h3 id=\"递归的案例\"><a class=\"markdownIt-Anchor\" href=\"#递归的案例\">#</a> 递归的案例</h3>\n<h4 id=\"迷宫问题\"><a class=\"markdownIt-Anchor\" href=\"#迷宫问题\">#</a> 迷宫问题</h4>\n<h5 id=\"问题介绍\"><a class=\"markdownIt-Anchor\" href=\"#问题介绍\">#</a> 问题介绍</h5>\n<p><a href=\"https://imgtu.com/i/R7ELJx\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ELJx.png\" alt=\"R7ELJx.png\"></a></p>\n<h5 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//迷宫问题</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MiGong</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先创建一个二维数组</span></span><br><span class=\"line\">        <span class=\"comment\">//模拟地图</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] map = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">8</span>][<span class=\"number\">7</span>];</span><br><span class=\"line\">        <span class=\"comment\">//使用 1 表示墙</span></span><br><span class=\"line\">        <span class=\"comment\">//上下全部置为 1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">7</span>; i++) &#123;</span><br><span class=\"line\">            map[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            map[<span class=\"number\">7</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//左右全部置为 1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            map[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            map[i][<span class=\"number\">6</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//设置挡板  用 1 表示</span></span><br><span class=\"line\">        map[<span class=\"number\">3</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        map[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        map[<span class=\"number\">6</span>][<span class=\"number\">4</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//输出地图</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;地图情况&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">7</span>; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用递归回溯给小球找路</span></span><br><span class=\"line\"></span><br><span class=\"line\">        setWay(map, <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//输出新的地图，小球走过，并标识过的地图</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;小球走过，并标识过的地图&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">7</span>; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用递归回溯来给小球找路</span></span><br><span class=\"line\">    <span class=\"comment\">//1、 map 表示地图</span></span><br><span class=\"line\">    <span class=\"comment\">//2、 i,j 表示哪个位置开始出发(1,1)</span></span><br><span class=\"line\">    <span class=\"comment\">//3、 如果小球能到map[6][5] 位置，则说明通路找到了</span></span><br><span class=\"line\">    <span class=\"comment\">//4、 当map[i][j] 为 0 时表示该点没有走，为 1 时表示墙；2 表示通路可以走，3 表示已经走了 但是走不通</span></span><br><span class=\"line\">    <span class=\"comment\">//5、 在走迷宫时，需要确定一个策略（方法） 下 -&gt; 右 -&gt; 上 -&gt; 左，如果该点走不通，在回溯</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> map 表示地图</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i   从哪个位置开始找</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> j</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到通路，就返回true，否则返回false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">setWay</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] map, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[<span class=\"number\">6</span>][<span class=\"number\">5</span>] == <span class=\"number\">2</span>) &#123;<span class=\"comment\">//表示通路已经找到</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map[i][j] == <span class=\"number\">0</span>) &#123;<span class=\"comment\">//如果该点没有走过</span></span><br><span class=\"line\">                <span class=\"comment\">//按照策略走 下 -&gt; 右 -&gt; 上 -&gt; 左</span></span><br><span class=\"line\">                map[i][j] = <span class=\"number\">2</span>;<span class=\"comment\">//假定该点可以走通</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setWay(map, i + <span class=\"number\">1</span>, j)) &#123;<span class=\"comment\">//向下走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j + <span class=\"number\">1</span>)) &#123;<span class=\"comment\">//向右走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i - <span class=\"number\">1</span>, j)) &#123;<span class=\"comment\">//向上走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j - <span class=\"number\">1</span>)) &#123;<span class=\"comment\">//向左走</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//说明该点走不通，是死路</span></span><br><span class=\"line\">                    map[i][j] = <span class=\"number\">3</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//如果map[i][j] != 0,可能是1,2,3</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"八皇后问题\"><a class=\"markdownIt-Anchor\" href=\"#八皇后问题\">#</a> 八皇后问题</h4>\n<h5 id=\"问题介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#问题介绍-2\">#</a> 问题介绍</h5>\n<p><a href=\"https://imgtu.com/i/R7ExyD\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ExyD.png\" alt=\"R7ExyD.png\"></a></p>\n<h5 id=\"算法分析\"><a class=\"markdownIt-Anchor\" href=\"#算法分析\">#</a> 算法分析</h5>\n<ol>\n<li>\n<p>第一个皇后先放第一行第一列</p>\n</li>\n<li>\n<p>第二个皇后放在第二行第一列、然后判断是否 OK [即判断是冲突]， 如果不 OK，继续放在第二列、第三列、依次把所有列都放完，找到一个合适</p>\n</li>\n<li>\n<p>继续第三个皇后，还是第一列、第二列…… 直到第 8 个皇后也能放在一个不冲突的位置，算是找到了一个正确解</p>\n</li>\n<li>\n<p>当得到一个正确解时，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到.</p>\n</li>\n<li>\n<p>然后回头继续第一个皇后放第二列，后面继续循环执行 1,2,3,4 的步骤</p>\n</li>\n</ol>\n<h5 id=\"说明\"><a class=\"markdownIt-Anchor\" href=\"#说明\">#</a> 说明</h5>\n<p>理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题. arr [8] = {0 , 4, 7, 5, 2, 6, 1, 3} // 对应 arr 下标 表示第几行，即第几个皇后，arr [i] = val , val 表示第 i+1 个皇后，放在第 i+1 行的第 val+1 列</p>\n<h5 id=\"代码演示-2\"><a class=\"markdownIt-Anchor\" href=\"#代码演示-2\">#</a> 代码演示</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//八皇后问题</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Queue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//先定义一个max，表示共有多少个皇后</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> max=<span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"comment\">//定义数组array，保存皇后放置位置的结果，比如arr = &#123;0,4,7,5,2,6,1,3&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] array = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[max];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试</span></span><br><span class=\"line\">        Queue queue = <span class=\"keyword\">new</span> Queue();</span><br><span class=\"line\">        queue.check(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一共有%d种解法&quot;</span>,count);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法，放置第n个皇后</span></span><br><span class=\"line\">    <span class=\"comment\">//特别注意：check 是 每一次递归时，进入到check都有 for (int i = 0; i &lt; max; i++)，因此会有回溯</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == max)&#123;<span class=\"comment\">//n=8,其实八个皇后已然放好了</span></span><br><span class=\"line\">            print();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//依次放入皇后，并判断是否冲突</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; max; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//先把当前这个皇后n,放到该行的第一列</span></span><br><span class=\"line\">            array[n]=i;</span><br><span class=\"line\">            <span class=\"comment\">//判断当放置第n个皇后到i列时，是否冲突</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(judge(n))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//接着放置n+1个皇后，开始递归</span></span><br><span class=\"line\">                check(n+<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果冲突，就继续执行array[n] = i;即将第n个皇后，放置在本行的后移一个位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查看当我们放置第n个皇后时，就去检测该皇后是否和前面已经摆放的皇后冲突</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> n 表示第n皇后</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1.array[i]==array[n]  表示判断 第n个皇后是否和前面的n-1个皇后在同一列</span></span><br><span class=\"line\">            <span class=\"comment\">//2.Math.abs(n-i)==Math.abs(array[n]-array[i])  表示判断第n个皇后是否和第i个皇后在同一斜线上</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(array[i]==array[n] || Math.abs(n-i)==Math.abs(array[n]-array[i]))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写一个方法，可以将皇后摆放的位置输出</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(array[i]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法与数据结构",
                "递归"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/07/07/05.%E6%A0%88Stack/",
            "url": "https://alphonse-kino.github.io/2021/07/07/05.%E6%A0%88Stack/",
            "title": "栈",
            "date_published": "2021-07-07T14:08:40.265Z",
            "content_html": "<h2 id=\"栈stack\"><a class=\"markdownIt-Anchor\" href=\"#栈stack\">#</a> 栈 Stack</h2>\n<h2 id=\"栈的简介\"><a class=\"markdownIt-Anchor\" href=\"#栈的简介\">#</a> 栈的简介</h2>\n<ol>\n<li>\n<p>栈的英文为 (stack)</p>\n</li>\n<li>\n<p>栈是一个<strong>先入后出</strong> (FILO-First In Last Out) 的有序列表。</p>\n</li>\n<li>\n<p>栈 (stack) 是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为<strong>栈顶</strong> (Top)，另一端为固定的一端，称为<strong>栈底</strong> (Bottom)。</p>\n</li>\n<li>\n<p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p>\n</li>\n</ol>\n<h2 id=\"出栈pop和入栈pus图显\"><a class=\"markdownIt-Anchor\" href=\"#出栈pop和入栈pus图显\">#</a> 出栈 (pop) 和入栈 (pus)（图显）</h2>\n<p><a href=\"https://imgtu.com/i/R7AXrQ\"><img src=\"https://z3.ax1x.com/2021/07/06/R7AXrQ.png\" alt=\"R7AXrQ.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7E9P0\"><img src=\"https://z3.ax1x.com/2021/07/06/R7E9P0.png\" alt=\"R7E9P0.png\"></a></p>\n<h2 id=\"栈的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#栈的应用场景\">#</a> 栈的应用场景</h2>\n<ol>\n<li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</li>\n<li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li>\n<li>表达式的转换 [中缀表达式转后缀表达式] 与求值 (实际解决)。</li>\n<li>二叉树的遍历。</li>\n<li>图形的深度优先 (depth 一 first) 搜索法。</li>\n</ol>\n<h2 id=\"栈的快速入门\"><a class=\"markdownIt-Anchor\" href=\"#栈的快速入门\">#</a> 栈的快速入门</h2>\n<p><a href=\"https://imgtu.com/i/R7EkMF\"><img src=\"https://z3.ax1x.com/2021/07/06/R7EkMF.png\" alt=\"R7EkMF.png\"></a></p>\n<h3 id=\"代码展示数组模拟栈\"><a class=\"markdownIt-Anchor\" href=\"#代码展示数组模拟栈\">#</a> 代码展示（数组模拟栈）</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"><span class=\"comment\">//测试ArrayStack是否正确</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个ArrayStack对象表示  栈</span></span><br><span class=\"line\">        ArrayStack stack = <span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">4</span>);</span><br><span class=\"line\">        String key=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> loop=<span class=\"keyword\">true</span>;<span class=\"comment\">//控制是否退出菜单</span></span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loop)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;show：表示显示栈&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;exit：表示显示栈&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;push：表示添加数据到栈（入栈）&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;pop：表示从栈中取出数据（出栈）&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;请输出你的选择&quot;</span>);</span><br><span class=\"line\">            key=scanner.next();</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (key)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;show&quot;</span>:</span><br><span class=\"line\">                    stack.list();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">                    scanner.close();</span><br><span class=\"line\">                    loop=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;push&quot;</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;请输入一个数&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> value=scanner.nextInt();</span><br><span class=\"line\">                    stack.push(value);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;pop&quot;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> res=stack.pop();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;出栈的数据是%d\\n&quot;</span>,res);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        System.out.println(e.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序退出&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个ArrayStack 表示栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//栈的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack;<span class=\"comment\">//数组、数组模拟栈，数据就放在该数组里</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top=-<span class=\"number\">1</span>;<span class=\"comment\">//top表示栈顶，初始值为-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">        stack=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//栈满</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==maxSize-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//栈空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断是否栈满</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFull())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        top++;</span><br><span class=\"line\">        stack[top]=value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//出栈-pop,将栈顶的数据返回</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断是否null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value=stack[top];</span><br><span class=\"line\">        top--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示栈（遍历栈）</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历是，需要从栈顶开始显示</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否栈空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;栈空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=top;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>,i,stack[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码展示链表模拟栈练习\"><a class=\"markdownIt-Anchor\" href=\"#代码展示链表模拟栈练习\">#</a> 代码展示（链表模拟栈）练习</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"栈实现综合计算器中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#栈实现综合计算器中缀表达式\">#</a> 栈实现综合计算器 (中缀表达式)</h3>\n<h4 id=\"思路分析图解\"><a class=\"markdownIt-Anchor\" href=\"#思路分析图解\">#</a> 思路分析 (图解)</h4>\n<p><a href=\"https://imgtu.com/i/R7EMRK\"><img src=\"https://z3.ax1x.com/2021/07/06/R7EMRK.png\" alt=\"R7EMRK.png\"></a></p>\n<h4 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<p>先实现一位数运算，后实现多位数运算</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//完成表达式的运算</span></span><br><span class=\"line\">        String expression=<span class=\"string\">&quot;300+2*6-2&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//创建两个栈，数栈，符号栈</span></span><br><span class=\"line\">        ArrayStack numStack=<span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">10</span>);</span><br><span class=\"line\">        ArrayStack operStack=<span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">//定义相关变量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;<span class=\"comment\">//用于扫描</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num1=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num2=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oper=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch=<span class=\"string\">&#x27; &#x27;</span>;<span class=\"comment\">//将每次扫描得到的char保存到ch中</span></span><br><span class=\"line\">        String keepNum=<span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//用于拼接多位数</span></span><br><span class=\"line\">        <span class=\"comment\">//开始while循环的扫描expression</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//依次得到expression 的每一个字符</span></span><br><span class=\"line\">            ch=expression.substring(index,index+<span class=\"number\">1</span>).charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">//判断ch是什么，然后做相应的处理</span></span><br><span class=\"line\">            <span class=\"comment\">//如果是运算符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(operStack.isOper(ch))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果是运算符；判断当前的符号栈是否为null</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!operStack.isEmpty())&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符，</span></span><br><span class=\"line\">                    <span class=\"comment\">// 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(operStack.priority(ch)&lt;=operStack.priority(operStack.peek()))&#123;</span><br><span class=\"line\">                        num1=numStack.pop();</span><br><span class=\"line\">                        num2=numStack.pop();</span><br><span class=\"line\">                        oper=operStack.pop();</span><br><span class=\"line\">                        res=numStack.cal(num1,num2,oper);</span><br><span class=\"line\">                        <span class=\"comment\">//把运算符的结果入数栈</span></span><br><span class=\"line\">                        numStack.push(res);</span><br><span class=\"line\">                        <span class=\"comment\">//然后将当前的操作符入符号栈</span></span><br><span class=\"line\">                        operStack.push(ch);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果当前的操作符的优先级大于栈中的操作符</span></span><br><span class=\"line\">                        operStack.push(ch);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果为null，直接入栈</span></span><br><span class=\"line\">                    operStack.push(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//如果是数字，则直接入数栈</span></span><br><span class=\"line\">                <span class=\"comment\">//numStack.push(ch-48);//? &quot;1+3&quot; &#x27;1&#x27; != 1</span></span><br><span class=\"line\">                <span class=\"comment\">//分析思路</span></span><br><span class=\"line\">                <span class=\"comment\">//1.当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span></span><br><span class=\"line\">                <span class=\"comment\">//2.在处理数时，需要向expression的表达式的index，后看一位，如果是数就进行扫描，如果是符号才入栈</span></span><br><span class=\"line\">                <span class=\"comment\">//3.因此需要定义一个变量（字符串），用于拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//处理多位数</span></span><br><span class=\"line\">                keepNum +=ch;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index==expression.length()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    numStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span></span><br><span class=\"line\">                    <span class=\"comment\">//注意是看后一位，不是index++</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(operStack.isOper(expression.substring(index+<span class=\"number\">1</span>,index+<span class=\"number\">2</span>).charAt(<span class=\"number\">0</span>)))&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果后一位是运算符，则入栈keepNum=&quot;1&quot;或者&quot;123&quot;</span></span><br><span class=\"line\">                        numStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\">                        <span class=\"comment\">//重要的！！！ ,清空keepNUm</span></span><br><span class=\"line\">                        keepNum=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//让index+1，并判断是否扫描到expression最后</span></span><br><span class=\"line\">            index++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index&gt;=expression.length())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当表达式扫描完毕，按顺序的从 数栈和符号栈中pop出相应的数和符号，并运行</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(operStack.isEmpty())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            num1=numStack.pop();</span><br><span class=\"line\">            num2=numStack.pop();</span><br><span class=\"line\">            oper=operStack.pop();</span><br><span class=\"line\">            res=numStack.cal(num1,num2,oper);</span><br><span class=\"line\">            <span class=\"comment\">//把运算符的结果入数栈</span></span><br><span class=\"line\">            numStack.push(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将数栈的最后数，pop出，就是结果</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res2=numStack.pop();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;表达式%s=%d&quot;</span>,expression,res2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先创建一个栈，直接使用前面创建好的</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个ArrayStack 表示栈,需要扩展功能</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//栈的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack;<span class=\"comment\">//数组、数组模拟栈，数据就放在该数组里</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top=-<span class=\"number\">1</span>;<span class=\"comment\">//top表示栈顶，初始值为-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">        stack=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加一个方法，可以返回当前栈顶的值，但是不是真正的pop</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack[top];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//栈满</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==maxSize-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//栈空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断是否栈满</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFull())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        top++;</span><br><span class=\"line\">        stack[top]=value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//出栈-pop,将栈顶的数据返回</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断是否null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value=stack[top];</span><br><span class=\"line\">        top--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示栈（遍历栈）</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历是，需要从栈顶开始显示数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否栈空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;栈空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=top;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>,i,stack[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回运算符的优先级，优先级是程序员未确定，优先级用数字表示</span></span><br><span class=\"line\">    <span class=\"comment\">//数字越大，则优先级越高</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">(<span class=\"keyword\">int</span> oper)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oper == <span class=\"string\">&#x27;*&#x27;</span>|| oper==<span class=\"string\">&#x27;/&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(oper == <span class=\"string\">&#x27;+&#x27;</span>|| oper==<span class=\"string\">&#x27;-&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;<span class=\"comment\">//假定目前的表达式只有+、-、*、/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是不是一个运算符</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOper</span><span class=\"params\">(<span class=\"keyword\">char</span> val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val==<span class=\"string\">&#x27;+&#x27;</span>||val==<span class=\"string\">&#x27;-&#x27;</span>||val==<span class=\"string\">&#x27;*&#x27;</span>||val==<span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//计算方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2,<span class=\"keyword\">int</span> oper)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;<span class=\"comment\">//res 用于存放计算的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (oper)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">                res=num1+num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                res=num2-num1;<span class=\"comment\">//注意顺序</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">                res=num1*num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                res=num2/num1;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"栈的三种表达式\"><a class=\"markdownIt-Anchor\" href=\"#栈的三种表达式\">#</a> 栈的三种表达式</h2>\n<ul>\n<li>前缀表达式（波兰表达式）</li>\n<li>中缀表达式</li>\n<li>后缀表达式（逆波兰表达式）</li>\n</ul>\n<h3 id=\"前缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#前缀表达式\">#</a> 前缀表达式</h3>\n<ul>\n<li>前缀表达式又称为波兰式</li>\n<li>前缀表达式的运算符位于操作数之前</li>\n</ul>\n<p>例如：(3+4)*5-6   对应的前缀表达式是：- * + 3 4 5 6</p>\n<h4 id=\"前缀表达式的计算机求值\"><a class=\"markdownIt-Anchor\" href=\"#前缀表达式的计算机求值\">#</a> 前缀表达式的计算机求值</h4>\n<p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果</p>\n<p>例如: (3+4)×5-6 对应的前缀表达式就是 <strong>- × + 3 4 5 6 ,</strong> <strong>针对前缀表达式求值步骤如下:</strong></p>\n<p>1) 从<strong>右至左扫描</strong>，将 6、5、4、3 压入堆栈</p>\n<p>2) 遇到 + 运算符，因此弹出 3 和 4（3 为栈顶元素，4 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈</p>\n<p>3) 接下来是 × 运算符，因此弹出 7 和 5，计算出 7×5=35，将 35 入栈</p>\n<p>最后是 - 运算符，计算出 35-6 的值，即 29，由此得出最终结果</p>\n<h3 id=\"中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#中缀表达式\">#</a> 中缀表达式</h3>\n<p>1) 中缀表达式就是<strong>常见的运算表达式</strong>，如 (3+4)×5-6</p>\n<p>2) 中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作 (一般转成后缀表达式.)</p>\n<h3 id=\"后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#后缀表达式\">#</a> 后缀表达式</h3>\n<p>1) 后缀表达式又称<strong>逆波兰表达式</strong>，与前缀表达式相似，只是运算符位于操作数之后</p>\n<p>2) 中举例说明： (3+4)×5-6 对应的后缀表达式就是 <strong>3 4 + 5 × 6 –</strong></p>\n<p>例如：</p>\n<p><a href=\"https://imgtu.com/i/R7E8qH\"><img src=\"https://z3.ax1x.com/2021/07/06/R7E8qH.png\" alt=\"R7E8qH.png\"></a></p>\n<h4 id=\"后缀表达式的计算机求值\"><a class=\"markdownIt-Anchor\" href=\"#后缀表达式的计算机求值\">#</a> 后缀表达式的计算机求值</h4>\n<p><strong>从左至右</strong>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p>\n<p>例如: (3+4)×5-6 对应的后缀表达式就是 <strong>3 4 + 5 × 6 - ,</strong> <strong>针对后缀表达式求值步骤如下:</strong></p>\n<p>1) 从左至右扫描，将 3 和 4 压入堆栈；</p>\n<p>2) 遇到 + 运算符，因此弹出 4 和 3（4 为栈顶元素，3 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈；</p>\n<p>3) 将 5 入栈；</p>\n<p>4) 接下来是 × 运算符，因此弹出 5 和 7，计算出 7×5=35，将 35 入栈；</p>\n<p>5) 将 6 入栈；</p>\n<p>最后是 - 运算符，计算出 35-6 的值，即 29，由此得出最终结果</p>\n<p><strong>我们完成一个逆波兰计算器，要求完成如下任务</strong>:</p>\n<p>1)<strong> 输入一个逆波兰表达式</strong> (后缀表达式)<strong>，使用栈</strong> (Stack), <strong>计算其结果</strong></p>\n<p>2)<strong> 支持小括号和多位数整数，因为这里我们主要讲的是数据结构，因此计算器进行简化，只支持对整数的计算。</strong></p>\n<h4 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolandNotation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先定义给逆波兰表达式</span></span><br><span class=\"line\">        <span class=\"comment\">//(30+4)*5-6 =&gt; 3 4 + 5 * 6 -</span></span><br><span class=\"line\">        <span class=\"comment\">//说明为了方便，逆波兰表达式的数字和符号使用空格隔开</span></span><br><span class=\"line\">        String suffixExpression = <span class=\"string\">&quot;30 4 + 5 * 6 -&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//思路</span></span><br><span class=\"line\">        <span class=\"comment\">//1.先将&quot;3 4 + 5 * 6 -&quot; =&gt; 放到ArrayList中</span></span><br><span class=\"line\">        <span class=\"comment\">//2.将ArrayList传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; list = getListString(suffixExpression);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;list：&quot;</span>+list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=calculate(list);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;计算的结果是:&quot;</span>+res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getListString</span><span class=\"params\">(String suffixExpression)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将suffixExpression分割</span></span><br><span class=\"line\">        String[] split = suffixExpression.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String ele : split) &#123;</span><br><span class=\"line\">            list.add(ele);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//完成对逆波兰表达式的运算</span></span><br><span class=\"line\">    <span class=\"comment\">/*  (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</span></span><br><span class=\"line\"><span class=\"comment\">        1.从左至右扫描，将3和4压入堆栈；</span></span><br><span class=\"line\"><span class=\"comment\">        2.遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        3.将5入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        4.接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        5.将6入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        6.最后是-运算符，计算出35-6的值，即29，由此得出最终结果</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建给栈，只需一个栈即可</span></span><br><span class=\"line\">        Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//遍历 ls</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String item : ls) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里使用正则表达式来取出数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123;<span class=\"comment\">//匹配的是多位数</span></span><br><span class=\"line\">                <span class=\"comment\">//入栈</span></span><br><span class=\"line\">                stack.push(item);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//pop出两个数，并运算，再入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;+&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 + num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;-&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 - num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;*&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 * num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 / num2;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span>  RuntimeException(<span class=\"string\">&quot;运算符有误&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//把res 入栈</span></span><br><span class=\"line\">                stack.push(res+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//最后留在stack中的数便是运算结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.parseInt(stack.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中缀表达式转为后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#中缀表达式转为后缀表达式\">#</a> 中缀表达式转为后缀表达式</h3>\n<h4 id=\"思路分析\"><a class=\"markdownIt-Anchor\" href=\"#思路分析\">#</a> 思路分析</h4>\n<p><a href=\"https://imgtu.com/i/R7EDsg\"><img src=\"https://z3.ax1x.com/2021/07/06/R7EDsg.png\" alt=\"R7EDsg.png\"></a></p>\n<h4 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo04;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolandNotation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//完成将一个中缀表达式转成后缀表达式的功能</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 1+((2+3)*4)-5 =&gt; 转成1 2 3 + 4 * + 5 -</span></span><br><span class=\"line\">        <span class=\"comment\">//2. 因为直接对str进行操作，不方便，因此先将 &quot;1+((2+3)*4)-5&quot; =》中缀表达式对应的List</span></span><br><span class=\"line\">        <span class=\"comment\">//   即1+((2+3)*4)-5 =&gt; ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">        <span class=\"comment\">//  即 ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]  =&gt; ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String expression =<span class=\"string\">&quot;1+((2+3)*4)-5&quot;</span>;</span><br><span class=\"line\">        List&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);</span><br><span class=\"line\">        System.out.println(infixExpressionList); <span class=\"comment\">//[1, +, (, (, 2, +, 3, ), *, 4, ), -, 5]</span></span><br><span class=\"line\">        List&lt;String&gt; parseSuffixExpressionList = parseSuffixExpressionList(infixExpressionList);</span><br><span class=\"line\">        System.out.println(parseSuffixExpressionList);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> calculate = calculate(parseSuffixExpressionList);</span><br><span class=\"line\">        System.out.println(calculate);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //先定义给逆波兰表达式</span></span><br><span class=\"line\"><span class=\"comment\">        //(30+4)*5-6 =&gt; 30 4 + 5 * 6 -</span></span><br><span class=\"line\"><span class=\"comment\">        //说明为了方便，逆波兰表达式的数字和符号使用空格隔开</span></span><br><span class=\"line\"><span class=\"comment\">        String suffixExpression = &quot;30 4 + 5 * 6 -&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        //思路</span></span><br><span class=\"line\"><span class=\"comment\">        //1.先将&quot;3 4 + 5 * 6 -&quot; =&gt; 放到ArrayList中</span></span><br><span class=\"line\"><span class=\"comment\">        //2.将ArrayList传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        List&lt;String&gt; list = getListString(suffixExpression);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;list：&quot;+list);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        int res=calculate(list);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;计算的结果是:&quot;+res);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">    <span class=\"comment\">//  即 ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]  =&gt; ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">parseSuffixExpressionList</span><span class=\"params\">(List&lt;String&gt; ls)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义两个栈</span></span><br><span class=\"line\">        Stack&lt;String&gt; s1=<span class=\"keyword\">new</span> Stack&lt;&gt;();<span class=\"comment\">//符号栈</span></span><br><span class=\"line\">        <span class=\"comment\">//因为s2这个栈，在整个转换过程中，没有pop操作，而且后面还需要逆序输出</span></span><br><span class=\"line\">        <span class=\"comment\">//因此比较麻烦，所以就不用Stack&lt;String&gt; 直接使用List&lt;String&gt; s2</span></span><br><span class=\"line\">        <span class=\"comment\">//Stack&lt;String&gt; s2=new Stack&lt;&gt;();//存放中间结果的栈</span></span><br><span class=\"line\">        List&lt;String&gt; s2= <span class=\"keyword\">new</span> ArrayList&lt;&gt;();<span class=\"comment\">//存放中间结果的List</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历ls</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String item:ls)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是一个数，就入s2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>))&#123;</span><br><span class=\"line\">                s2.add(item);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item.equals(<span class=\"string\">&quot;(&quot;</span>))&#123;</span><br><span class=\"line\">                s1.push(item);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item.equals(<span class=\"string\">&quot;)&quot;</span>))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!s1.peek().equals(<span class=\"string\">&quot;(&quot;</span>))&#123;</span><br><span class=\"line\">                    s2.add(s1.pop());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                s1.pop();<span class=\"comment\">//!!!!将 &quot;(&quot; 弹出s1栈，消除小括号</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//当item的优先级小于等于s1栈顶的运算符，将s1栈顶的运算符弹出并加入到s2中，再次转到（4.1）与s1中新的栈顶运算符相比较</span></span><br><span class=\"line\">                <span class=\"comment\">//缺少一个比较运算符优先级高低的方法</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (s1.size()!=<span class=\"number\">0</span> &amp;&amp; Operation.getValue(s1.peek())&gt;=Operation.getValue(item))&#123;</span><br><span class=\"line\">                    s2.add(s1.pop());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//最后需要将item压入栈中</span></span><br><span class=\"line\">                s1.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s1.size()!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            s2.add(s1.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s2;<span class=\"comment\">//注意因为是存放到List，因此按循序输出就是后缀表达式对应的list</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将中缀表达式转换成对应的list</span></span><br><span class=\"line\">    <span class=\"comment\">//   即1+((2+3)*4)-5 =&gt; ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">toInfixExpressionList</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个list，存放中缀表达式对应的内容</span></span><br><span class=\"line\">        List&lt;String&gt; ls=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;<span class=\"comment\">//这是一个指针，用于遍历 中缀表达式字符串</span></span><br><span class=\"line\">        String str;<span class=\"comment\">//对多位数的拼接</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> c;<span class=\"comment\">//每遍历一个字符，就放入c</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果 c 是一个非数字，需要加入到ls</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((c=s.charAt(i))&lt;<span class=\"number\">48</span>||(c=s.charAt(i))&gt;<span class=\"number\">57</span>)&#123;</span><br><span class=\"line\">                ls.add(<span class=\"string\">&quot;&quot;</span>+c);</span><br><span class=\"line\">                i++;<span class=\"comment\">//i需要后移</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果是一个数，需要考虑多位数问题</span></span><br><span class=\"line\">                str=<span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//先将str 置成 &quot;&quot; &#x27;0&#x27;[48] -&gt; &#x27;9&#x27;[57]</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i&lt;s.length() &amp;&amp; (c=s.charAt(i))&gt;=<span class=\"number\">48</span> &amp;&amp; (c=s.charAt(i))&lt;=<span class=\"number\">57</span>)&#123;</span><br><span class=\"line\">                    str+=c;<span class=\"comment\">//拼接</span></span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ls.add(str);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (i&lt;s.length());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getListString</span><span class=\"params\">(String suffixExpression)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将suffixExpression分割</span></span><br><span class=\"line\">        String[] split = suffixExpression.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String ele : split) &#123;</span><br><span class=\"line\">            list.add(ele);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//完成对逆波兰表达式的运算</span></span><br><span class=\"line\">    <span class=\"comment\">/*  (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</span></span><br><span class=\"line\"><span class=\"comment\">        1.从左至右扫描，将3和4压入堆栈；</span></span><br><span class=\"line\"><span class=\"comment\">        2.遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        3.将5入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        4.接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        5.将6入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        6.最后是-运算符，计算出35-6的值，即29，由此得出最终结果</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建给栈，只需一个栈即可</span></span><br><span class=\"line\">        Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//遍历 ls</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String item : ls) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里使用正则表达式来取出数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123;<span class=\"comment\">//匹配的是多位数</span></span><br><span class=\"line\">                <span class=\"comment\">//入栈</span></span><br><span class=\"line\">                stack.push(item);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//pop出两个数，并运算，再入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;+&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 + num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;-&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 - num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;*&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 * num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 / num2;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span>  RuntimeException(<span class=\"string\">&quot;运算符有误&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//把res 入栈</span></span><br><span class=\"line\">                stack.push(res+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//最后留在stack中的数便是运算结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.parseInt(stack.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编写一个类Operation 可以返回一个运算符，对应的优先级</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Operation</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ADD = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SUB = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MUL = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DIV = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写一个方法，返回对应的优先级数字</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(String operation)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (operation)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">                result=ADD;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                result=SUB;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">                result=MUL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                result=DIV;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;不存在该运算符&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整代码实现包含小数点\"><a class=\"markdownIt-Anchor\" href=\"#完整代码实现包含小数点\">#</a> 完整代码实现，包含小数点</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.reversepolishcal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReversePolishMultiCalc</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配 + - * / ( ) 运算符</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SYMBOL = <span class=\"string\">&quot;\\\\+|-|\\\\*|/|\\\\(|\\\\)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LEFT = <span class=\"string\">&quot;(&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String RIGHT = <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ADD = <span class=\"string\">&quot;+&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MINUS= <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TIMES = <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DIVISION = <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加減 + -</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEVEL_01 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 乘除 * /</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEVEL_02 = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 括号</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEVEL_HIGH = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;String&gt; data = Collections.synchronizedList(<span class=\"keyword\">new</span> ArrayList&lt;String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 去除所有空白符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">replaceAllBlank</span><span class=\"params\">(String s )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// \\\\s+ 匹配任何空白字符，包括空格、制表符、换页符等等, 等价于[ \\f\\n\\r\\t\\v]</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.replaceAll(<span class=\"string\">&quot;\\\\s+&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是不是数字 int double long float</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumber</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        Pattern pattern = Pattern.compile(<span class=\"string\">&quot;^[-\\\\+]?[.\\\\d]*$&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pattern.matcher(s).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是不是运算符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymbol</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.matches(SYMBOL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配运算等级</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calcLevel</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;+&quot;</span>.equals(s) || <span class=\"string\">&quot;-&quot;</span>.equals(s))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> LEVEL_01;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;*&quot;</span>.equals(s) || <span class=\"string\">&quot;/&quot;</span>.equals(s))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> LEVEL_02;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LEVEL_HIGH;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">doMatch</span> <span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(s.trim())) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;data is empty&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isNumber(s.charAt(<span class=\"number\">0</span>)+<span class=\"string\">&quot;&quot;</span>)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;data illeagle,start not with a number&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        s = replaceAllBlank(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        String each;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isSymbol(s.charAt(i)+<span class=\"string\">&quot;&quot;</span>))&#123;</span><br><span class=\"line\">                each = s.charAt(i)+<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"comment\">//栈为空，(操作符，或者 操作符优先级大于栈顶优先级 &amp;&amp; 操作符优先级不是( )的优先级 及是 ) 不能直接入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stack.isEmpty() || LEFT.equals(each)</span><br><span class=\"line\">                        || ((calcLevel(each) &gt; calcLevel(stack.peek())) &amp;&amp; calcLevel(each) &lt; LEVEL_HIGH))&#123;</span><br><span class=\"line\">                    stack.push(each);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( !stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek()))&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//栈非空，操作符优先级小于等于栈顶优先级时出栈入列，直到栈为空，或者遇到了(，最后操作符入栈</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek()) )&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(calcLevel(stack.peek()) == LEVEL_HIGH)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        data.add(stack.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack.push(each);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(RIGHT.equals(each))&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ) 操作符，依次出栈入列直到空栈或者遇到了第一个)操作符，此时)出栈</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; LEVEL_HIGH &gt;= calcLevel(stack.peek()))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(LEVEL_HIGH == calcLevel(stack.peek()))&#123;</span><br><span class=\"line\">                            stack.pop();</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        data.add(stack.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                start = i ;    <span class=\"comment\">//前一个运算符的位置</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( i == s.length()-<span class=\"number\">1</span> || isSymbol(s.charAt(i+<span class=\"number\">1</span>)+<span class=\"string\">&quot;&quot;</span>) )&#123;</span><br><span class=\"line\">                each = start == <span class=\"number\">0</span> ? s.substring(start,i+<span class=\"number\">1</span>) : s.substring(start+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isNumber(each)) &#123;</span><br><span class=\"line\">                    data.add(each);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;data not match number&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果栈里还有元素，此时元素需要依次出栈入列，可以想象栈里剩下栈顶为/，栈底为+，应该依次出栈入列，可以直接翻转整个stack 添加到队列</span></span><br><span class=\"line\">        Collections.reverse(stack);</span><br><span class=\"line\">        data.addAll(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(stack));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 算出结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Double <span class=\"title\">doCalc</span><span class=\"params\">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class=\"line\">        Double d = <span class=\"number\">0d</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span> || list.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.size() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.println(list);</span><br><span class=\"line\">            d = Double.valueOf(list.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            list1.add(list.get(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isSymbol(list.get(i)))&#123;</span><br><span class=\"line\">                Double d1 = doTheMath(list.get(i - <span class=\"number\">2</span>), list.get(i - <span class=\"number\">1</span>), list.get(i));</span><br><span class=\"line\">                list1.remove(i);</span><br><span class=\"line\">                list1.remove(i-<span class=\"number\">1</span>);</span><br><span class=\"line\">                list1.set(i-<span class=\"number\">2</span>,d1+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                list1.addAll(list.subList(i+<span class=\"number\">1</span>,list.size()));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        doCalc(list1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 运算</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> symbol</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Double <span class=\"title\">doTheMath</span><span class=\"params\">(String s1,String s2,String symbol)</span></span>&#123;</span><br><span class=\"line\">        Double result ;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (symbol)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ADD : result = Double.valueOf(s1) + Double.valueOf(s2); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MINUS : result = Double.valueOf(s1) - Double.valueOf(s2); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> TIMES : result = Double.valueOf(s1) * Double.valueOf(s2); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DIVISION : result = Double.valueOf(s1) / Double.valueOf(s2); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> : result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//String math = &quot;9+(3-1)*3+10/2&quot;;</span></span><br><span class=\"line\">        String math = <span class=\"string\">&quot;12.8 + (2 - 3.55)*4+10/5.0&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            doCalc(doMatch(math));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法与数据结构",
                "栈",
                "(后缀表达式)逆波兰表达式"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/06/30/04.%E9%93%BE%E8%A1%A8LinkedList/",
            "url": "https://alphonse-kino.github.io/2021/06/30/04.%E9%93%BE%E8%A1%A8LinkedList/",
            "title": "链表LinkedList",
            "date_published": "2021-06-30T03:56:20.048Z",
            "content_html": "<h2 id=\"链表linkedlist\"><a class=\"markdownIt-Anchor\" href=\"#链表linkedlist\">#</a> 链表 LinkedList</h2>\n<h3 id=\"链表简介\"><a class=\"markdownIt-Anchor\" href=\"#链表简介\">#</a> 链表简介</h3>\n<p>链表是有序的列表，它在内存中的存储</p>\n<p><a href=\"https://imgtu.com/i/RwA5yq\"><img src=\"https://z3.ax1x.com/2021/06/29/RwA5yq.png\" alt=\"RwA5yq.png\"></a></p>\n<p>小结：</p>\n<ol>\n<li>\n<p>链表是以节点的方式来存储，是链式存储</p>\n</li>\n<li>\n<p>每个节点包含 data 域， next 域：指向下一个节点.</p>\n</li>\n<li>\n<p>如图：发现链表的<strong>各个节点不一定是连续存储</strong>.</p>\n</li>\n<li>\n<p>链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定</p>\n<p>1. 单链表（带头结点）逻辑结构示意图</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/RwA7wT\"><img src=\"https://z3.ax1x.com/2021/06/29/RwA7wT.png\" alt=\"RwA7wT.png\"></a></p>\n<h2 id=\"单链表\"><a class=\"markdownIt-Anchor\" href=\"#单链表\">#</a> 单链表</h2>\n<h3 id=\"单链表的应用增删改查\"><a class=\"markdownIt-Anchor\" href=\"#单链表的应用增删改查\">#</a> 单链表的应用【增删改查】</h3>\n<p><a href=\"https://imgtu.com/i/RwALY4\"><img src=\"https://z3.ax1x.com/2021/06/29/RwALY4.png\" alt=\"RwALY4.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RwAOfJ\"><img src=\"https://z3.ax1x.com/2021/06/29/RwAOfJ.png\" alt=\"RwAOfJ.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RwEkfH\"><img src=\"https://z3.ax1x.com/2021/06/29/RwEkfH.png\" alt=\"RwEkfH.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleLinkedListDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//进行测试</span></span><br><span class=\"line\">        <span class=\"comment\">//先创建几个节点</span></span><br><span class=\"line\">        HeroNode hero1 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>, <span class=\"string\">&quot;佐菲&quot;</span>, <span class=\"string\">&quot;炎头队长&quot;</span>);</span><br><span class=\"line\">        HeroNode hero2 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>, <span class=\"string\">&quot;曼&quot;</span>, <span class=\"string\">&quot;老二&quot;</span>);</span><br><span class=\"line\">        HeroNode hero3 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>, <span class=\"string\">&quot;赛文&quot;</span>, <span class=\"string\">&quot;seven&quot;</span>);</span><br><span class=\"line\">        HeroNode hero4 = <span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>, <span class=\"string\">&quot;杰克&quot;</span>, <span class=\"string\">&quot;归曼&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个链表</span></span><br><span class=\"line\">        SingleLinkedList singleLinkedList = <span class=\"keyword\">new</span> SingleLinkedList();</span><br><span class=\"line\">        <span class=\"comment\">//添加</span></span><br><span class=\"line\">        <span class=\"comment\">//singleLinkedList.add(hero1);</span></span><br><span class=\"line\">        <span class=\"comment\">//singleLinkedList.add(hero2);</span></span><br><span class=\"line\">        <span class=\"comment\">//singleLinkedList.add(hero3);</span></span><br><span class=\"line\">        <span class=\"comment\">//singleLinkedList.add(hero4);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加入按照编号的顺序</span></span><br><span class=\"line\">        singleLinkedList.addByOrder(hero1);</span><br><span class=\"line\">        singleLinkedList.addByOrder(hero4);</span><br><span class=\"line\">        singleLinkedList.addByOrder(hero3);</span><br><span class=\"line\">        singleLinkedList.addByOrder(hero2);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改前的链表&quot;</span>);</span><br><span class=\"line\">        singleLinkedList.list();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试修改节点的代码</span></span><br><span class=\"line\">        HeroNode newheroNode=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>,<span class=\"string\">&quot;奥特曼&quot;</span>,<span class=\"string\">&quot;初代&quot;</span>);</span><br><span class=\"line\">        singleLinkedList.update(newheroNode);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;修改后的链表&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;删除前的链表&quot;</span>);</span><br><span class=\"line\">        singleLinkedList.list();</span><br><span class=\"line\"></span><br><span class=\"line\">        singleLinkedList.del(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//显示一把</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;删除后的链表&quot;</span>);</span><br><span class=\"line\">        singleLinkedList.list();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义SingleLinkedList 管理我们的英雄</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleLinkedList</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//先初始化一个头节点，头节点不要动，不存放具体数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode head=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加节点到单向链表</span></span><br><span class=\"line\">    <span class=\"comment\">//思路，当不考虑标号顺序时</span></span><br><span class=\"line\">    <span class=\"comment\">//1.找到当前链表的最后节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2.将最后这个节点的 next域 指向新的节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode heroNode)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//因为head节点不能动，因此我们需要一个辅助节点(指针。变量)temp</span></span><br><span class=\"line\">        HeroNode temp=head;</span><br><span class=\"line\">        <span class=\"comment\">//遍历链表，找到最后</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到链表的最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果没有找到，temp后移</span></span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当退出while循环时，temp就指向新的节点</span></span><br><span class=\"line\">        temp.next=heroNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//第二种方式添加英雄时，根据排名将英雄插入到指定位置</span></span><br><span class=\"line\">    <span class=\"comment\">//(如果有这个排名，则添加失败，并给出提示)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addByOrder</span><span class=\"params\">(HeroNode heroNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//因为头节点不能动，因此我们仍然通过一个辅助指针(元素)来帮助找到添加的位置</span></span><br><span class=\"line\">        <span class=\"comment\">//因为单链表，因此我们找的temp 是位于 添加位置的前一个节点，否则插入不了</span></span><br><span class=\"line\">        HeroNode temp=head;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;<span class=\"comment\">//标志添加的编号是否存在，默认为false</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明temp已经在链表的最后</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next.no&gt;heroNode.no)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//位置找到，就在temp的后面插入</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.no==heroNode.no)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明希望添加的heroNode的编号已经存在</span></span><br><span class=\"line\">                flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp=temp.next;<span class=\"comment\">//后移，遍历当前链表</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断flag的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//不能添加，说明编号存在</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;准备插入的英雄编号 %d 已经存在，不能添加\\n&quot;</span>,heroNode.no);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//插入到链表中 temp的后面</span></span><br><span class=\"line\">            heroNode.next=temp.next;</span><br><span class=\"line\">            temp.next=heroNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改节点的信息，根据编号来修改，既no不能修改</span></span><br><span class=\"line\">    <span class=\"comment\">//说明</span></span><br><span class=\"line\">    <span class=\"comment\">//1.根据newheroNode 的 no 来修改即可</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HeroNode newheroNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空~~~~&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//找到需要修改的节点</span></span><br><span class=\"line\">        <span class=\"comment\">//先定义一个辅助变量</span></span><br><span class=\"line\">        HeroNode temp=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;<span class=\"comment\">//表示是否找到该节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;<span class=\"comment\">//已经遍历到链表最后，无该编号节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.no==newheroNode.no)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到了该节点</span></span><br><span class=\"line\">                flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp= temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//根据flag判断是否找到了要修改的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag)&#123;</span><br><span class=\"line\">            temp.name=newheroNode.name;</span><br><span class=\"line\">            temp.nickname=newheroNode.nickname;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//没有找到该节点</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;没有找到编号为 %d 的节点,无法修改该节点\\n&quot;</span>,newheroNode.no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除节点的代码</span></span><br><span class=\"line\">    <span class=\"comment\">//思路</span></span><br><span class=\"line\">    <span class=\"comment\">//1. head 节点不能动，因此我们需要一个temp辅助节点找到待删除节点的前一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2. 说明我们在比较时，时temp.next.no 和需要节点的no 进行比较</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\">        HeroNode temp=head;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;<span class=\"comment\">//标志是否找到待删除的节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next.no==no)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//找到待删除节点的前一个节点</span></span><br><span class=\"line\">                flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp=temp.next;<span class=\"comment\">//temp后移，遍历</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到了 可以删除了</span></span><br><span class=\"line\">            temp.next=temp.next.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;要删除的编号为 %d 的英雄不存在\\n&quot;</span>,no);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示链表[遍历]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断链表是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">        HeroNode temp=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断是否到链表最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//输出节点的信息</span></span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            <span class=\"comment\">//将temp后移，一定要小心</span></span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义HeroNode，每个HeroNode，对象就是一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;<span class=\"comment\">//英雄名字</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;<span class=\"comment\">//昵称</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode next;<span class=\"comment\">//指向下一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no,String name,String nickName)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no=no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname=nickName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了显示方便，我们重写toString</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode&#123;no=&quot;</span> + no +<span class=\"string\">&quot;, name=&quot;</span> + name +<span class=\"string\">&quot;, nickname=&quot;</span> + nickname +<span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单链表的面试题\"><a class=\"markdownIt-Anchor\" href=\"#单链表的面试题\">#</a> 单链表的面试题</h3>\n<h3 id=\"求单链表中有效节点的个数\"><a class=\"markdownIt-Anchor\" href=\"#求单链表中有效节点的个数\">#</a> 求单链表中有效节点的个数</h3>\n<h3 id=\"查找单链表中的倒数第k个节点新浪面试题\"><a class=\"markdownIt-Anchor\" href=\"#查找单链表中的倒数第k个节点新浪面试题\">#</a> 查找单链表中的倒数第 K 个节点【新浪面试题】</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.LinkListText;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedListTestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HeroNode h1=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>,<span class=\"string\">&quot;kono&quot;</span>,<span class=\"string\">&quot;0ne&quot;</span>);</span><br><span class=\"line\">        HeroNode h2=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>,<span class=\"string\">&quot;alphonse&quot;</span>,<span class=\"string\">&quot;two&quot;</span>);</span><br><span class=\"line\">        HeroNode h3=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>,<span class=\"string\">&quot;kino&quot;</span>,<span class=\"string\">&quot;three&quot;</span>);</span><br><span class=\"line\">        HeroNode h4=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>,<span class=\"string\">&quot;mibius&quot;</span>,<span class=\"string\">&quot;four&quot;</span>);</span><br><span class=\"line\">        HeroNode h5=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">5</span>,<span class=\"string\">&quot;Taro&quot;</span>,<span class=\"string\">&quot;five&quot;</span>);</span><br><span class=\"line\">        HeroNode h6=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">6</span>,<span class=\"string\">&quot;Taiga&quot;</span>,<span class=\"string\">&quot;six&quot;</span>);</span><br><span class=\"line\">        LinkedList linkedList=<span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">        linkedList.add(h1);</span><br><span class=\"line\">        linkedList.add(h2);</span><br><span class=\"line\">        linkedList.add(h3);</span><br><span class=\"line\">        linkedList.add(h4);</span><br><span class=\"line\">        linkedList.add(h5);</span><br><span class=\"line\">        linkedList.add(h6);</span><br><span class=\"line\">        linkedList.List();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(LinkedList.getLength(linkedList.getHead()));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(LinkedList.findLastIndexNode(linkedList.getHead(),<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode head=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找单链表中的倒数第k个节点 【新浪面试题】</span></span><br><span class=\"line\">    <span class=\"comment\">//思路</span></span><br><span class=\"line\">    <span class=\"comment\">//1.编写一个方法,接收head节点，同时接收一个index</span></span><br><span class=\"line\">    <span class=\"comment\">//2. index表示是倒数第index个节点</span></span><br><span class=\"line\">    <span class=\"comment\">//3.先把链表从头到尾遍历，得到链表的总的长度getLength</span></span><br><span class=\"line\">    <span class=\"comment\">//4.得到size后，我们从链表的第一个开始遍历(size-index)个，就可以得到</span></span><br><span class=\"line\">    <span class=\"comment\">//5.如果找到了，就返回该节点，否则返回null</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> HeroNode <span class=\"title\">findLastIndexNode</span><span class=\"params\">(HeroNode head,<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> size =getLength(head);</span><br><span class=\"line\">        <span class=\"comment\">//第二次遍历 size-index 位置</span></span><br><span class=\"line\">        <span class=\"comment\">//先做一个index校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index&lt;=<span class=\"number\">0</span>||index&gt;size)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HeroNode cur=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;size-index;i++)&#123;</span><br><span class=\"line\">            cur=cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取单链表中节点个数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> head</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getLength</span><span class=\"params\">(HeroNode head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length=<span class=\"number\">0</span>;</span><br><span class=\"line\">        HeroNode cur=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            length++;</span><br><span class=\"line\">            cur=cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode heroNode)</span></span>&#123;</span><br><span class=\"line\">        HeroNode temp=head;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next.no&gt;heroNode.no)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.no==heroNode.no)&#123;</span><br><span class=\"line\">                flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;准备插入的英雄编号 %d 已经存在，不能添加\\n&quot;</span>,heroNode.no);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            heroNode.next=temp.next;</span><br><span class=\"line\">            temp.next=heroNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">List</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HeroNode temp=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no,String name,String nickname)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no=no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname=nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode&#123;no=&quot;</span> + no +<span class=\"string\">&quot;, name=&quot;</span> + name  +<span class=\"string\">&quot;, nickname=&quot;</span> + nickname + <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单链表的反转-腾讯面试题\"><a class=\"markdownIt-Anchor\" href=\"#单链表的反转-腾讯面试题\">#</a> 单链表的反转 【腾讯面试题】</h3>\n<p>思路分析</p>\n<p><a href=\"https://imgtu.com/i/RwEYXq\"><img src=\"https://z3.ax1x.com/2021/06/29/RwEYXq.png\" alt=\"RwEYXq.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RwEgnx\"><img src=\"https://z3.ax1x.com/2021/06/29/RwEgnx.png\" alt=\"RwEgnx.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.LinkedList04;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedListTestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HeroNode h1=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>,<span class=\"string\">&quot;kono&quot;</span>,<span class=\"string\">&quot;0ne&quot;</span>);</span><br><span class=\"line\">        HeroNode h2=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>,<span class=\"string\">&quot;alphonse&quot;</span>,<span class=\"string\">&quot;two&quot;</span>);</span><br><span class=\"line\">        HeroNode h3=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>,<span class=\"string\">&quot;kino&quot;</span>,<span class=\"string\">&quot;three&quot;</span>);</span><br><span class=\"line\">        HeroNode h4=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>,<span class=\"string\">&quot;mibius&quot;</span>,<span class=\"string\">&quot;four&quot;</span>);</span><br><span class=\"line\">        HeroNode h5=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">5</span>,<span class=\"string\">&quot;Taro&quot;</span>,<span class=\"string\">&quot;five&quot;</span>);</span><br><span class=\"line\">        HeroNode h6=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">6</span>,<span class=\"string\">&quot;Taiga&quot;</span>,<span class=\"string\">&quot;six&quot;</span>);</span><br><span class=\"line\">        LinkedList linkedList=<span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">        linkedList.add(h1);</span><br><span class=\"line\">        linkedList.add(h2);</span><br><span class=\"line\">        linkedList.add(h3);</span><br><span class=\"line\">        linkedList.add(h4);</span><br><span class=\"line\">        linkedList.add(h5);</span><br><span class=\"line\">        linkedList.add(h6);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原链表&quot;</span>);</span><br><span class=\"line\">        linkedList.List();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;反转后的链表&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        reversetList(linkedList.getHead());</span><br><span class=\"line\"></span><br><span class=\"line\">        linkedList.List();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将单链表反转 【腾讯面试题】</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversetList</span><span class=\"params\">(HeroNode head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.如果当前链表为null，或者只有一个节点，则无需反转，直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next==<span class=\"keyword\">null</span> || head.next.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个辅助的指针(变量)，帮助我们遍历原来的链表</span></span><br><span class=\"line\">        HeroNode cur=head.next;</span><br><span class=\"line\">        HeroNode next=<span class=\"keyword\">null</span>;<span class=\"comment\">//指向当前节点【cur】的下一个节点</span></span><br><span class=\"line\">        HeroNode reverseHead=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//遍历原来的链表</span></span><br><span class=\"line\">        <span class=\"comment\">//每遍历一个节点，就将其取出，并放在新的链表reverseHead 的最前端</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            next=cur.next;<span class=\"comment\">//先暂时保存当前节点的下一个节点，因为后面需要使用</span></span><br><span class=\"line\">            cur.next=reverseHead.next;<span class=\"comment\">//将cur的下一个节点指向新的链表的最前端</span></span><br><span class=\"line\">            reverseHead.next=cur;<span class=\"comment\">//将cur 连接到新的链表上</span></span><br><span class=\"line\">            cur=next;<span class=\"comment\">//让cur后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将head.next 指向 reverseHead.next ，实现单链表的反转</span></span><br><span class=\"line\">        head.next=reverseHead.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode head=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode heroNode)</span></span>&#123;</span><br><span class=\"line\">        HeroNode temp=head;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next.no&gt;heroNode.no)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.no==heroNode.no)&#123;</span><br><span class=\"line\">                flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;准备插入的英雄编号 %d 已经存在，不能添加\\n&quot;</span>,heroNode.no);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            heroNode.next=temp.next;</span><br><span class=\"line\">            temp.next=heroNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">List</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HeroNode temp=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no,String name,String nickname)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no=no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname=nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode&#123;no=&quot;</span> + no +<span class=\"string\">&quot;, name=&quot;</span> + name  +<span class=\"string\">&quot;, nickname=&quot;</span> + nickname + <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"从尾到头打印单链表百度面试题\"><a class=\"markdownIt-Anchor\" href=\"#从尾到头打印单链表百度面试题\">#</a> 从尾到头打印单链表【百度面试题】</h3>\n<p>思路</p>\n<ul>\n<li>方式一：先将单链表进行反转操作，然后再遍历即可，<strong>后果</strong>：会破坏原来单链表的结构，<strong>不建议</strong></li>\n<li>方式二：可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的<strong>先进后出</strong>的特点，就能实现逆序打印的效果（代码如下）</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/RwEI9H\"><img src=\"https://z3.ax1x.com/2021/06/29/RwEI9H.png\" alt=\"RwEI9H.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RwEo3d\"><img src=\"https://z3.ax1x.com/2021/06/29/RwEo3d.png\" alt=\"RwEo3d.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.LinkedList05;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedListTestDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HeroNode h1=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>,<span class=\"string\">&quot;kono&quot;</span>,<span class=\"string\">&quot;0ne&quot;</span>);</span><br><span class=\"line\">        HeroNode h2=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">2</span>,<span class=\"string\">&quot;alphonse&quot;</span>,<span class=\"string\">&quot;two&quot;</span>);</span><br><span class=\"line\">        HeroNode h3=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>,<span class=\"string\">&quot;kino&quot;</span>,<span class=\"string\">&quot;three&quot;</span>);</span><br><span class=\"line\">        HeroNode h4=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>,<span class=\"string\">&quot;mibius&quot;</span>,<span class=\"string\">&quot;four&quot;</span>);</span><br><span class=\"line\">        HeroNode h5=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">5</span>,<span class=\"string\">&quot;Taro&quot;</span>,<span class=\"string\">&quot;five&quot;</span>);</span><br><span class=\"line\">        HeroNode h6=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">6</span>,<span class=\"string\">&quot;Taiga&quot;</span>,<span class=\"string\">&quot;six&quot;</span>);</span><br><span class=\"line\">        LinkedList linkedList=<span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">        linkedList.add(h1);</span><br><span class=\"line\">        linkedList.add(h2);</span><br><span class=\"line\">        linkedList.add(h3);</span><br><span class=\"line\">        linkedList.add(h4);</span><br><span class=\"line\">        linkedList.add(h5);</span><br><span class=\"line\">        linkedList.add(h6);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;原链表&quot;</span>);</span><br><span class=\"line\">        linkedList.List();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;逆序打印，没有改变链表的结构&quot;</span>);</span><br><span class=\"line\">        reversePrint(linkedList.getHead());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试链表结构是否被破坏&quot;</span>);</span><br><span class=\"line\">        linkedList.List();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方式二：可以利用栈这个数据结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就能实现逆序打印的效果</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reversePrint</span><span class=\"params\">(HeroNode head)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;<span class=\"comment\">//空链表，不能打印</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建要给一个栈，将各个节点压入栈</span></span><br><span class=\"line\">        Stack&lt;HeroNode&gt; stack=<span class=\"keyword\">new</span> Stack&lt;HeroNode&gt;();</span><br><span class=\"line\">        HeroNode cur=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            stack.push(cur);</span><br><span class=\"line\">            cur=cur.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将链表的所有节点压入栈</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (stack.size()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//stack的特点是先进后出</span></span><br><span class=\"line\">            System.out.println(stack.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LinkedList</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode head=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getHead</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode heroNode)</span></span>&#123;</span><br><span class=\"line\">        HeroNode temp=head;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next.no&gt;heroNode.no)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (temp.next.no==heroNode.no)&#123;</span><br><span class=\"line\">                flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;准备插入的英雄编号 %d 已经存在，不能添加\\n&quot;</span>,heroNode.no);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            heroNode.next=temp.next;</span><br><span class=\"line\">            temp.next=heroNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">List</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HeroNode temp=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no,String name,String nickname)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no=no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name=name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname=nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode&#123;no=&quot;</span> + no +<span class=\"string\">&quot;, name=&quot;</span> + name  +<span class=\"string\">&quot;, nickname=&quot;</span> + nickname + <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"双向链表\"><a class=\"markdownIt-Anchor\" href=\"#双向链表\">#</a> 双向链表</h2>\n<h3 id=\"思路分析\"><a class=\"markdownIt-Anchor\" href=\"#思路分析\">#</a> 思路分析</h3>\n<p><a href=\"https://imgtu.com/i/RweEp4\"><img src=\"https://z3.ax1x.com/2021/06/29/RweEp4.png\" alt=\"RweEp4.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RweikT\"><img src=\"https://z3.ax1x.com/2021/06/29/RweikT.png\" alt=\"RweikT.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/Rweu0x\"><img src=\"https://z3.ax1x.com/2021/06/29/Rweu0x.png\" alt=\"Rweu0x.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/Rwe89e\"><img src=\"https://z3.ax1x.com/2021/06/29/Rwe89e.png\" alt=\"Rwe89e.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RweG1H\"><img src=\"https://z3.ax1x.com/2021/06/29/RweG1H.jpg\" alt=\"RweG1H.jpg\"></a></p>\n<p>对上图的说明:</p>\n<p>分析 双向链表的遍历，添加，修改，删除的操作思路 ===》代码实现</p>\n<ul>\n<li>\n<p>遍历  和 单链表一样，只是可以向前，也可以向后查找</p>\n</li>\n<li>\n<p>添加  (默认添加到双向链表的最后)</p>\n</li>\n</ul>\n<p>(1)  先找到双向链表的最后这个节点</p>\n<p>(2) temp.next = newHeroNode</p>\n<p>(3) newHeroNode.pre = temp;</p>\n<ul>\n<li>\n<p>修改  思路和 原来的单向链表一样.</p>\n</li>\n<li>\n<p>删除</p>\n</li>\n</ul>\n<p>(1)  因为是双向链表，因此，我们可以实现自我删除某个节点</p>\n<p>(2)  直接找到要删除的这个节点，比如 temp</p>\n<p>(3)  temp.pre.next = temp.next</p>\n<p>(4) temp.next.pre = temp.pre;</p>\n<h3 id=\"双向链表的代码实现\"><a class=\"markdownIt-Anchor\" href=\"#双向链表的代码实现\">#</a> 双向链表的代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.DoubleLinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleLinkedListDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HeroNode h1=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">1</span>,<span class=\"string\">&quot;kino&quot;</span>,<span class=\"string\">&quot;one&quot;</span>);</span><br><span class=\"line\">        HeroNode h3=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">3</span>,<span class=\"string\">&quot;kino&quot;</span>,<span class=\"string\">&quot;three&quot;</span>);</span><br><span class=\"line\">        HeroNode h4=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">4</span>,<span class=\"string\">&quot;kino&quot;</span>,<span class=\"string\">&quot;four&quot;</span>);</span><br><span class=\"line\">        HeroNode h5=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">5</span>,<span class=\"string\">&quot;kino&quot;</span>,<span class=\"string\">&quot;five&quot;</span>);</span><br><span class=\"line\">        HeroNode h7=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">7</span>,<span class=\"string\">&quot;kino&quot;</span>,<span class=\"string\">&quot;seven&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        DoubleLinkedList doubleLinkedList=<span class=\"keyword\">new</span> DoubleLinkedList();</span><br><span class=\"line\">        doubleLinkedList.add(h1);</span><br><span class=\"line\">        doubleLinkedList.add(h4);</span><br><span class=\"line\">        doubleLinkedList.add(h3);</span><br><span class=\"line\">        doubleLinkedList.add(h5);</span><br><span class=\"line\">        doubleLinkedList.add(h7);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;双向链表测试&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        doubleLinkedList.list();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;=======================&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HeroNode newHerNode=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">5</span>,<span class=\"string\">&quot;kino00&quot;</span>,<span class=\"string\">&quot;new&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        doubleLinkedList.update(newHerNode);</span><br><span class=\"line\">        <span class=\"comment\">//doubleLinkedList.list();</span></span><br><span class=\"line\">        doubleLinkedList.del(<span class=\"number\">7</span>);</span><br><span class=\"line\">        doubleLinkedList.list();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoubleLinkedList</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//先初始化一个头节点，头节点不要动，不存放具体数据</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HeroNode head=<span class=\"keyword\">new</span> HeroNode(<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回头节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> HeroNode <span class=\"title\">getHead</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历双链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断链表是否为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为null&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">        HeroNode temp=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//输出节点信息</span></span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            <span class=\"comment\">//将temp后移，一定要小心</span></span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加一个节点到双向链表的最后</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HeroNode heroNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">        HeroNode temp=head;</span><br><span class=\"line\">        <span class=\"comment\">//遍历链表，找到最后</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//找到链表最后</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果没有找到最后，temp后移</span></span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当退出while循环时，temp就指向链表的最后</span></span><br><span class=\"line\">        <span class=\"comment\">//形成双向链表</span></span><br><span class=\"line\">        temp.next=heroNode;</span><br><span class=\"line\">        heroNode.pre=temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改一个节点的内容</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HeroNode newHeroNode)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">        HeroNode temp=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;<span class=\"comment\">//已经遍历完链表</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.no==newHeroNode.no)&#123;</span><br><span class=\"line\">                flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp=temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            temp.name=newHeroNode.name;</span><br><span class=\"line\">            temp.nickname=newHeroNode.nickname;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;没找到编号为%d的节点，不能修改\\n&quot;</span>,newHeroNode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从双向链表中删除一个节点</span></span><br><span class=\"line\">    <span class=\"comment\">//1.对于双向链表，可以直接找到删除节点</span></span><br><span class=\"line\">    <span class=\"comment\">//2.找到后直接删除即可</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断当前链表是否为空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head.next==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为null，无法删除&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为头节点，不能动，因此我们需要一个辅助变量来遍历</span></span><br><span class=\"line\">        HeroNode temp=head.next;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为null&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;<span class=\"comment\">//已经找到链表最后一个节点的下一个节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.no==no)&#123;</span><br><span class=\"line\">                flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp=temp.next;<span class=\"comment\">//temo后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">            temp.pre.next=temp.next;</span><br><span class=\"line\">            <span class=\"comment\">//如果是最后一个节点，就不需要执行下面这句话，否则出现空指针异常</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp.next!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                temp.next.pre = temp.pre;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//双链表按照编号循序添加</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroNode</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> no;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String nickname;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode next;<span class=\"comment\">//指向下一个节点，默认为null</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HeroNode pre;<span class=\"comment\">//指向前一个节点，默认为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HeroNode</span><span class=\"params\">(<span class=\"keyword\">int</span> no, String name, String nickname)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.nickname = nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了显示方便，我们重写toString</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;HeroNode&#123;no=&quot;</span> + no +<span class=\"string\">&quot;, name=&quot;</span> + name +<span class=\"string\">&quot;, nickname=&quot;</span> + nickname +<span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"单向环形链表\"><a class=\"markdownIt-Anchor\" href=\"#单向环形链表\">#</a> 单向环形链表</h3>\n<h4 id=\"单向环形链表介绍\"><a class=\"markdownIt-Anchor\" href=\"#单向环形链表介绍\">#</a> 单向环形链表介绍</h4>\n<p><a href=\"https://imgtu.com/i/RweJcd\"><img src=\"https://z3.ax1x.com/2021/06/29/RweJcd.png\" alt=\"RweJcd.png\"></a></p>\n<h4 id=\"josephu约瑟夫问题\"><a class=\"markdownIt-Anchor\" href=\"#josephu约瑟夫问题\">#</a> Josephu (约瑟夫) 问题</h4>\n<p>Ø<strong>Josephu</strong> <strong>问题</strong></p>\n<p>Josephu 问题为：设编号为 1，2，… n 的 n 个人围坐一圈，约定编号为 k（1&lt;=k&lt;=n）的人从 1 开始报数，数到 m 的那个人出列，它的下一位又从 1 开始报数，数到 m 的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p>\n<p>Ø<strong> 提示</strong></p>\n<p>用一个不带头结点的循环链表来处理 Josephu 问题：先构成一个有 n 个结点的单循环链表，然后由 k 结点起从 1 开始计数，计到 m 时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从 1 开始计数，直到最后一个结点从链表中删除算法结束。</p>\n<p><a href=\"https://imgtu.com/i/RweUBt\"><img src=\"https://z3.ax1x.com/2021/06/29/RweUBt.png\" alt=\"RweUBt.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RwewAf\"><img src=\"https://z3.ax1x.com/2021/06/29/RwewAf.png\" alt=\"RwewAf.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/Rwer9g\"><img src=\"https://z3.ax1x.com/2021/06/29/Rwer9g.png\" alt=\"Rwer9g.png\"></a></p>\n<h4 id=\"代码展示\"><a class=\"markdownIt-Anchor\" href=\"#代码展示\">#</a> 代码展示</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.Josepfu;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Josepfu</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试一把，看是否构建环形链表 ，和是否能遍历</span></span><br><span class=\"line\">        CircleSingleLinkedList circleSingleLinkedList = <span class=\"keyword\">new</span> CircleSingleLinkedList();</span><br><span class=\"line\">        circleSingleLinkedList.addBoy(<span class=\"number\">5</span>);<span class=\"comment\">//加入5个小孩节点</span></span><br><span class=\"line\">        circleSingleLinkedList.showBoy();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试小孩出圈</span></span><br><span class=\"line\">        circleSingleLinkedList.countBoy(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个环形的单向链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleSingleLinkedList</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个first节点，当前没有编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boy first = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加小孩节点，构建一个环形的链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBoy</span><span class=\"params\">(<span class=\"keyword\">int</span> nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//nums 做一个数据校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;nums的值不正确&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//辅助节点，帮助构建环形链表</span></span><br><span class=\"line\">        Boy curBoy = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//使用for来创建环形链表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= nums; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据标号，创建小孩节点</span></span><br><span class=\"line\">            Boy boy = <span class=\"keyword\">new</span> Boy(i);</span><br><span class=\"line\">            <span class=\"comment\">//如果是第一个小孩</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                first = boy;</span><br><span class=\"line\">                first.setNext(first);<span class=\"comment\">//构成环</span></span><br><span class=\"line\">                curBoy = first;<span class=\"comment\">//让curBoy指向第一个小孩</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                curBoy.setNext(boy);</span><br><span class=\"line\">                boy.setNext(first);</span><br><span class=\"line\">                curBoy = boy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//遍历当前的环形链表</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showBoy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断链表是否为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;链表为null&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为first不能动，使用一个辅助指针完成遍历</span></span><br><span class=\"line\">        Boy curBoy = first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;小孩的编号%d \\n&quot;</span>, curBoy.getNo());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curBoy.getNext() == first) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明已经遍历完毕</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curBoy = curBoy.getNext();<span class=\"comment\">//curBoy后移</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据用户的输入，计算出小孩出圈的顺序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> startNo  表示第几个小孩开始数数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> countNum 表示数几下</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> nums     表示最初有几个消灾在圈中</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">countBoy</span><span class=\"params\">(<span class=\"keyword\">int</span> startNo, <span class=\"keyword\">int</span> countNum, <span class=\"keyword\">int</span> nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先对数据进行校验</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span> || startNo &lt; <span class=\"number\">1</span> || startNo &gt; nums) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;参数输入有误，请重新输入&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//创建要给辅助指针，帮助完成小孩出圈</span></span><br><span class=\"line\">        Boy helper = first;</span><br><span class=\"line\">        <span class=\"comment\">//要求创建一个辅助指针（helper），事先应该指向环形链表的最后这个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper.getNext() == first) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明helper指向最后小孩节点</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//小孩报数前，先让first 和 helper 移动 k-1 次（移动到k的身上）</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; startNo - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当小孩报数时，让first 和 helper 指针同时的移动m-1次，然后出圈</span></span><br><span class=\"line\">        <span class=\"comment\">//这里是一个循环操作，直到圈中只有一个节点</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper == first) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明圈中只有一个节点</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//让first 和helper 指针同时的移动countNum-1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; countNum - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                first = first.getNext();</span><br><span class=\"line\">                helper = helper.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//此时first指向的节点，就是要出圈的小孩节点</span></span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;小孩%d出圈\\n&quot;</span>, first.getNo());</span><br><span class=\"line\">            <span class=\"comment\">//这时将first指向的小孩节点出圈</span></span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper.setNext(first);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;最后留在圈中的小孩编号%d\\n&quot;</span>, first.getNo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个Boy类，表示一个节点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> no;<span class=\"comment\">//编号</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boy next;<span class=\"comment\">//指向下一个节点，默认null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boy</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNo</span><span class=\"params\">(<span class=\"keyword\">int</span> no)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Boy <span class=\"title\">getNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(Boy next)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法与数据结构",
                "单链表",
                "双链表"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/06/30/01.%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/",
            "url": "https://alphonse-kino.github.io/2021/06/30/01.%E7%AE%97%E6%B3%95%E7%AE%80%E4%BB%8B/",
            "title": "算法简介",
            "date_published": "2021-06-30T03:56:20.046Z",
            "content_html": "<p><a href=\"https://imgtu.com/i/RUGLZ9\"><img src=\"https://z3.ax1x.com/2021/06/28/RUGLZ9.png\" alt=\"RUGLZ9.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RUGOaR\"><img src=\"https://z3.ax1x.com/2021/06/28/RUGOaR.png\" alt=\"RUGOaR.png\"></a></p>\n",
            "tags": [
                "算法与数据结构"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/06/30/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%B3%E7%B3%BB/",
            "url": "https://alphonse-kino.github.io/2021/06/30/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%B3%E7%B3%BB/",
            "title": "数据结构与算法的关系",
            "date_published": "2021-06-30T03:56:20.044Z",
            "content_html": "<p><a href=\"https://imgtu.com/i/RUJJJ0\"><img src=\"https://z3.ax1x.com/2021/06/28/RUJJJ0.png\" alt=\"RUJJJ0.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RUJYWV\"><img src=\"https://z3.ax1x.com/2021/06/28/RUJYWV.png\" alt=\"RUJYWV.png\"></a></p>\n",
            "tags": [
                "算法与数据结构",
                "线性结构与非线性结构"
            ]
        },
        {
            "id": "https://alphonse-kino.github.io/2021/06/30/03.%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E5%92%8C%E9%98%9F%E5%88%97/",
            "url": "https://alphonse-kino.github.io/2021/06/30/03.%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E5%92%8C%E9%98%9F%E5%88%97/",
            "title": "稀疏数组与队列",
            "date_published": "2021-06-30T03:56:20.042Z",
            "content_html": "<h2 id=\"稀疏数组\"><a class=\"markdownIt-Anchor\" href=\"#稀疏数组\">#</a> 稀疏数组</h2>\n<p><a href=\"https://imgtu.com/i/RwkEUe\"><img src=\"https://z3.ax1x.com/2021/06/29/RwkEUe.png\" alt=\"RwkEUe.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RwkAED\"><img src=\"https://z3.ax1x.com/2021/06/29/RwkAED.png\" alt=\"RwkAED.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SparceArray</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个原始的二维数组</span></span><br><span class=\"line\">        <span class=\"comment\">//0:表示没有旗子，1表示黑子 2表示黑子</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> chessArr1[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"number\">11</span>][<span class=\"number\">11</span>];</span><br><span class=\"line\">        chessArr1[<span class=\"number\">1</span>][<span class=\"number\">2</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        chessArr1[<span class=\"number\">2</span>][<span class=\"number\">3</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"comment\">//输出原始的二维数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] row:chessArr1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> data:row)&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%d\\t&quot;</span>, data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将二维数组 转稀疏数组 的思想</span></span><br><span class=\"line\">        <span class=\"comment\">//1.先遍历二维数组 得到非0数据的个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">11</span>;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(chessArr1[i][j]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    sum++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//2.创建对应的稀疏数组</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> sparseArr[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [sum+<span class=\"number\">1</span>][<span class=\"number\">3</span>];</span><br><span class=\"line\">        <span class=\"comment\">//给稀疏数组赋值</span></span><br><span class=\"line\">        sparseArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"number\">11</span>;</span><br><span class=\"line\">        sparseArr[<span class=\"number\">0</span>][<span class=\"number\">1</span>]=<span class=\"number\">11</span>;</span><br><span class=\"line\">        sparseArr[<span class=\"number\">0</span>][<span class=\"number\">2</span>]=sum;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历二维数组，将非0的值存放到sparseArr中</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;<span class=\"comment\">//count 用于记录是第几个非0数据</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">11</span>;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">11</span>;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(chessArr1[i][j]!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                    sparseArr[count][<span class=\"number\">0</span>]=i;</span><br><span class=\"line\">                    sparseArr[count][<span class=\"number\">1</span>]=j;</span><br><span class=\"line\">                    sparseArr[count][<span class=\"number\">2</span>]=chessArr1[i][j];</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//输出稀疏数组的形式</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;得到的稀疏数组为~~~~~~&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;sparseArr.length;i++)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;%d\\t%d\\t%d\\t\\n&quot;</span>,sparseArr[i][<span class=\"number\">0</span>],sparseArr[i][<span class=\"number\">1</span>],sparseArr[i][<span class=\"number\">2</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"comment\">//将稀疏数组恢复成二维数组</span></span><br><span class=\"line\">        <span class=\"comment\">//1.先读取稀疏数组的第一行</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> chessArr2[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [sparseArr[<span class=\"number\">0</span>][<span class=\"number\">0</span>]][sparseArr[<span class=\"number\">0</span>][<span class=\"number\">1</span>]];</span><br><span class=\"line\">        <span class=\"comment\">//2.读取稀疏数组后几行数据（第二行开始），赋值给二维数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;sparseArr.length;i++)&#123;</span><br><span class=\"line\">            chessArr2[sparseArr[i][<span class=\"number\">0</span>]][sparseArr[i][<span class=\"number\">1</span>]]=sparseArr[i][<span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//恢复后的二维数组</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;恢复后的二维数组&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] row:chessArr2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> data:row)&#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">&quot;%d\\t&quot;</span>,data);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"队列\"><a class=\"markdownIt-Anchor\" href=\"#队列\">#</a> 队列</h2>\n<p><strong>介绍</strong></p>\n<ol>\n<li>\n<p>队列是一个有序列表，可以用数组或是链表来实现</p>\n</li>\n<li>\n<p>遵循先入先出的原则</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/RwkPu6\"><img src=\"https://z3.ax1x.com/2021/06/29/RwkPu6.png\" alt=\"RwkPu6.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/RwkiDK\"><img src=\"https://z3.ax1x.com/2021/06/29/RwkiDK.png\" alt=\"RwkiDK.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueueDemo</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试一把</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个队列</span></span><br><span class=\"line\">        ArrayQueue arrayQueue = <span class=\"keyword\">new</span> ArrayQueue(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> key=<span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> loop=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//输出一个菜单</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(loop)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;s(show):显示队列&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;e(exit):退出程序&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;g(get):从队列取出数据&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;h(head):查看队列头数据&quot;</span>);</span><br><span class=\"line\">            key=scanner.next().charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (key)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;s&#x27;</span>:<span class=\"comment\">//显示队列</span></span><br><span class=\"line\">                    arrayQueue.showQueue();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;e&#x27;</span>:<span class=\"comment\">//退出程序</span></span><br><span class=\"line\">                    scanner.close();</span><br><span class=\"line\">                    loop=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>:<span class=\"comment\">//添加数据到队列</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;请输入一个数&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">                    arrayQueue.addQueue(value);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;g&#x27;</span>:<span class=\"comment\">//从队列取出数据</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> queue = arrayQueue.getQueue();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;取出的数据是%d\\n&quot;</span>,queue);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        System.out.println(e.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;h&#x27;</span>:<span class=\"comment\">//查看队列头数据</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> i = arrayQueue.headQueue();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;队列头的数据是%d\\n&quot;</span>,i);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        System.out.println(e.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;请输出正确信息&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序退出&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用数组模拟队列-编写一个人ArrayQueue类</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//表示数组的最大容量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front;<span class=\"comment\">//队列头</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear;<span class=\"comment\">//队列尾</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">//该数组用于存放数据，模拟队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建队列的构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class=\"line\">        maxSize = arrMaxSize;</span><br><span class=\"line\">        arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">        front = -<span class=\"number\">1</span>;<span class=\"comment\">//指向队列头部，分析出front是指向队列头的前一个位置</span></span><br><span class=\"line\">        rear = -<span class=\"number\">1</span>;<span class=\"comment\">//指向队列尾部，指向队列尾的数据【既就是队列最后一个数据】</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断队列是否满</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rear == maxSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rear == front;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加数据到队列</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFull())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队列满，无法在添加数据&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rear++;<span class=\"comment\">//rear后移</span></span><br><span class=\"line\">        arr[rear]=n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取队列的数据，出队列</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断队列是否空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"comment\">//抛出异常处理</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列为空,不能取数据&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        front++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[front];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示队列的所有数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队列为空，无数据&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;arr[%d]=%d\\n&quot;</span>,i,arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示队列的头数据，注意不是取出数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">headQueue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列为空,无数据&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[front+<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgtu.com/i/RwkFHO\"><img src=\"https://z3.ax1x.com/2021/06/29/RwkFHO.png\" alt=\"RwkFHO.png\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleArrayQueue</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试一把</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试数组模拟环形队列的案例~~~~~&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//说明：设置4，其队列最大有效数个数为3</span></span><br><span class=\"line\">        CircleArray circleArray = <span class=\"keyword\">new</span> CircleArray(<span class=\"number\">4</span>);</span><br><span class=\"line\">        <span class=\"keyword\">char</span> key = <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> loop = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//输出一个菜单</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loop) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;s(show):显示队列&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;e(exit):退出程序&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;a(add):添加数据到队列&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;g(get):从队列取出数据&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;h(head):查看队列头数据&quot;</span>);</span><br><span class=\"line\">            key = scanner.next().charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;s&#x27;</span>:<span class=\"comment\">//显示队列</span></span><br><span class=\"line\">                    circleArray.showQueue();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;e&#x27;</span>:<span class=\"comment\">//退出程序</span></span><br><span class=\"line\">                    scanner.close();</span><br><span class=\"line\">                    loop = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>:<span class=\"comment\">//添加数据到队列</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;请输入一个数&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> value = scanner.nextInt();</span><br><span class=\"line\">                    circleArray.addQueue(value);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;g&#x27;</span>:<span class=\"comment\">//从队列取出数据</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> queue = circleArray.getQueue();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;取出的数据是%d\\n&quot;</span>, queue);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        System.out.println(e.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&#x27;h&#x27;</span>:<span class=\"comment\">//查看队列头数据</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> i = circleArray.headQueue();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;队列头的数据是%d\\n&quot;</span>, i);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        System.out.println(e.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;请输出正确信息&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序退出&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleArray</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//表示数组的最大容量</span></span><br><span class=\"line\">    <span class=\"comment\">//front 变量的含义做一个调整：front 就指向队列的第一个元素，也就是说arr[front]就是队列的第一个元素</span></span><br><span class=\"line\">    <span class=\"comment\">//front 的初始值 = 0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> front;<span class=\"comment\">//队列头</span></span><br><span class=\"line\">    <span class=\"comment\">//rear 变量的含义做一个调整：rear 就指向队列的最后一个元素的后一个位置，希望空出一个空间作为约定</span></span><br><span class=\"line\">    <span class=\"comment\">//rear 的初始值 = 0</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> rear;<span class=\"comment\">//队列尾</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] arr;<span class=\"comment\">//该数组用于存放数据，模拟队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleArray</span><span class=\"params\">(<span class=\"keyword\">int</span> arrMaxSize)</span> </span>&#123;</span><br><span class=\"line\">        maxSize = arrMaxSize;</span><br><span class=\"line\">        arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">        <span class=\"comment\">//front 和 rear 初始值为0 可以不写</span></span><br><span class=\"line\">        <span class=\"comment\">//front = 0;</span></span><br><span class=\"line\">        <span class=\"comment\">//rear = 0;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断队列是否满</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (rear + <span class=\"number\">1</span>) % maxSize == front;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断队列是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rear == front;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加数据到队列</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addQueue</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队列满，无法在添加数据&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为rear本身就指向队列的最后一个元素的后一个元素，所以直接将数据加入</span></span><br><span class=\"line\">        arr[rear] = n;</span><br><span class=\"line\">        <span class=\"comment\">//将rear后移，这里必须考虑取模</span></span><br><span class=\"line\">        rear = (rear + <span class=\"number\">1</span>) % maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//获取队列的数据，出队列</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断队列是否空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//抛出异常处理</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列为空,不能取数据&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为front本身就指向队列的第一个元素</span></span><br><span class=\"line\">        <span class=\"comment\">//1.先把front对应的值保留到一个临时变量</span></span><br><span class=\"line\">        <span class=\"comment\">//2.将front后移   考虑取模</span></span><br><span class=\"line\">        <span class=\"comment\">//3.将零食保存的变量返回</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> value = arr[front];</span><br><span class=\"line\">        front = (front + <span class=\"number\">1</span>) % maxSize;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示队列的所有数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;队列为空，无数据&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//思路：从front开始遍历，遍历多少个元素</span></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = front; i &lt; front + size(); i++) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;arr[%d]=%d\\n&quot;</span>, i % maxSize, arr[i % maxSize]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//求出当前队列有多少个有效数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//rear  =  2</span></span><br><span class=\"line\">        <span class=\"comment\">//front  =  1</span></span><br><span class=\"line\">        <span class=\"comment\">//maxSize  =  3</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (rear + maxSize - front) % maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示队列的头数据，注意不是取出数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">headQueue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;队列为空,无数据&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为front本身就指向队列的第一个元素</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[front];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法与数据结构",
                "稀疏数组",
                "队列"
            ]
        }
    ]
}