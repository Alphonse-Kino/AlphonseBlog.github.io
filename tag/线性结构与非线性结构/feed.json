{
    "version": "https://jsonfeed.org/version/1",
    "title": "品一份静谧人生 • All posts by \"线性结构与非线性结构\" tag",
    "description": "",
    "home_page_url": "https://alphonse-Kino.github.io",
    "items": [
        {
            "id": "https://alphonse-kino.github.io/2022/03/15/02%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%B3%E7%B3%BB/",
            "url": "https://alphonse-kino.github.io/2022/03/15/02%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E7%9A%84%E5%85%B3%E7%B3%BB/",
            "title": "02、数据结构与算法的关系",
            "date_published": "2022-03-15T14:08:27.172Z",
            "content_html": "<h1 id=\"简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#简单介绍\">#</a> 简单介绍</h1>\n<ul>\n<li>\n<p>1、算法是程序的灵魂，优秀的程序可以在海量数据计算时，依然保持高速计算</p>\n</li>\n<li>\n<p>2、一般来讲程序会使用了内存计算框架 (比如 Spark) 和缓存技术 (比如 Redis 等) 来优化程序，再深入的思考一下，这些计算框架和缓存技术，它的核心功能是哪个部分呢？</p>\n</li>\n<li>\n<p>3、拿实际工作经历来说，在 Unix 下开发服务器程序，功能是要支持上千万人同时在线，在上线前，做内测，一切 OK, 可上线后，服务器就支撑不住了，公司的 CTO 对代码进行优化，再次上线，坚如磐石。你就能感受到程序是有灵魂的，就是算法。</p>\n</li>\n<li>\n<p>4、目前程序员面试的门槛越来越高，很多一线 IT 公司 (大厂)，都会有数据结构和算法面试题 (负责的告诉你，肯定有的)</p>\n</li>\n<li>\n<p>5、如果你不想永远都是代码工人，那就花时间来研究下数据结构和算法</p>\n</li>\n</ul>\n<h1 id=\"数据结构和算法的关系\"><a class=\"markdownIt-Anchor\" href=\"#数据结构和算法的关系\">#</a> 数据结构和算法的关系</h1>\n<ul>\n<li>1、数据 data 结构 (structure) 是一门研究组织数据方式的学科，有了编程语言也就有了数据结构。学好数据结构可以<br>\n编写出更加漂亮，更加有效率的代码。</li>\n<li>2、要学习好数据结构就要多多考虑如何将生活中遇到的问题，用程序去实现解决.</li>\n<li>3、程序 = 数据结构＋算法</li>\n<li>4、数据结构是算法的基础，换言之，想要学好算法，需要把数据结构学到位。</li>\n</ul>\n<h1 id=\"线性结构和非线性结构\"><a class=\"markdownIt-Anchor\" href=\"#线性结构和非线性结构\">#</a> 线性结构和非线性结构</h1>\n<p>数据结构包括：线性结构和非线性结构。<br>\n1、线性结构</p>\n<ul>\n<li>1、线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系</li>\n<li>2、线性结构有两种不同的存储结构，即顺序存储结构 (数组) 和链式存储结构 (链表)。顺序存储的线性表称为顺序表，顺序表中的存储元素是连续的</li>\n<li>3、链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放数据元素以及相邻元素的地址信息</li>\n<li>4、线性结构常见的有：数组、队列、链表和栈，后面我们会详细讲解.</li>\n</ul>\n<p>2、非线性结构</p>\n<ul>\n<li>非线性结构包括：二维数组，多维数组，广义表，树结构，图结构</li>\n</ul>\n",
            "tags": [
                "线性结构与非线性结构"
            ]
        }
    ]
}