{
    "version": "https://jsonfeed.org/version/1",
    "title": "品一份静谧人生 • All posts by \"(后缀表达式)逆波兰表达式\" tag",
    "description": "",
    "home_page_url": "https://alphonse-Kino.github.io",
    "items": [
        {
            "id": "https://alphonse-kino.github.io/2022/03/15/05%E3%80%81%E6%A0%88Stack/",
            "url": "https://alphonse-kino.github.io/2022/03/15/05%E3%80%81%E6%A0%88Stack/",
            "title": "05、栈",
            "date_published": "2022-03-15T14:08:27.178Z",
            "content_html": "<h2 id=\"栈stack\"><a class=\"markdownIt-Anchor\" href=\"#栈stack\">#</a> 栈 Stack</h2>\n<h2 id=\"栈的简介\"><a class=\"markdownIt-Anchor\" href=\"#栈的简介\">#</a> 栈的简介</h2>\n<ol>\n<li>\n<p>栈的英文为 (stack)</p>\n</li>\n<li>\n<p>栈是一个<strong>先入后出</strong> (FILO-First In Last Out) 的有序列表。</p>\n</li>\n<li>\n<p>栈 (stack) 是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为<strong>栈顶</strong> (Top)，另一端为固定的一端，称为<strong>栈底</strong> (Bottom)。</p>\n</li>\n<li>\n<p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p>\n</li>\n</ol>\n<h2 id=\"出栈pop和入栈pus图显\"><a class=\"markdownIt-Anchor\" href=\"#出栈pop和入栈pus图显\">#</a> 出栈 (pop) 和入栈 (pus)（图显）</h2>\n<p><a href=\"https://imgtu.com/i/R7AXrQ\"><img src=\"https://z3.ax1x.com/2021/07/06/R7AXrQ.png\" alt=\"R7AXrQ.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7E9P0\"><img src=\"https://z3.ax1x.com/2021/07/06/R7E9P0.png\" alt=\"R7E9P0.png\"></a></p>\n<h2 id=\"栈的应用场景\"><a class=\"markdownIt-Anchor\" href=\"#栈的应用场景\">#</a> 栈的应用场景</h2>\n<ol>\n<li>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。</li>\n<li>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</li>\n<li>表达式的转换 [中缀表达式转后缀表达式] 与求值 (实际解决)。</li>\n<li>二叉树的遍历。</li>\n<li>图形的深度优先 (depth 一 first) 搜索法。</li>\n</ol>\n<h2 id=\"栈的快速入门\"><a class=\"markdownIt-Anchor\" href=\"#栈的快速入门\">#</a> 栈的快速入门</h2>\n<p><a href=\"https://imgtu.com/i/R7EkMF\"><img src=\"https://z3.ax1x.com/2021/07/06/R7EkMF.png\" alt=\"R7EkMF.png\"></a></p>\n<h3 id=\"代码展示数组模拟栈\"><a class=\"markdownIt-Anchor\" href=\"#代码展示数组模拟栈\">#</a> 代码展示（数组模拟栈）</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"><span class=\"comment\">//测试ArrayStack是否正确</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个ArrayStack对象表示  栈</span></span><br><span class=\"line\">        ArrayStack stack = <span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">4</span>);</span><br><span class=\"line\">        String key=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> loop=<span class=\"keyword\">true</span>;<span class=\"comment\">//控制是否退出菜单</span></span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (loop)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;show：表示显示栈&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;exit：表示显示栈&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;push：表示添加数据到栈（入栈）&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;pop：表示从栈中取出数据（出栈）&quot;</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;请输出你的选择&quot;</span>);</span><br><span class=\"line\">            key=scanner.next();</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (key)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;show&quot;</span>:</span><br><span class=\"line\">                    stack.list();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;exit&quot;</span>:</span><br><span class=\"line\">                    scanner.close();</span><br><span class=\"line\">                    loop=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;push&quot;</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;请输入一个数&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> value=scanner.nextInt();</span><br><span class=\"line\">                    stack.push(value);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">&quot;pop&quot;</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> res=stack.pop();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">&quot;出栈的数据是%d\\n&quot;</span>,res);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                        System.out.println(e.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序退出&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义一个ArrayStack 表示栈</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//栈的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack;<span class=\"comment\">//数组、数组模拟栈，数据就放在该数组里</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top=-<span class=\"number\">1</span>;<span class=\"comment\">//top表示栈顶，初始值为-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">        stack=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//栈满</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==maxSize-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//栈空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断是否栈满</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFull())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        top++;</span><br><span class=\"line\">        stack[top]=value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//出栈-pop,将栈顶的数据返回</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断是否null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value=stack[top];</span><br><span class=\"line\">        top--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示栈（遍历栈）</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历是，需要从栈顶开始显示</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否栈空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;栈空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=top;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>,i,stack[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码展示链表模拟栈练习\"><a class=\"markdownIt-Anchor\" href=\"#代码展示链表模拟栈练习\">#</a> 代码展示（链表模拟栈）练习</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"栈实现综合计算器中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#栈实现综合计算器中缀表达式\">#</a> 栈实现综合计算器 (中缀表达式)</h3>\n<h4 id=\"思路分析图解\"><a class=\"markdownIt-Anchor\" href=\"#思路分析图解\">#</a> 思路分析 (图解)</h4>\n<p><a href=\"https://imgtu.com/i/R7EMRK\"><img src=\"https://z3.ax1x.com/2021/07/06/R7EMRK.png\" alt=\"R7EMRK.png\"></a></p>\n<h4 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h4>\n<p>先实现一位数运算，后实现多位数运算</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Calculator</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//完成表达式的运算</span></span><br><span class=\"line\">        String expression=<span class=\"string\">&quot;300+2*6-2&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//创建两个栈，数栈，符号栈</span></span><br><span class=\"line\">        ArrayStack numStack=<span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">10</span>);</span><br><span class=\"line\">        ArrayStack operStack=<span class=\"keyword\">new</span> ArrayStack(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">//定义相关变量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index=<span class=\"number\">0</span>;<span class=\"comment\">//用于扫描</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> num1=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> num2=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> oper=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch=<span class=\"string\">&#x27; &#x27;</span>;<span class=\"comment\">//将每次扫描得到的char保存到ch中</span></span><br><span class=\"line\">        String keepNum=<span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//用于拼接多位数</span></span><br><span class=\"line\">        <span class=\"comment\">//开始while循环的扫描expression</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//依次得到expression 的每一个字符</span></span><br><span class=\"line\">            ch=expression.substring(index,index+<span class=\"number\">1</span>).charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">//判断ch是什么，然后做相应的处理</span></span><br><span class=\"line\">            <span class=\"comment\">//如果是运算符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(operStack.isOper(ch))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果是运算符；判断当前的符号栈是否为null</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!operStack.isEmpty())&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果符号栈有操作符，就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符，</span></span><br><span class=\"line\">                    <span class=\"comment\">// 就需要从数栈中pop出两个数,在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(operStack.priority(ch)&lt;=operStack.priority(operStack.peek()))&#123;</span><br><span class=\"line\">                        num1=numStack.pop();</span><br><span class=\"line\">                        num2=numStack.pop();</span><br><span class=\"line\">                        oper=operStack.pop();</span><br><span class=\"line\">                        res=numStack.cal(num1,num2,oper);</span><br><span class=\"line\">                        <span class=\"comment\">//把运算符的结果入数栈</span></span><br><span class=\"line\">                        numStack.push(res);</span><br><span class=\"line\">                        <span class=\"comment\">//然后将当前的操作符入符号栈</span></span><br><span class=\"line\">                        operStack.push(ch);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果当前的操作符的优先级大于栈中的操作符</span></span><br><span class=\"line\">                        operStack.push(ch);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果为null，直接入栈</span></span><br><span class=\"line\">                    operStack.push(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;<span class=\"comment\">//如果是数字，则直接入数栈</span></span><br><span class=\"line\">                <span class=\"comment\">//numStack.push(ch-48);//? &quot;1+3&quot; &#x27;1&#x27; != 1</span></span><br><span class=\"line\">                <span class=\"comment\">//分析思路</span></span><br><span class=\"line\">                <span class=\"comment\">//1.当处理多位数时，不能发现是一个数就立即入栈，因为他可能是多位数</span></span><br><span class=\"line\">                <span class=\"comment\">//2.在处理数时，需要向expression的表达式的index，后看一位，如果是数就进行扫描，如果是符号才入栈</span></span><br><span class=\"line\">                <span class=\"comment\">//3.因此需要定义一个变量（字符串），用于拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//处理多位数</span></span><br><span class=\"line\">                keepNum +=ch;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//如果ch已经是expression的最后一位，就直接入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index==expression.length()-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    numStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//判断下一个字符是不是数字，如果是数字，就继续扫描，如果是运算符，则入栈</span></span><br><span class=\"line\">                    <span class=\"comment\">//注意是看后一位，不是index++</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(operStack.isOper(expression.substring(index+<span class=\"number\">1</span>,index+<span class=\"number\">2</span>).charAt(<span class=\"number\">0</span>)))&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果后一位是运算符，则入栈keepNum=&quot;1&quot;或者&quot;123&quot;</span></span><br><span class=\"line\">                        numStack.push(Integer.parseInt(keepNum));</span><br><span class=\"line\">                        <span class=\"comment\">//重要的！！！ ,清空keepNUm</span></span><br><span class=\"line\">                        keepNum=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//让index+1，并判断是否扫描到expression最后</span></span><br><span class=\"line\">            index++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(index&gt;=expression.length())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当表达式扫描完毕，按顺序的从 数栈和符号栈中pop出相应的数和符号，并运行</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(operStack.isEmpty())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            num1=numStack.pop();</span><br><span class=\"line\">            num2=numStack.pop();</span><br><span class=\"line\">            oper=operStack.pop();</span><br><span class=\"line\">            res=numStack.cal(num1,num2,oper);</span><br><span class=\"line\">            <span class=\"comment\">//把运算符的结果入数栈</span></span><br><span class=\"line\">            numStack.push(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将数栈的最后数，pop出，就是结果</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res2=numStack.pop();</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;表达式%s=%d&quot;</span>,expression,res2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//先创建一个栈，直接使用前面创建好的</span></span><br><span class=\"line\"><span class=\"comment\">//定义一个ArrayStack 表示栈,需要扩展功能</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayStack</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> maxSize;<span class=\"comment\">//栈的大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] stack;<span class=\"comment\">//数组、数组模拟栈，数据就放在该数组里</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> top=-<span class=\"number\">1</span>;<span class=\"comment\">//top表示栈顶，初始值为-1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayStack</span><span class=\"params\">(<span class=\"keyword\">int</span> maxSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maxSize = maxSize;</span><br><span class=\"line\">        stack=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [<span class=\"keyword\">this</span>.maxSize];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加一个方法，可以返回当前栈顶的值，但是不是真正的pop</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">peek</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack[top];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//栈满</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isFull</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==maxSize-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//栈空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> top==-<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//入栈-push</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断是否栈满</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isFull())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;栈满&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        top++;</span><br><span class=\"line\">        stack[top]=value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//出栈-pop,将栈顶的数据返回</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先判断是否null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;栈空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> value=stack[top];</span><br><span class=\"line\">        top--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示栈（遍历栈）</span></span><br><span class=\"line\">    <span class=\"comment\">//遍历是，需要从栈顶开始显示数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">list</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否栈空</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isEmpty())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;栈空&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=top;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">&quot;stack[%d]=%d\\n&quot;</span>,i,stack[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回运算符的优先级，优先级是程序员未确定，优先级用数字表示</span></span><br><span class=\"line\">    <span class=\"comment\">//数字越大，则优先级越高</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">priority</span><span class=\"params\">(<span class=\"keyword\">int</span> oper)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(oper == <span class=\"string\">&#x27;*&#x27;</span>|| oper==<span class=\"string\">&#x27;/&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(oper == <span class=\"string\">&#x27;+&#x27;</span>|| oper==<span class=\"string\">&#x27;-&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;<span class=\"comment\">//假定目前的表达式只有+、-、*、/</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//判断是不是一个运算符</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOper</span><span class=\"params\">(<span class=\"keyword\">char</span> val)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val==<span class=\"string\">&#x27;+&#x27;</span>||val==<span class=\"string\">&#x27;-&#x27;</span>||val==<span class=\"string\">&#x27;*&#x27;</span>||val==<span class=\"string\">&#x27;/&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//计算方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">cal</span><span class=\"params\">(<span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2,<span class=\"keyword\">int</span> oper)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=<span class=\"number\">0</span>;<span class=\"comment\">//res 用于存放计算的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (oper)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br><span class=\"line\">                res=num1+num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br><span class=\"line\">                res=num2-num1;<span class=\"comment\">//注意顺序</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br><span class=\"line\">                res=num1*num2;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br><span class=\"line\">                res=num2/num1;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"栈的三种表达式\"><a class=\"markdownIt-Anchor\" href=\"#栈的三种表达式\">#</a> 栈的三种表达式</h2>\n<ul>\n<li>前缀表达式（波兰表达式）</li>\n<li>中缀表达式</li>\n<li>后缀表达式（逆波兰表达式）</li>\n</ul>\n<h3 id=\"前缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#前缀表达式\">#</a> 前缀表达式</h3>\n<ul>\n<li>前缀表达式又称为波兰式</li>\n<li>前缀表达式的运算符位于操作数之前</li>\n</ul>\n<p>例如：(3+4)*5-6   对应的前缀表达式是：- * + 3 4 5 6</p>\n<h4 id=\"前缀表达式的计算机求值\"><a class=\"markdownIt-Anchor\" href=\"#前缀表达式的计算机求值\">#</a> 前缀表达式的计算机求值</h4>\n<p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果</p>\n<p>例如: (3+4)×5-6 对应的前缀表达式就是 <strong>- × + 3 4 5 6 ,</strong> <strong>针对前缀表达式求值步骤如下:</strong></p>\n<p>1) 从<strong>右至左扫描</strong>，将 6、5、4、3 压入堆栈</p>\n<p>2) 遇到 + 运算符，因此弹出 3 和 4（3 为栈顶元素，4 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈</p>\n<p>3) 接下来是 × 运算符，因此弹出 7 和 5，计算出 7×5=35，将 35 入栈</p>\n<p>最后是 - 运算符，计算出 35-6 的值，即 29，由此得出最终结果</p>\n<h3 id=\"中缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#中缀表达式\">#</a> 中缀表达式</h3>\n<p>1) 中缀表达式就是<strong>常见的运算表达式</strong>，如 (3+4)×5-6</p>\n<p>2) 中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作 (一般转成后缀表达式.)</p>\n<h3 id=\"后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#后缀表达式\">#</a> 后缀表达式</h3>\n<p>1) 后缀表达式又称<strong>逆波兰表达式</strong>，与前缀表达式相似，只是运算符位于操作数之后</p>\n<p>2) 中举例说明： (3+4)×5-6 对应的后缀表达式就是 <strong>3 4 + 5 × 6 –</strong></p>\n<p>例如：</p>\n<p><a href=\"https://imgtu.com/i/R7E8qH\"><img src=\"https://z3.ax1x.com/2021/07/06/R7E8qH.png\" alt=\"R7E8qH.png\"></a></p>\n<h4 id=\"后缀表达式的计算机求值\"><a class=\"markdownIt-Anchor\" href=\"#后缀表达式的计算机求值\">#</a> 后缀表达式的计算机求值</h4>\n<p><strong>从左至右</strong>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p>\n<p>例如: (3+4)×5-6 对应的后缀表达式就是 <strong>3 4 + 5 × 6 - ,</strong> <strong>针对后缀表达式求值步骤如下:</strong></p>\n<p>1) 从左至右扫描，将 3 和 4 压入堆栈；</p>\n<p>2) 遇到 + 运算符，因此弹出 4 和 3（4 为栈顶元素，3 为次顶元素），计算出 3+4 的值，得 7，再将 7 入栈；</p>\n<p>3) 将 5 入栈；</p>\n<p>4) 接下来是 × 运算符，因此弹出 5 和 7，计算出 7×5=35，将 35 入栈；</p>\n<p>5) 将 6 入栈；</p>\n<p>最后是 - 运算符，计算出 35-6 的值，即 29，由此得出最终结果</p>\n<p><strong>我们完成一个逆波兰计算器，要求完成如下任务</strong>:</p>\n<p>1)<strong> 输入一个逆波兰表达式</strong> (后缀表达式)<strong>，使用栈</strong> (Stack), <strong>计算其结果</strong></p>\n<p>2)<strong> 支持小括号和多位数整数，因为这里我们主要讲的是数据结构，因此计算器进行简化，只支持对整数的计算。</strong></p>\n<h4 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolandNotation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//先定义给逆波兰表达式</span></span><br><span class=\"line\">        <span class=\"comment\">//(30+4)*5-6 =&gt; 3 4 + 5 * 6 -</span></span><br><span class=\"line\">        <span class=\"comment\">//说明为了方便，逆波兰表达式的数字和符号使用空格隔开</span></span><br><span class=\"line\">        String suffixExpression = <span class=\"string\">&quot;30 4 + 5 * 6 -&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//思路</span></span><br><span class=\"line\">        <span class=\"comment\">//1.先将&quot;3 4 + 5 * 6 -&quot; =&gt; 放到ArrayList中</span></span><br><span class=\"line\">        <span class=\"comment\">//2.将ArrayList传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;String&gt; list = getListString(suffixExpression);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;list：&quot;</span>+list);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> res=calculate(list);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;计算的结果是:&quot;</span>+res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getListString</span><span class=\"params\">(String suffixExpression)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将suffixExpression分割</span></span><br><span class=\"line\">        String[] split = suffixExpression.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String ele : split) &#123;</span><br><span class=\"line\">            list.add(ele);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//完成对逆波兰表达式的运算</span></span><br><span class=\"line\">    <span class=\"comment\">/*  (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</span></span><br><span class=\"line\"><span class=\"comment\">        1.从左至右扫描，将3和4压入堆栈；</span></span><br><span class=\"line\"><span class=\"comment\">        2.遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        3.将5入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        4.接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        5.将6入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        6.最后是-运算符，计算出35-6的值，即29，由此得出最终结果</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建给栈，只需一个栈即可</span></span><br><span class=\"line\">        Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//遍历 ls</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String item : ls) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里使用正则表达式来取出数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123;<span class=\"comment\">//匹配的是多位数</span></span><br><span class=\"line\">                <span class=\"comment\">//入栈</span></span><br><span class=\"line\">                stack.push(item);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//pop出两个数，并运算，再入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;+&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 + num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;-&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 - num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;*&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 * num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 / num2;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span>  RuntimeException(<span class=\"string\">&quot;运算符有误&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//把res 入栈</span></span><br><span class=\"line\">                stack.push(res+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//最后留在stack中的数便是运算结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.parseInt(stack.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"中缀表达式转为后缀表达式\"><a class=\"markdownIt-Anchor\" href=\"#中缀表达式转为后缀表达式\">#</a> 中缀表达式转为后缀表达式</h3>\n<h4 id=\"思路分析\"><a class=\"markdownIt-Anchor\" href=\"#思路分析\">#</a> 思路分析</h4>\n<p><a href=\"https://imgtu.com/i/R7EDsg\"><img src=\"https://z3.ax1x.com/2021/07/06/R7EDsg.png\" alt=\"R7EDsg.png\"></a></p>\n<h4 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo04;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PolandNotation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//完成将一个中缀表达式转成后缀表达式的功能</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 1+((2+3)*4)-5 =&gt; 转成1 2 3 + 4 * + 5 -</span></span><br><span class=\"line\">        <span class=\"comment\">//2. 因为直接对str进行操作，不方便，因此先将 &quot;1+((2+3)*4)-5&quot; =》中缀表达式对应的List</span></span><br><span class=\"line\">        <span class=\"comment\">//   即1+((2+3)*4)-5 =&gt; ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">        <span class=\"comment\">//  即 ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]  =&gt; ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        String expression =<span class=\"string\">&quot;1+((2+3)*4)-5&quot;</span>;</span><br><span class=\"line\">        List&lt;String&gt; infixExpressionList = toInfixExpressionList(expression);</span><br><span class=\"line\">        System.out.println(infixExpressionList); <span class=\"comment\">//[1, +, (, (, 2, +, 3, ), *, 4, ), -, 5]</span></span><br><span class=\"line\">        List&lt;String&gt; parseSuffixExpressionList = parseSuffixExpressionList(infixExpressionList);</span><br><span class=\"line\">        System.out.println(parseSuffixExpressionList);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> calculate = calculate(parseSuffixExpressionList);</span><br><span class=\"line\">        System.out.println(calculate);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //先定义给逆波兰表达式</span></span><br><span class=\"line\"><span class=\"comment\">        //(30+4)*5-6 =&gt; 30 4 + 5 * 6 -</span></span><br><span class=\"line\"><span class=\"comment\">        //说明为了方便，逆波兰表达式的数字和符号使用空格隔开</span></span><br><span class=\"line\"><span class=\"comment\">        String suffixExpression = &quot;30 4 + 5 * 6 -&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        //思路</span></span><br><span class=\"line\"><span class=\"comment\">        //1.先将&quot;3 4 + 5 * 6 -&quot; =&gt; 放到ArrayList中</span></span><br><span class=\"line\"><span class=\"comment\">        //2.将ArrayList传递给一个方法，遍历ArrayList 配合栈完成计算</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        List&lt;String&gt; list = getListString(suffixExpression);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;list：&quot;+list);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        int res=calculate(list);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;计算的结果是:&quot;+res);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将得到的中缀表达式对应的List =&gt; 后缀表达式对应的List</span></span><br><span class=\"line\">    <span class=\"comment\">//  即 ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]  =&gt; ArrayList[1,2,3,+,4,*,+,5,-]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">parseSuffixExpressionList</span><span class=\"params\">(List&lt;String&gt; ls)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义两个栈</span></span><br><span class=\"line\">        Stack&lt;String&gt; s1=<span class=\"keyword\">new</span> Stack&lt;&gt;();<span class=\"comment\">//符号栈</span></span><br><span class=\"line\">        <span class=\"comment\">//因为s2这个栈，在整个转换过程中，没有pop操作，而且后面还需要逆序输出</span></span><br><span class=\"line\">        <span class=\"comment\">//因此比较麻烦，所以就不用Stack&lt;String&gt; 直接使用List&lt;String&gt; s2</span></span><br><span class=\"line\">        <span class=\"comment\">//Stack&lt;String&gt; s2=new Stack&lt;&gt;();//存放中间结果的栈</span></span><br><span class=\"line\">        List&lt;String&gt; s2= <span class=\"keyword\">new</span> ArrayList&lt;&gt;();<span class=\"comment\">//存放中间结果的List</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历ls</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String item:ls)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果是一个数，就入s2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>))&#123;</span><br><span class=\"line\">                s2.add(item);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item.equals(<span class=\"string\">&quot;(&quot;</span>))&#123;</span><br><span class=\"line\">                s1.push(item);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item.equals(<span class=\"string\">&quot;)&quot;</span>))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//) 如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!s1.peek().equals(<span class=\"string\">&quot;(&quot;</span>))&#123;</span><br><span class=\"line\">                    s2.add(s1.pop());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                s1.pop();<span class=\"comment\">//!!!!将 &quot;(&quot; 弹出s1栈，消除小括号</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//当item的优先级小于等于s1栈顶的运算符，将s1栈顶的运算符弹出并加入到s2中，再次转到（4.1）与s1中新的栈顶运算符相比较</span></span><br><span class=\"line\">                <span class=\"comment\">//缺少一个比较运算符优先级高低的方法</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (s1.size()!=<span class=\"number\">0</span> &amp;&amp; Operation.getValue(s1.peek())&gt;=Operation.getValue(item))&#123;</span><br><span class=\"line\">                    s2.add(s1.pop());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//最后需要将item压入栈中</span></span><br><span class=\"line\">                s1.push(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将s1中剩余的运算符依次弹出并加入s2</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s1.size()!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            s2.add(s1.pop());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s2;<span class=\"comment\">//注意因为是存放到List，因此按循序输出就是后缀表达式对应的list</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将中缀表达式转换成对应的list</span></span><br><span class=\"line\">    <span class=\"comment\">//   即1+((2+3)*4)-5 =&gt; ArrayList[1,+,(,(,2,+,3,),*,4,),-,5]</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">toInfixExpressionList</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个list，存放中缀表达式对应的内容</span></span><br><span class=\"line\">        List&lt;String&gt; ls=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;<span class=\"comment\">//这是一个指针，用于遍历 中缀表达式字符串</span></span><br><span class=\"line\">        String str;<span class=\"comment\">//对多位数的拼接</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> c;<span class=\"comment\">//每遍历一个字符，就放入c</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果 c 是一个非数字，需要加入到ls</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((c=s.charAt(i))&lt;<span class=\"number\">48</span>||(c=s.charAt(i))&gt;<span class=\"number\">57</span>)&#123;</span><br><span class=\"line\">                ls.add(<span class=\"string\">&quot;&quot;</span>+c);</span><br><span class=\"line\">                i++;<span class=\"comment\">//i需要后移</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果是一个数，需要考虑多位数问题</span></span><br><span class=\"line\">                str=<span class=\"string\">&quot;&quot;</span>;<span class=\"comment\">//先将str 置成 &quot;&quot; &#x27;0&#x27;[48] -&gt; &#x27;9&#x27;[57]</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i&lt;s.length() &amp;&amp; (c=s.charAt(i))&gt;=<span class=\"number\">48</span> &amp;&amp; (c=s.charAt(i))&lt;=<span class=\"number\">57</span>)&#123;</span><br><span class=\"line\">                    str+=c;<span class=\"comment\">//拼接</span></span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                ls.add(str);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (i&lt;s.length());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ls;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将一个逆波兰表达式，依次将数据和运算符放入到ArrayList中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getListString</span><span class=\"params\">(String suffixExpression)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//将suffixExpression分割</span></span><br><span class=\"line\">        String[] split = suffixExpression.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String ele : split) &#123;</span><br><span class=\"line\">            list.add(ele);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//完成对逆波兰表达式的运算</span></span><br><span class=\"line\">    <span class=\"comment\">/*  (3+4)×5-6 对应的后缀表达式就是 3 4 + 5 × 6 - , 针对后缀表达式求值步骤如下:</span></span><br><span class=\"line\"><span class=\"comment\">        1.从左至右扫描，将3和4压入堆栈；</span></span><br><span class=\"line\"><span class=\"comment\">        2.遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        3.将5入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        4.接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        5.将6入栈；</span></span><br><span class=\"line\"><span class=\"comment\">        6.最后是-运算符，计算出35-6的值，即29，由此得出最终结果</span></span><br><span class=\"line\"><span class=\"comment\">    * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calculate</span><span class=\"params\">(List&lt;String&gt; ls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建给栈，只需一个栈即可</span></span><br><span class=\"line\">        Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//遍历 ls</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String item : ls) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里使用正则表达式来取出数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item.matches(<span class=\"string\">&quot;\\\\d+&quot;</span>)) &#123;<span class=\"comment\">//匹配的是多位数</span></span><br><span class=\"line\">                <span class=\"comment\">//入栈</span></span><br><span class=\"line\">                stack.push(item);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//pop出两个数，并运算，再入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> num2 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> num1 = Integer.parseInt(stack.pop());</span><br><span class=\"line\">                <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;+&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 + num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;-&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 - num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;*&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 * num2;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (item.equals(<span class=\"string\">&quot;/&quot;</span>)) &#123;</span><br><span class=\"line\">                    res = num1 / num2;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span>  RuntimeException(<span class=\"string\">&quot;运算符有误&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//把res 入栈</span></span><br><span class=\"line\">                stack.push(res+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//最后留在stack中的数便是运算结果</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Integer.parseInt(stack.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编写一个类Operation 可以返回一个运算符，对应的优先级</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Operation</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ADD = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SUB = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> MUL = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DIV = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写一个方法，返回对应的优先级数字</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">(String operation)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> result =<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (operation)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;+&quot;</span>:</span><br><span class=\"line\">                result=ADD;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;-&quot;</span>:</span><br><span class=\"line\">                result=SUB;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;*&quot;</span>:</span><br><span class=\"line\">                result=MUL;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&quot;/&quot;</span>:</span><br><span class=\"line\">                result=DIV;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;不存在该运算符&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"完整代码实现包含小数点\"><a class=\"markdownIt-Anchor\" href=\"#完整代码实现包含小数点\">#</a> 完整代码实现，包含小数点</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.reversepolishcal;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ReversePolishMultiCalc</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配 + - * / ( ) 运算符</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String SYMBOL = <span class=\"string\">&quot;\\\\+|-|\\\\*|/|\\\\(|\\\\)&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String LEFT = <span class=\"string\">&quot;(&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String RIGHT = <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String ADD = <span class=\"string\">&quot;+&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String MINUS= <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TIMES = <span class=\"string\">&quot;*&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DIVISION = <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 加減 + -</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEVEL_01 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 乘除 * /</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEVEL_02 = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 括号</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LEVEL_HIGH = Integer.MAX_VALUE;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">static</span> List&lt;String&gt; data = Collections.synchronizedList(<span class=\"keyword\">new</span> ArrayList&lt;String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 去除所有空白符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">replaceAllBlank</span><span class=\"params\">(String s )</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// \\\\s+ 匹配任何空白字符，包括空格、制表符、换页符等等, 等价于[ \\f\\n\\r\\t\\v]</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.replaceAll(<span class=\"string\">&quot;\\\\s+&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是不是数字 int double long float</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isNumber</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        Pattern pattern = Pattern.compile(<span class=\"string\">&quot;^[-\\\\+]?[.\\\\d]*$&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pattern.matcher(s).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断是不是运算符</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSymbol</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.matches(SYMBOL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配运算等级</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">calcLevel</span><span class=\"params\">(String s)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;+&quot;</span>.equals(s) || <span class=\"string\">&quot;-&quot;</span>.equals(s))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> LEVEL_01;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;*&quot;</span>.equals(s) || <span class=\"string\">&quot;/&quot;</span>.equals(s))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> LEVEL_02;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> LEVEL_HIGH;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 匹配</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">doMatch</span> <span class=\"params\">(String s)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s == <span class=\"keyword\">null</span> || <span class=\"string\">&quot;&quot;</span>.equals(s.trim())) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;data is empty&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!isNumber(s.charAt(<span class=\"number\">0</span>)+<span class=\"string\">&quot;&quot;</span>)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;data illeagle,start not with a number&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        s = replaceAllBlank(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        String each;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isSymbol(s.charAt(i)+<span class=\"string\">&quot;&quot;</span>))&#123;</span><br><span class=\"line\">                each = s.charAt(i)+<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                <span class=\"comment\">//栈为空，(操作符，或者 操作符优先级大于栈顶优先级 &amp;&amp; 操作符优先级不是( )的优先级 及是 ) 不能直接入栈</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(stack.isEmpty() || LEFT.equals(each)</span><br><span class=\"line\">                        || ((calcLevel(each) &gt; calcLevel(stack.peek())) &amp;&amp; calcLevel(each) &lt; LEVEL_HIGH))&#123;</span><br><span class=\"line\">                    stack.push(each);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( !stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek()))&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//栈非空，操作符优先级小于等于栈顶优先级时出栈入列，直到栈为空，或者遇到了(，最后操作符入栈</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; calcLevel(each) &lt;= calcLevel(stack.peek()) )&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(calcLevel(stack.peek()) == LEVEL_HIGH)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        data.add(stack.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    stack.push(each);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(RIGHT.equals(each))&#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ) 操作符，依次出栈入列直到空栈或者遇到了第一个)操作符，此时)出栈</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (!stack.isEmpty() &amp;&amp; LEVEL_HIGH &gt;= calcLevel(stack.peek()))&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(LEVEL_HIGH == calcLevel(stack.peek()))&#123;</span><br><span class=\"line\">                            stack.pop();</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        data.add(stack.pop());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                start = i ;    <span class=\"comment\">//前一个运算符的位置</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( i == s.length()-<span class=\"number\">1</span> || isSymbol(s.charAt(i+<span class=\"number\">1</span>)+<span class=\"string\">&quot;&quot;</span>) )&#123;</span><br><span class=\"line\">                each = start == <span class=\"number\">0</span> ? s.substring(start,i+<span class=\"number\">1</span>) : s.substring(start+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(isNumber(each)) &#123;</span><br><span class=\"line\">                    data.add(each);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;data not match number&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果栈里还有元素，此时元素需要依次出栈入列，可以想象栈里剩下栈顶为/，栈底为+，应该依次出栈入列，可以直接翻转整个stack 添加到队列</span></span><br><span class=\"line\">        Collections.reverse(stack);</span><br><span class=\"line\">        data.addAll(<span class=\"keyword\">new</span> ArrayList&lt;&gt;(stack));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(data);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 算出结果</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> list</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Double <span class=\"title\">doCalc</span><span class=\"params\">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class=\"line\">        Double d = <span class=\"number\">0d</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(list == <span class=\"keyword\">null</span> || list.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (list.size() == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.println(list);</span><br><span class=\"line\">            d = Double.valueOf(list.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list1 = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">            list1.add(list.get(i));</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isSymbol(list.get(i)))&#123;</span><br><span class=\"line\">                Double d1 = doTheMath(list.get(i - <span class=\"number\">2</span>), list.get(i - <span class=\"number\">1</span>), list.get(i));</span><br><span class=\"line\">                list1.remove(i);</span><br><span class=\"line\">                list1.remove(i-<span class=\"number\">1</span>);</span><br><span class=\"line\">                list1.set(i-<span class=\"number\">2</span>,d1+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                list1.addAll(list.subList(i+<span class=\"number\">1</span>,list.size()));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        doCalc(list1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 运算</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> s2</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> symbol</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Double <span class=\"title\">doTheMath</span><span class=\"params\">(String s1,String s2,String symbol)</span></span>&#123;</span><br><span class=\"line\">        Double result ;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (symbol)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ADD : result = Double.valueOf(s1) + Double.valueOf(s2); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MINUS : result = Double.valueOf(s1) - Double.valueOf(s2); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> TIMES : result = Double.valueOf(s1) * Double.valueOf(s2); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> DIVISION : result = Double.valueOf(s1) / Double.valueOf(s2); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span> : result = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//String math = &quot;9+(3-1)*3+10/2&quot;;</span></span><br><span class=\"line\">        String math = <span class=\"string\">&quot;12.8 + (2 - 3.55)*4+10/5.0&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            doCalc(doMatch(math));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "栈",
                "(后缀表达式)逆波兰表达式"
            ]
        }
    ]
}