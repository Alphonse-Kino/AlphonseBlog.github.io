{
    "version": "https://jsonfeed.org/version/1",
    "title": "品一份静谧人生 • All posts by \"二叉排序树\" tag",
    "description": "",
    "home_page_url": "https://alphonse-Kino.github.io",
    "items": [
        {
            "id": "https://alphonse-kino.github.io/2022/03/15/11%E3%80%81%E6%A0%91%E7%BB%93%E6%9E%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/",
            "url": "https://alphonse-kino.github.io/2022/03/15/11%E3%80%81%E6%A0%91%E7%BB%93%E6%9E%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/",
            "title": "11、树结构实际应用",
            "date_published": "2022-03-15T14:08:27.192Z",
            "content_html": "<h2 id=\"堆排序\"><a class=\"markdownIt-Anchor\" href=\"#堆排序\">#</a> 堆排序</h2>\n<h3 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\">#</a> 基本介绍</h3>\n<ol>\n<li>\n<p>堆排序是利用<strong>堆</strong>这种数据结构而设计的一种排序算法，堆排序是一种 ** 选择排序，** 它的最坏，最好，平均时间复杂度均为 O (nlogn)，它也是不稳定排序。</p>\n</li>\n<li>\n<p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆，<strong>注意</strong>：没有要求结点的左孩子的值和右孩子的值的大小关系。</p>\n</li>\n<li>\n<p>每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆</p>\n</li>\n<li>\n<p><strong>大顶堆</strong></p>\n<p><a href=\"https://imgtu.com/i/R7nrUH\"><img src=\"https://z3.ax1x.com/2021/07/06/R7nrUH.png\" alt=\"R7nrUH.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7Rm7V\"><img src=\"https://z3.ax1x.com/2021/07/07/R7Rm7V.png\" alt=\"R7Rm7V.png\"></a></p>\n<p><strong>大顶堆特点： arr [i]&gt;=arr [2 * i+1] &amp;&amp; arr [i] &gt;= arr [2 * i+2] //i 对应几个节点，i 从 0 开始编号</strong></p>\n</li>\n<li>\n<p><strong>小顶堆</strong></p>\n<p><a href=\"https://imgtu.com/i/R7RMhF\"><img src=\"https://z3.ax1x.com/2021/07/07/R7RMhF.png\" alt=\"R7RMhF.png\"></a></p>\n<p><strong>小顶堆特点： arr [i] &lt;= arr [2 * i+1] &amp;&amp; arr [i] &lt;= arr [2 * i+2] //i 对应几个节点，i 从 0 开始编号</strong></p>\n</li>\n<li>\n<p><strong>一般升序采用大顶堆，降序采用小顶堆</strong></p>\n</li>\n</ol>\n<ul>\n<li>\n<p>堆排序的基本思想是：</p>\n<ul>\n<li>\n<p>将待排序序列构造成一个大顶堆</p>\n</li>\n<li>\n<p>此时，整个序列的最大值就是堆顶的根节点。</p>\n</li>\n<li>\n<p>将其与末尾元素进行交换，此时末尾就为最大值。</p>\n</li>\n<li>\n<p>然后将剩余 n-1 个元素重新构造成一个堆，这样会得到 n 个元素的次小值。如此反复执行，便能得到一个有序序列了。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"思路分析\"><a class=\"markdownIt-Anchor\" href=\"#思路分析\">#</a> 思路分析</h3>\n<p><strong>步骤一 构造初始堆。将给定无序序列构造成一个大顶堆（一般升序采用大顶堆，降序采用小顶堆)。</strong></p>\n<ol>\n<li>. 假设给定无序序列结构如下</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7RatO\"><img src=\"https://z3.ax1x.com/2021/07/07/R7RatO.gif\" alt=\"R7RatO.gif\"></a></p>\n<ol start=\"2\">\n<li>. 此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 arr.length/2-1=5/2-1=1，也就是下面的 6 结点），从左至右，从下至上进行调整。</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7RdhD\"><img src=\"https://z3.ax1x.com/2021/07/07/R7RdhD.gif\" alt=\"R7RdhD.gif\"></a></p>\n<ol start=\"3\">\n<li>. 找到第二个非叶节点 4，由于 [4,9,8] 中 9 元素最大，4 和 9 交换。</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7R09e\"><img src=\"https://z3.ax1x.com/2021/07/07/R7R09e.gif\" alt=\"R7R09e.gif\"></a></p>\n<ol start=\"4\">\n<li>这时，交换导致了子根 [4,5,6] 结构混乱，继续调整，[4,5,6] 中 6 最大，交换 4 和 6。</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7RB1H\"><img src=\"https://z3.ax1x.com/2021/07/07/R7RB1H.gif\" alt=\"R7RB1H.gif\"></a></p>\n<p>此时，我们就将一个无序序列构造成了一个大顶堆。</p>\n<p><strong>步骤二 将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</strong></p>\n<ol>\n<li>. 将堆顶元素 9 和末尾元素 4 进行交换</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7R6Bt\"><img src=\"https://z3.ax1x.com/2021/07/07/R7R6Bt.gif\" alt=\"R7R6Bt.gif\"></a></p>\n<ol start=\"2\">\n<li>. 重新调整结构，使其继续满足堆定义</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7R2Af\"><img src=\"https://z3.ax1x.com/2021/07/07/R7R2Af.gif\" alt=\"R7R2Af.gif\"></a></p>\n<ol start=\"3\">\n<li>. 再将堆顶元素 8 与末尾元素 5 进行交换，得到第二大元素 8.</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7RRN8\"><img src=\"https://z3.ax1x.com/2021/07/07/R7RRN8.gif\" alt=\"R7RRN8.gif\"></a>4) 后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</p>\n<p><a href=\"https://imgtu.com/i/R7R43Q\"><img src=\"https://z3.ax1x.com/2021/07/07/R7R43Q.gif\" alt=\"R7R43Q.gif\"></a></p>\n<p><strong>再简单总结下堆排序的基本思路：</strong></p>\n<p><strong>1). 将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆；</strong></p>\n<p><strong>2). 将堆顶元素与末尾元素交换，将最大元素 &quot;沉&quot; 到数组末端；</strong></p>\n<p><strong>3). 重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行调整 + 交换步骤，直到整个序列有序。</strong></p>\n<h3 id=\"代码展示\"><a class=\"markdownIt-Anchor\" href=\"#代码展示\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo06;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//要求将数组升序排序</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,-<span class=\"number\">1</span>,<span class=\"number\">44</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        heapSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个堆排序的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp=<span class=\"number\">0</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;堆排序！！！&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        分步完成</span></span><br><span class=\"line\"><span class=\"comment\">//        adjustHeap(arr,1,arr.length);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;第一次&quot;+ Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//        adjustHeap(arr,0,arr.length);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;第二次&quot;+ Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//完成最终代码</span></span><br><span class=\"line\">        <span class=\"comment\">//1.将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = arr.length / <span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            adjustHeap(arr, i, arr.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.将堆顶元素与末尾交换，将最大元素 “沉” 到数组末端</span></span><br><span class=\"line\">        <span class=\"comment\">//3.重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行 2和3 两个步骤，直到整个序列有序</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = arr.length - <span class=\"number\">1</span>; j &gt; <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//交换</span></span><br><span class=\"line\">            temp=arr[j];</span><br><span class=\"line\">            arr[j]=arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">            arr[<span class=\"number\">0</span>]=temp;</span><br><span class=\"line\">            adjustHeap(arr,<span class=\"number\">0</span>,j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;数组=&quot;</span> + Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将一个数组（二叉树），调整成一个大顶堆</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 功能：完成 将以 i 指向的 i 对应的非叶子节点的树调整成大顶堆</span></span><br><span class=\"line\"><span class=\"comment\">     * 举例：int[] arr=&#123;4,6,8,5,9&#125; =&gt; i=1 =&gt; adjustHeap =&gt; 得到&#123;4,9,8,5,6&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果我们再次调整 adjustHeap 传入的是 i=0 =&gt; 使 &#123;4,9,8,5,6&#125; =&gt; &#123;9,6,8,5,4 &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr    待调整的数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i      表示非叶子节点在数组中的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> length 表示对多少个元素进行调整，length 在逐渐的减小</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">adjustHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[i];<span class=\"comment\">//先取出当前元素的值，保存在临时变量</span></span><br><span class=\"line\">        <span class=\"comment\">//开始调整</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. k=i*2+1  k是i的左子节点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = i * <span class=\"number\">2</span> + <span class=\"number\">1</span>; k &lt; length; k = k * <span class=\"number\">2</span> + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k + <span class=\"number\">1</span> &lt; length &amp;&amp; arr[k] &lt; arr[k + <span class=\"number\">1</span>]) &#123;<span class=\"comment\">//说明左子节点的值小于右子节点的值</span></span><br><span class=\"line\">                k++; <span class=\"comment\">//k指向 右子节点</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[k] &gt; temp) &#123;  <span class=\"comment\">//如果子节点大于父节点</span></span><br><span class=\"line\">                arr[i] = arr[k]; <span class=\"comment\">//把较大的值赋给当前节点</span></span><br><span class=\"line\">                i = k;  <span class=\"comment\">//!!!! i指向k 继续循环比较</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当 for 循环结束后，我们已经将以 i 为父节点的树的最大值，放在了最顶（局部）</span></span><br><span class=\"line\">        arr[i] = temp; <span class=\"comment\">//将temp值放到调整后的位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"赫夫曼树\"><a class=\"markdownIt-Anchor\" href=\"#赫夫曼树\">#</a> 赫夫曼树</h2>\n<h3 id=\"基本介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍-2\">#</a> 基本介绍</h3>\n<ul>\n<li>\n<p>给定 n 个权值作为 n 个<a href=\"https://baike.baidu.com/item/%E5%8F%B6%E5%AD%90%E7%BB%93%E7%82%B9/3620239\">叶子结点</a>，构造一棵二叉树，若该树的带权路径长度 (wpl) 达到最小，称这样的二叉树为<strong>最优二叉树</strong>，也称为<strong>哈夫曼树</strong> (Huffman Tree), 还有的书翻译为<strong>霍夫曼树</strong>。</p>\n</li>\n<li>\n<p>赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p>\n</li>\n</ul>\n<h3 id=\"几个概念\"><a class=\"markdownIt-Anchor\" href=\"#几个概念\">#</a> 几个概念</h3>\n<ul>\n<li>\n<p>路径和路径长度：在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为路径。通路中分支的数目称为路径长度。若规定根结点的层数为 1，则从根结点到第 L 层结点的路径长度为 L-1</p>\n</li>\n<li>\n<p>** 结点的权及带权路径长度：** 若将树中结点赋给一个有着某种含义的数值，则这个数值称为该结点的权。<strong>结点的带权路径长度</strong>为：从根结点到该结点之间的路径长度与该结点的权的乘积</p>\n</li>\n<li>\n<p><strong>树的带权路径长度：<strong>树的带权路径长度规定为所有</strong>叶子结点</strong>的带权路径长度之和，记为 WPL (weighted path length) , 权值越大的结点离根结点越近的二叉树才是最优二叉树。</p>\n</li>\n<li>\n<p><strong>WPL 最小的就是赫夫曼树</strong></p>\n</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/R7RTun\"><img src=\"https://z3.ax1x.com/2021/07/07/R7RTun.png\" alt=\"R7RTun.png\"></a></p>\n<h3 id=\"思路分析-2\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-2\">#</a> 思路分析</h3>\n<p>构成赫夫曼树的步骤：</p>\n<ul>\n<li>\n<p>从小到大进行排序，将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树</p>\n</li>\n<li>\n<p>取出根节点权值最小的两颗二叉树</p>\n</li>\n<li>\n<p>组成一颗新的二叉树，该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和</p>\n</li>\n<li>\n<p>再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复 1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</p>\n</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/R7R7Bq\"><img src=\"https://z3.ax1x.com/2021/07/07/R7R7Bq.png\" alt=\"R7R7Bq.png\"></a></p>\n<h3 id=\"代码分析\"><a class=\"markdownIt-Anchor\" href=\"#代码分析\">#</a> 代码分析</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HuffmanTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">13</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">29</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        Node root = createHuffmanTree(arr);</span><br><span class=\"line\">        <span class=\"comment\">//测试一把</span></span><br><span class=\"line\">        preOrder(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(Node root)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            root.preOrder();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;该树为空树&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建赫夫曼树的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title\">createHuffmanTree</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//第一步为了操作方便</span></span><br><span class=\"line\">        <span class=\"comment\">//1.遍历 arr 数组</span></span><br><span class=\"line\">        <span class=\"comment\">//2.将 arr 的每个元素构成成一个Node</span></span><br><span class=\"line\">        <span class=\"comment\">//3.将 Node 放入到ArrayList中</span></span><br><span class=\"line\">        List&lt;Node&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">            nodes.add(<span class=\"keyword\">new</span> Node(value));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//我们处理的过程是一个循环的过程</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nodes.size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//排序 从小到大</span></span><br><span class=\"line\">            Collections.sort(nodes);</span><br><span class=\"line\">            System.out.println(nodes);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//取出根节点权值最小的两颗二叉树</span></span><br><span class=\"line\">            <span class=\"comment\">//(1) 取出权值最小的节点（二叉树）</span></span><br><span class=\"line\">            Node leftNode = nodes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">//(1) 取出权值第二小的节点（二叉树）</span></span><br><span class=\"line\">            Node rightNode = nodes.get(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//(3) 构建一颗新的二叉树</span></span><br><span class=\"line\">            Node parent = <span class=\"keyword\">new</span> Node(leftNode.value + rightNode.value);</span><br><span class=\"line\">            parent.left = leftNode;</span><br><span class=\"line\">            parent.right = rightNode;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//(4) 从ArrayList中删除处理过的二叉树</span></span><br><span class=\"line\">            nodes.remove(leftNode);</span><br><span class=\"line\">            nodes.remove(rightNode);</span><br><span class=\"line\">            <span class=\"comment\">//(5) 将parent 加入到nodes中</span></span><br><span class=\"line\">            nodes.add(parent);</span><br><span class=\"line\">            Collections.sort(nodes);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nodes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建节点</span></span><br><span class=\"line\"><span class=\"comment\">//为了让Node 对象持续排序Collections集合排序</span></span><br><span class=\"line\"><span class=\"comment\">//让Node 实现Comparable 接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Node</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;   <span class=\"comment\">//节点权值</span></span><br><span class=\"line\">    Node left;   <span class=\"comment\">//指向左子节点</span></span><br><span class=\"line\">    Node right;  <span class=\"comment\">//指向右子节点、</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Node&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;value=&quot;</span> + value +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Node o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//升序 从小到大</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.value - o.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写一个前序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"赫夫曼编码\"><a class=\"markdownIt-Anchor\" href=\"#赫夫曼编码\">#</a> 赫夫曼编码</h2>\n<h3 id=\"基本介绍-3\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍-3\">#</a> 基本介绍</h3>\n<ul>\n<li>赫夫曼编码也叫哈夫曼编码又称霍夫曼编码，是一种编码方式，属于一种程序算法</li>\n<li>赫夫曼编码是赫哈夫曼树在电讯通信中的经典的应用之一</li>\n<li>赫夫曼编码广泛地用于数据文件压缩。其 ** 压缩率通常在 20%～90%** 之间</li>\n<li>赫夫曼码是可变<a href=\"https://baike.baidu.com/item/%E5%AD%97%E9%95%BF/97660\">字长</a>编码 (VLC) 的一种。Huffman 于 1952 年提出一种编码方法，称之为最佳编码</li>\n</ul>\n<h3 id=\"原理剖析\"><a class=\"markdownIt-Anchor\" href=\"#原理剖析\">#</a> 原理剖析</h3>\n<h4 id=\"1-定长编码\"><a class=\"markdownIt-Anchor\" href=\"#1-定长编码\">#</a> 1、定长编码</h4>\n<ul>\n<li>\n<p>i like like like java do you like a java    // 共 40 个字符 (包括空格) 《转换成 ACSII 码》</p>\n</li>\n<li>\n<p>105 32 108 105 107 101 32 108 105 107 101 32 108 105 107 101 32 106 97 118 97 32 100 111 32 121 111 117 32 108 105 107 101 32 97 32 106 97 118 97 // 对应 Ascii 码</p>\n</li>\n<li>\n<p>01101001 00100000 01101100 01101001 01101011 01100101 00100000 01101100 01101001 01101011 01100101 00100000 01101100 01101001 01101011 01100101 00100000 01101010 01100001 01110110 01100001 00100000 01100100 01101111 00100000 01111001 01101111 01110101 00100000 01101100 01101001 01101011 01100101 00100000 01100001 00100000 01101010 01100001 01110110 01100001 // 对应的二进制</p>\n</li>\n<li>\n<p>按照二进制来传递信息，总的长度是 359  (包括空格)</p>\n</li>\n<li>\n<p>在线转码 工具 ：<a href=\"https://www.mokuge.com/tool/asciito16/\">https://www.mokuge.com/tool/asciito16/</a></p>\n</li>\n</ul>\n<h4 id=\"2-变长编码\"><a class=\"markdownIt-Anchor\" href=\"#2-变长编码\">#</a> 2、变长编码</h4>\n<ul>\n<li>\n<p>i like like like java do you like a java    // 共 40 个字符 (包括空格)</p>\n</li>\n<li>\n<p>d:1 y:1 u:1 j:2 v:2 o:2 l:4 k:4 e:4 i:5 a:5  :9 // 各个字符对应的个数</p>\n</li>\n<li>\n<p>0=(空格)  , 1=a, 10=i, 11=e, 100=k, 101=l, 110=o, 111=v, 1000=j, 1001=u, 1010=y, 1011=d<br>\n 说明：按照各个字符出现的次数进行编码，原则是出现次数越多的，则编码越小，比如 空格出现了 9 次， 编码为 0 , 其它依次类推.</p>\n</li>\n<li>\n<p>按照上面给各个字符规定的编码，则我们在传输 “i like like like java do you like a java” 数据时，编码就是<br>\n 10010110100…</p>\n</li>\n<li>\n<p>字符的编码都不能是其他字符编码的前缀，符合此要求的编码叫做前缀编码， 即不能匹配到重复的编码</p>\n</li>\n</ul>\n<h4 id=\"3-赫夫曼编码\"><a class=\"markdownIt-Anchor\" href=\"#3-赫夫曼编码\">#</a> 3、赫夫曼编码</h4>\n<ol>\n<li>\n<p>传输的字符串  i like like like java do you like a java</p>\n</li>\n<li>\n<p>d:1、y:1、u:1、j:2、v:2、o:2、l:4、k:4、e:4、i:5、a:5、(空格):9 // 各个字符对应的个数</p>\n</li>\n<li>\n<p>按照上面字符出现的次数构建一颗赫夫曼树，次数作为权值</p>\n<ul>\n<li>\n<p>构成赫夫曼树的步骤：</p>\n</li>\n<li>\n<p>从小到大进行排序，将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树</p>\n</li>\n<li>\n<p>取出根节点权值最小的两颗二叉树</p>\n</li>\n<li>\n<p>组成一颗新的二叉树，该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和</p>\n</li>\n<li>\n<p>再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复 1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7RqEV\"><img src=\"https://z3.ax1x.com/2021/07/07/R7RqEV.png\" alt=\"R7RqEV.png\"></a></p>\n<ol start=\"4\">\n<li>\n<p>根据赫夫曼树，给各个字符，规定编码 (前缀编码)， 向左的路径为 0 向右的路径为 1 ， 编码如下:</p>\n<p>o: 1000  u: 10010   d: 100110   y: 100111    i: 101     a : 110      k: 1110     e: 1111</p>\n<p>j: 0000    v: 0001     l: 001         (空格) : 01</p>\n</li>\n<li>\n<p>按照上面的赫夫曼编码，我们的 &quot;i like like like java do you like a java&quot;  字符串对应的编码为 (注意这里我们使用的无损压缩)</p>\n<p><strong>101</strong>0100110111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110 通过赫夫曼编码处理 长度为 133</p>\n</li>\n<li>\n<p>长度为 ： 133</p>\n</li>\n</ol>\n<p><strong>说明：原来长度是 359 , 压缩了 (359-133) / 359 = 62.9%</strong></p>\n<p><strong>此编码满足前缀编码，即字符的编码都不能是其他字符编码的前缀。不会造成匹配的多义性</strong></p>\n<p><strong>赫夫曼编码是无损处理方案</strong></p>\n<p>注：这个赫夫曼树根据排序方法不同，也可能不太一样，<strong>这样对应的赫夫曼编码也不完全一样</strong>，但是 wpl 是一样的，都是最小的，最后生成的赫夫曼编码的长度是一样的。比如：如果我们让每次生成的新的二叉树总是排在权值相同的二叉树的最后一个，则生成的二叉树为:</p>\n<p><a href=\"https://imgtu.com/i/R7Rv34\"><img src=\"https://z3.ax1x.com/2021/07/07/R7Rv34.png\" alt=\"R7Rv34.png\"></a></p>\n<h2 id=\"赫夫曼树的应用\"><a class=\"markdownIt-Anchor\" href=\"#赫夫曼树的应用\">#</a> 赫夫曼树的应用</h2>\n<h3 id=\"实践操作\"><a class=\"markdownIt-Anchor\" href=\"#实践操作\">#</a> 实践操作</h3>\n<p><strong>数据压缩 (生成赫夫曼树)</strong>、</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将给出的一段文本，比如 &quot;i like like like java do you like a java&quot; ， 根据前面的讲的赫夫曼编码原理，对其进行数据压缩处理 ，形式如 &quot;1010100110111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110</span><br><span class=\"line\">&quot; </span><br><span class=\"line\">步骤1：根据赫夫曼编码压缩数据的原理，需要创建 &quot;i like like like java do you like a java&quot; 对应的赫夫曼树.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>数据压缩 (生成赫夫曼编码和赫夫曼编码后的数据)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我们已经生成了 赫夫曼树, 下面我们继续完成任务</span><br><span class=\"line\">  1.生成赫夫曼树对应的赫夫曼编码  , 如下表:\u000b=01 a=100 d=11000 u=11001 e=1110 v=11011 i=101 y=11010 j=0010 k=1111 l=000 o=0011\u000b</span><br><span class=\"line\">  2.使用赫夫曼编码来生成赫夫曼编码数据 ,即按照上面的赫夫曼编码，将&quot;i like like like java do you like a java&quot;   字符串生成对应的编码数据, 形式下.</span><br><span class=\"line\">  1010100010111111110010001011111111001000101111111100100101001101110001110000011011101000111100101000101111111100110001001010011011100</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>数据解压 (使用赫夫曼编码解码)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用赫夫曼编码来解码数据，具体要求是</span><br><span class=\"line\">  1.前面我们得到了赫夫曼编码和对应的编码</span><br><span class=\"line\">byte[] , 即:[-88, -65, -56, -65, -56, -65, -55, 77, -57, 6, -24, -14, -117, -4, -60, -90, 28]</span><br><span class=\"line\">  2.现在要求使用赫夫曼编码， 进行解码，又重新得到原来的字符串&quot;i like like like \u000bjava do you like a java&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>文件压缩</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">读取文件-&gt; 得到赫夫曼编码表 -&gt; 完成压缩</span><br></pre></td></tr></table></figure>\n<p><strong>文件解压</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">读取压缩文件(数据和赫夫曼编码表)-&gt; 完成解压(文件恢复)</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.如果文件本身就是经过压缩处理的，那么使用赫夫曼编码再压缩效率不会有明显变化, 比如视频,ppt 等等文件 </span><br><span class=\"line\">2.赫夫曼编码是按字节来处理的，因此可以处理所有的文件(二进制文件、文本文件) </span><br><span class=\"line\">3.如果一个文件中的内容，重复的数据不多，压缩效果也不会很明显. </span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HuffmanCode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        String content = &quot;i like like like java do you like a java&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        byte[] contentBytes = content.getBytes();</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(contentBytes.length); //40</span></span><br><span class=\"line\"><span class=\"comment\">        //编码</span></span><br><span class=\"line\"><span class=\"comment\">        byte[] huffmanZipBytes = huffmanZip(contentBytes);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(huffmanZipBytes));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //如何将数据进行解压（解码）</span></span><br><span class=\"line\"><span class=\"comment\">        byte[] sourceBytes = decode(huffmanCodes, huffmanZipBytes);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;原来的字符串=&quot; + new String(sourceBytes));</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        //测试压缩文件</span></span><br><span class=\"line\"><span class=\"comment\">        String srcFile=&quot;F:\\\\alphonse.jpg&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        String dstFile=&quot;F:\\\\alphonse.zip&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">        zipFile(srcFile,dstFile);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;压缩成功~~&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试解压文件</span></span><br><span class=\"line\">        String zipFile=<span class=\"string\">&quot;F:\\\\alphonse.zip&quot;</span>;</span><br><span class=\"line\">        String dstFile=<span class=\"string\">&quot;F:\\\\alphonse1.jpg&quot;</span>;</span><br><span class=\"line\">        unZipFile(zipFile,dstFile);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;解压成功~~&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法,将一个文件进行压缩</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">zipFile</span><span class=\"params\">(String srcFile, String dstFile)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建输出流</span></span><br><span class=\"line\">        FileOutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ObjectOutputStream oos = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//创建文件的输入流</span></span><br><span class=\"line\">        FileInputStream is = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            is = <span class=\"keyword\">new</span> FileInputStream(srcFile);</span><br><span class=\"line\">            <span class=\"comment\">//创建一个和源文件大小一样的byte[]</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[is.available()];</span><br><span class=\"line\">            <span class=\"comment\">//读取文件</span></span><br><span class=\"line\">            is.read(b);</span><br><span class=\"line\">            <span class=\"comment\">//直接对源文件压缩</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] huffmanZipBytes = huffmanZip(b);</span><br><span class=\"line\">            <span class=\"comment\">//创建文件的输出流，存放压缩文件</span></span><br><span class=\"line\">            os = <span class=\"keyword\">new</span> FileOutputStream(dstFile);</span><br><span class=\"line\">            <span class=\"comment\">//创建一个和文件输出流关联的ObjectOutputStream</span></span><br><span class=\"line\">            oos = <span class=\"keyword\">new</span> ObjectOutputStream(os);</span><br><span class=\"line\">            <span class=\"comment\">//把 赫夫曼编码后的字节数组写入压缩文件</span></span><br><span class=\"line\">            oos.writeObject(huffmanZipBytes);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//这里我们以对象流的方式写入赫夫曼编码，是为了以后我们恢复源文件时使用</span></span><br><span class=\"line\">            <span class=\"comment\">//注意：一定要把赫夫曼编码写入压缩文件</span></span><br><span class=\"line\">            oos.writeObject(huffmanCodes);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                is.close();</span><br><span class=\"line\">                oos.close();</span><br><span class=\"line\">                os.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法，对压缩文件解压</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> zipFile 准备解压的文件</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> dstFile 将文件解压到那个路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">unZipFile</span><span class=\"params\">(String zipFile,String dstFile)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//定义文件的输入流</span></span><br><span class=\"line\">        InputStream is =<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//定义一个对象输入流</span></span><br><span class=\"line\">        ObjectInputStream ois=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//定义文件的输出流</span></span><br><span class=\"line\">        OutputStream os=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建文件输入流</span></span><br><span class=\"line\">            is=<span class=\"keyword\">new</span> FileInputStream(zipFile);</span><br><span class=\"line\">            <span class=\"comment\">//创建一个和 is 关联的对象输入流</span></span><br><span class=\"line\">            ois = <span class=\"keyword\">new</span> ObjectInputStream(is);</span><br><span class=\"line\">            <span class=\"comment\">//读取byte数组到huffmanBytes</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] huffmanBytes=(<span class=\"keyword\">byte</span>[])ois.readObject();</span><br><span class=\"line\">            <span class=\"comment\">//读取赫夫曼编码表</span></span><br><span class=\"line\">            Map&lt;Byte,String&gt; huffmanCodes=(Map&lt;Byte,String&gt;)ois.readObject();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//解码</span></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] decode = decode(huffmanCodes, huffmanBytes);</span><br><span class=\"line\">            <span class=\"comment\">//将bytes 数组写入到目标文件</span></span><br><span class=\"line\">            os=<span class=\"keyword\">new</span> FileOutputStream(dstFile);</span><br><span class=\"line\">            <span class=\"comment\">//写出数据到文件中</span></span><br><span class=\"line\">            os.write(decode);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                os.close();</span><br><span class=\"line\">                ois.close();</span><br><span class=\"line\">                is.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//完成数据的解压</span></span><br><span class=\"line\">    <span class=\"comment\">//思路</span></span><br><span class=\"line\">    <span class=\"comment\">//1.将 [-88, -65, -56, -65, -56, -65, -55, 77, -57, 6, -24, -14, -117, -4, -60, -90, 28]</span></span><br><span class=\"line\">    <span class=\"comment\">//     先转成赫夫曼编码对应的二进制字符串&quot;101010011011110111101001101111011 ...&quot;</span></span><br><span class=\"line\">    <span class=\"comment\">//2.赫夫曼编码对应的二进制的字符串&quot;1010100110111101111010 ... &quot; =&gt; 对照 赫夫曼编码重新转成字符串 =&gt; &quot;i like like like java do you like a java&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将 一个byte 转成 一个二进制字符串</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b 传入的byte</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回的是该 b 对应的二进制的字符串，（注意是按补码返回）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Param</span> flag 标志是否需要补高位，如果是true 表示需要补高位，如果是false 表示不补</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">byteToBitString</span><span class=\"params\">(<span class=\"keyword\">boolean</span> flag, <span class=\"keyword\">byte</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用变量保存 b</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = b;<span class=\"comment\">//将 b 转成 int类型</span></span><br><span class=\"line\">        <span class=\"comment\">//如果是正数，我们还需要补高位</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            temp = temp | <span class=\"number\">256</span>; <span class=\"comment\">// 按位与256 1 0000 0000 | 0000 0001 =&gt; 1 0000 0001</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String str = Integer.toBinaryString(temp); <span class=\"comment\">//返回的是 temp 对应的二进制的补码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str.substring(str.length() - <span class=\"number\">8</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写一个方法，完成对压缩数据的解码</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> huffmanCodes 赫夫曼编码表 map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> huffmanBytes 赫夫曼编码得到的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 就是原来的字符串对应的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] decode(Map&lt;Byte, String&gt; huffmanCodes, <span class=\"keyword\">byte</span>[] huffmanBytes) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.先得到 huffmanBytes 对应的二进制的字符串，如 1010100110111101111010 ...</span></span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"comment\">//将byte数组转成二进制的字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; huffmanBytes.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span> b = huffmanBytes[i];</span><br><span class=\"line\">            <span class=\"comment\">//判断是不是最后一个字节</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> flag = (i == huffmanBytes.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">            stringBuilder.append(byteToBitString(!flag, b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(stringBuilder.toString());</span><br><span class=\"line\">        <span class=\"comment\">//把字符串按照指定的赫夫曼编码进行解码</span></span><br><span class=\"line\">        <span class=\"comment\">//把赫夫曼编码表进行调换，因为反向查询 a-&gt;100   100-&gt;a</span></span><br><span class=\"line\">        Map&lt;String, Byte&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Byte, String&gt; entry : huffmanCodes.entrySet()) &#123;</span><br><span class=\"line\">            map.put(entry.getValue(), entry.getKey());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个集合，存放byte</span></span><br><span class=\"line\">        List&lt;Byte&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//i 可以理解为索引,扫描 stringBuilder</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; stringBuilder.length(); ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = <span class=\"number\">1</span>; <span class=\"comment\">//小的计数器</span></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> flag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            Byte b = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (flag) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//1010100010111111110010001 ...</span></span><br><span class=\"line\">                <span class=\"comment\">//递增取出一个 &#x27;1&#x27;或&#x27;0&#x27;</span></span><br><span class=\"line\">                String key = stringBuilder.substring(i, i + count); <span class=\"comment\">// i不动，让count移动，指定匹配一个字符</span></span><br><span class=\"line\">                b = map.get(key);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (b == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//没有匹配到</span></span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//匹配到</span></span><br><span class=\"line\">                    flag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            list.add(b);</span><br><span class=\"line\">            i += count; <span class=\"comment\">//让 i 直接移动到count位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当for循环结束后，我们list中就存放了所有的字符</span></span><br><span class=\"line\">        <span class=\"comment\">//把list中的数据放到byte[] 并返回</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[list.size()];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; b.length; i++) &#123;</span><br><span class=\"line\">            b[i] = list.get(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用一个方法将前面的方法封装起来，便于调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bytes 原始的字符串对应的字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 是经过 赫夫曼编码处理后的字节数组（压缩后的数组）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] huffmanZip(<span class=\"keyword\">byte</span>[] bytes) &#123;</span><br><span class=\"line\">        List&lt;Node&gt; nodes = getNodes(bytes);</span><br><span class=\"line\">        <span class=\"comment\">//根据 nodes 创建赫夫曼树</span></span><br><span class=\"line\">        Node huffmanTreeRoot = createHuffmanTree(nodes);</span><br><span class=\"line\">        <span class=\"comment\">//根据赫夫曼树创建对应的 赫夫曼编码</span></span><br><span class=\"line\">        Map&lt;Byte, String&gt; huffmanCodes = getCodes(huffmanTreeRoot);</span><br><span class=\"line\">        <span class=\"comment\">//根据生成的赫夫曼编码，压缩得到压缩后的赫夫曼编码字节数组</span></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] huffmanCodeBytes = zip(bytes, huffmanCodes);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> huffmanCodeBytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写一个方法，将字符串对应的byte[] 数组，通过生成的赫夫曼编码表，返回一个赫夫曼编码压缩后的byte[]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 例如：String content=&quot;i like like like java do you like a java&quot;; =》 byte[] contentBytes=content.getBytes();</span></span><br><span class=\"line\"><span class=\"comment\">     * 返回的是字符串 &quot;1010100110111101111010011011110111101001101111011110100001100001110011001111000011001111000100100100110111101111011100100001100001110&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     * =&gt; 对应的byte[] huffmanCodeBytes,即8位对应一个byte，放入到huffmanCodeBytes</span></span><br><span class=\"line\"><span class=\"comment\">     * huffmanCodeBytes[0] = 10101001(补码) =&gt; byte [推导 10101001 =》 10101001 -1 =》10101000(反码) =》(符号位不变，其他为取反)11010111 = - 88]  第一位为符号位：0为正，1为负</span></span><br><span class=\"line\"><span class=\"comment\">     * huffmanCodeBytes[1] =-88</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bytes        这是原始的字符串对应的byte[]</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> huffmanCodes huffmanCodes 生成的赫夫曼编码 map</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回赫夫曼编码处理后的byte[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] zip(<span class=\"keyword\">byte</span>[] bytes, Map&lt;Byte, String&gt; huffmanCodes) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.利用huffmanCodes 将 bytes 转成 赫夫曼编码对应的字符串</span></span><br><span class=\"line\">        StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"comment\">//遍历 bytes 数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : bytes) &#123;</span><br><span class=\"line\">            stringBuilder.append(huffmanCodes.get(b));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;测试 stringBuilder=&quot;</span> + stringBuilder.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将 &quot;1010100110111101111010011011110 ... &quot;转成 byte[]</span></span><br><span class=\"line\">        <span class=\"comment\">//统计返回 byte[] huffmanCodes</span></span><br><span class=\"line\">        <span class=\"comment\">//一句话 int len = (stringBuilder.length() + 7)/8;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stringBuilder.length() % <span class=\"number\">8</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            len = stringBuilder.length() / <span class=\"number\">8</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            len = stringBuilder.length() / <span class=\"number\">8</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] huffmanCodeBytes = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[len];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;<span class=\"comment\">//记录是第几个 byte</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; stringBuilder.length(); i += <span class=\"number\">8</span>) &#123; <span class=\"comment\">//因为是霉每8位对应一个byte，所以步长+8</span></span><br><span class=\"line\">            String strByte;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + <span class=\"number\">8</span> &gt; stringBuilder.length()) &#123;</span><br><span class=\"line\">                strByte = stringBuilder.substring(i);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strByte = stringBuilder.substring(i, i + <span class=\"number\">8</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//将 strByte 转成一个byte放入到HuffmanCodeBytes</span></span><br><span class=\"line\">            huffmanCodeBytes[index] = (<span class=\"keyword\">byte</span>) Integer.parseInt(strByte, <span class=\"number\">2</span>);</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> huffmanCodeBytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成赫夫曼树对应的赫夫曼编码</span></span><br><span class=\"line\">    <span class=\"comment\">//思路</span></span><br><span class=\"line\">    <span class=\"comment\">//1.将赫夫曼编码表存放在 Map&lt;Byte,String&gt; 中形式</span></span><br><span class=\"line\">    <span class=\"comment\">//   &#123;32=01, 97=100, 100=11000, 117=11001, 101=1110, 118=11011, 105=101, 121=11010, 106=0010, 107=1111, 108=000, 111=0011&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> Map&lt;Byte, String&gt; huffmanCodes = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//2.在生成赫夫曼编码表时，需要拼接路径，定义一个StringBuild 存储某个叶子节点的路径</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> StringBuilder stringBuilder = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//为了调用方便，重载getCodes</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;Byte, String&gt; <span class=\"title\">getCodes</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//处理root的左子树</span></span><br><span class=\"line\">        getCodes(root.left, <span class=\"string\">&quot;0&quot;</span>, stringBuilder);</span><br><span class=\"line\">        <span class=\"comment\">//处理root的右子树</span></span><br><span class=\"line\">        getCodes(root.right, <span class=\"string\">&quot;1&quot;</span>, stringBuilder);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> huffmanCodes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 功能：将传入的node节点的所有叶子节点的赫夫曼编码得到，并放入到HuffmanCode集合</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> node          传入节点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> code          路径：左子节点是 0，右子节点是 1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> stringBuilder 用于拼接路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getCodes</span><span class=\"params\">(Node node, String code, StringBuilder stringBuilder)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder stringBuilder2 = <span class=\"keyword\">new</span> StringBuilder(stringBuilder);</span><br><span class=\"line\">        <span class=\"comment\">//将code加入到stringBuilder2</span></span><br><span class=\"line\">        stringBuilder2.append(code);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果node等于null，不处理</span></span><br><span class=\"line\">            <span class=\"comment\">//判断当前node，是叶子节点还是非叶子节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node.data == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//递归处理</span></span><br><span class=\"line\">                <span class=\"comment\">//向左递归</span></span><br><span class=\"line\">                getCodes(node.left, <span class=\"string\">&quot;0&quot;</span>, stringBuilder2);</span><br><span class=\"line\">                <span class=\"comment\">//向右递归</span></span><br><span class=\"line\">                getCodes(node.right, <span class=\"string\">&quot;1&quot;</span>, stringBuilder2);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//说明是一个叶子结点</span></span><br><span class=\"line\">                <span class=\"comment\">//就表示找到某个叶子结点的最后</span></span><br><span class=\"line\">                huffmanCodes.put(node.data, stringBuilder2.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//前序遍历的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">(Node root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root.preOrder();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;赫夫曼树为空&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bytes 接收字节数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回的是List  [Node&#123;data=32, weight=9&#125;, Node&#123;data=97, weight=5&#125;, ....]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;Node&gt; <span class=\"title\">getNodes</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.创建一个ArrayList</span></span><br><span class=\"line\">        ArrayList&lt;Node&gt; nodes = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//2.遍历bytes,统计每一个bytes出现的次数 -&gt; map[key,value]</span></span><br><span class=\"line\">        Map&lt;Byte, Integer&gt; counts = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">byte</span> b : bytes) &#123;</span><br><span class=\"line\">            Integer count = counts.get(b);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count == <span class=\"keyword\">null</span>) &#123;<span class=\"comment\">//此时，Map中还没有这个字符数据，第一次存放该数据</span></span><br><span class=\"line\">                counts.put(b, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                counts.put(b, count + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把每个键值对转成一个Node 对象，并加入到nodes集合中</span></span><br><span class=\"line\">        <span class=\"comment\">//遍历map</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Byte, Integer&gt; entry : counts.entrySet()) &#123;</span><br><span class=\"line\">            nodes.add(<span class=\"keyword\">new</span> Node(entry.getKey(), entry.getValue()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过List 创建赫夫曼树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Node <span class=\"title\">createHuffmanTree</span><span class=\"params\">(List&lt;Node&gt; nodes)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nodes.size() &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//排序,从小到大</span></span><br><span class=\"line\">            Collections.sort(nodes);</span><br><span class=\"line\">            <span class=\"comment\">//取出第一颗最小的二叉树</span></span><br><span class=\"line\">            Node leftNode = nodes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            Node rightNode = nodes.get(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">//创建一棵新的二叉树，他的根节点没有data，只有权值</span></span><br><span class=\"line\">            Node parent = <span class=\"keyword\">new</span> Node(<span class=\"keyword\">null</span>, leftNode.weight + rightNode.weight);</span><br><span class=\"line\">            parent.left = leftNode;</span><br><span class=\"line\">            parent.right = rightNode;</span><br><span class=\"line\">            <span class=\"comment\">//将已经处理的两颗二叉树从nodes 中删除</span></span><br><span class=\"line\">            nodes.remove(leftNode);</span><br><span class=\"line\">            nodes.remove(rightNode);</span><br><span class=\"line\">            <span class=\"comment\">//将新的节点，加入到nodes 中</span></span><br><span class=\"line\">            nodes.add(parent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//nodes 最后的节点解释赫夫曼树的根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nodes.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Node，带数据和权值</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Node</span>&gt; </span>&#123;</span><br><span class=\"line\">    Byte data; <span class=\"comment\">//存放数据，比如&#x27;a&#x27; =&gt; 97, &#x27; &#x27;=&gt; 32</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> weight; <span class=\"comment\">//存放权值,表示字符出现的次数</span></span><br><span class=\"line\">    Node left;</span><br><span class=\"line\">    Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(Byte data, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.weight = weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Node o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//从小到大排序</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.weight - o.weight;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Node&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;data=&quot;</span> + data +</span><br><span class=\"line\">                <span class=\"string\">&quot;, weight=&quot;</span> + weight +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">preOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.preOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.preOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"二叉排序树\"><a class=\"markdownIt-Anchor\" href=\"#二叉排序树\">#</a> 二叉排序树</h2>\n<h3 id=\"需求分析\"><a class=\"markdownIt-Anchor\" href=\"#需求分析\">#</a> 需求分析</h3>\n<p>问题：给你一个数列 (7, 3, 10, 12, 5, 1, 9)，要求能够高效的完成对数据的查询和添加</p>\n<h3 id=\"解决方案\"><a class=\"markdownIt-Anchor\" href=\"#解决方案\">#</a> 解决方案</h3>\n<p><strong>Ø 使用数组</strong></p>\n<ol>\n<li>\n<p>数组未排序， 优点：直接在数组尾添加，速度快。 缺点：查找速度慢. [示意图]</p>\n</li>\n<li>\n<p>数组排序，优点：可以使用二分查找，查找速度快，缺点：为了保证数组有序，在添加新数据时，找到插入位置后，后面的数据需整体移动，速度慢。[示意图]</p>\n</li>\n</ol>\n<p><strong>Ø 使用链式存储 - 链表</strong></p>\n<ul>\n<li>不管链表是否有序，查找速度都慢，添加数据速度比数组快，不需要数据整体移动。[示意图]</li>\n</ul>\n<h3 id=\"简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#简单介绍\">#</a> 简单介绍</h3>\n<p>二叉排序树：BST: (Binary Sort (Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。</p>\n<p><strong>特别说明</strong>：如果有相同的值，可以将该节点放在左子节点或右子节点</p>\n<p>比如针对前面的数据 (7, 3, 10, 12, 5, 1, 9) ，对应的二叉排序树为：</p>\n<p><a href=\"https://imgtu.com/i/R7WpuR\"><img src=\"https://z3.ax1x.com/2021/07/07/R7WpuR.png\" alt=\"R7WpuR.png\"></a></p>\n<h3 id=\"二叉排序树的创建和遍历\"><a class=\"markdownIt-Anchor\" href=\"#二叉排序树的创建和遍历\">#</a> 二叉排序树的创建和遍历</h3>\n<p><a href=\"https://imgtu.com/i/R7WCHx\"><img src=\"https://z3.ax1x.com/2021/07/07/R7WCHx.png\" alt=\"R7WCHx.png\"></a></p>\n<h3 id=\"二叉排序树的删除\"><a class=\"markdownIt-Anchor\" href=\"#二叉排序树的删除\">#</a> 二叉排序树的删除</h3>\n<p>二叉排序树的删除情况比较复杂，有下面三种情况需要考虑三种情况：</p>\n<p><a href=\"https://imgtu.com/i/R7WFUK\"><img src=\"https://z3.ax1x.com/2021/07/07/R7WFUK.png\" alt=\"R7WFUK.png\"></a></p>\n<ul>\n<li>\n<p>第一种情况:</p>\n<ul>\n<li>\n<p>删除叶子节点 (比如：2, 5, 9, 12)</p>\n</li>\n<li>\n<p>思路</p>\n</li>\n<li>\n<p>(1) 需求先去找到要删除的结点 targetNode</p>\n</li>\n<li>\n<p>(2) 找到 targetNode 的 父结点 parent</p>\n</li>\n<li>\n<p>(3) 确定 targetNode 是 parent 的左子结点 还是右子结点</p>\n</li>\n<li>\n<p>(4) 根据前面的情况来对应删除</p>\n</li>\n<li>\n<p>左子结点 parent.left = null</p>\n</li>\n<li>\n<p>右子结点 parent.right = null;</p>\n</li>\n</ul>\n</li>\n<li>\n<p>第二种情况: <strong>删除只有一颗子树的节点</strong> <strong>比如</strong> <strong>1</strong></p>\n<ul>\n<li>\n<p>思路</p>\n</li>\n<li>\n<p>(1) 需求先去找到要删除的结点 targetNode</p>\n</li>\n<li>\n<p>(2) 找到 targetNode 的 父结点 parent</p>\n</li>\n<li>\n<p>(3) 确定 targetNode 的子结点是左子结点还是右子结点</p>\n</li>\n<li>\n<p>(4) targetNode 是 parent 的左子结点还是右子结点</p>\n</li>\n<li>\n<p>(5) 如果 targetNode 有左子结点</p>\n</li>\n<li>\n<p>5.1 如果 targetNode 是 parent 的左子结点</p>\n</li>\n<li>\n<p>parent.left = targetNode.left;</p>\n</li>\n<li>\n<p>5.2 如果 targetNode 是 parent 的右子结点</p>\n</li>\n<li>\n<p>parent.right = targetNode.left;</p>\n</li>\n<li>\n<p>(6) 如果 targetNode 有右子结点</p>\n</li>\n<li>\n<p>6.1 如果 targetNode 是 parent 的左子结点</p>\n</li>\n<li>\n<p>parent.left = targetNode.right;</p>\n</li>\n<li>\n<p>6.2 如果 targetNode 是 parent 的右子结点</p>\n</li>\n<li>\n<p>parent.right = targetNode.right</p>\n</li>\n</ul>\n</li>\n<li>\n<p>情况三 ： 删除有两颗子树的节点. (比如：7, 3，<strong>10</strong> )</p>\n<ul>\n<li>\n<p>思路</p>\n</li>\n<li>\n<p>(1) 需求先去找到要删除的结点 targetNode</p>\n</li>\n<li>\n<p>(2) 找到 targetNode 的 父结点 parent</p>\n</li>\n<li>\n<p>(3) 从 targetNode 的右子树找到最小的结点</p>\n</li>\n<li>\n<p>(4) 用一个临时变量，将 最小结点的值保存 temp = 11</p>\n</li>\n<li>\n<p>(5) 删除该最小结点</p>\n</li>\n<li>\n<p>(6) targetNode.value = temp</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"代码展示-2\"><a class=\"markdownIt-Anchor\" href=\"#代码展示-2\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySortTreeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">10</span>, <span class=\"number\">12</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">        BinarySortTree binarySortTree = <span class=\"keyword\">new</span> BinarySortTree();</span><br><span class=\"line\">        <span class=\"comment\">//循环的添加结点到二叉排序树</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            binarySortTree.add(<span class=\"keyword\">new</span> Node(arr[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//中序遍历二叉排序树</span></span><br><span class=\"line\">        binarySortTree.infixOrder();<span class=\"comment\">//1 3 5 7 9 10 12</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试删除叶子结点</span></span><br><span class=\"line\">        binarySortTree.delNode(<span class=\"number\">2</span>);</span><br><span class=\"line\">        binarySortTree.delNode(<span class=\"number\">5</span>);</span><br><span class=\"line\">        binarySortTree.delNode(<span class=\"number\">9</span>);</span><br><span class=\"line\">        binarySortTree.delNode(<span class=\"number\">2</span>);</span><br><span class=\"line\">        binarySortTree.delNode(<span class=\"number\">12</span>);</span><br><span class=\"line\">        binarySortTree.delNode(<span class=\"number\">7</span>);</span><br><span class=\"line\">        binarySortTree.delNode(<span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"comment\">//binarySortTree.delNode(10);</span></span><br><span class=\"line\">        <span class=\"comment\">//binarySortTree.delNode(1);</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;删除结点后&quot;</span>);</span><br><span class=\"line\">        binarySortTree.infixOrder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建二叉排序树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySortTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加结点方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root = node; <span class=\"comment\">//如果root为空，直接让root指向node</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            root.add(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找要删除的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.search(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找要删除的父结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.searchParent(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  编写方法</span></span><br><span class=\"line\"><span class=\"comment\">     *  1.返回 以 node 为根节点的二叉排序树的最小结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     *  2.删除node为根节点的二叉排序树的最小结点</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> node 传入的结点（当前二叉排序树的根节点）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回 以 node 为根节点的二叉排序树的最小结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delRightTreeMin</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">        Node target=node;</span><br><span class=\"line\">        <span class=\"comment\">//循环的查找左子节点，就会找到最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (target.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            target=target.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这是target就指向了最小结点</span></span><br><span class=\"line\">        <span class=\"comment\">//删除最小结点</span></span><br><span class=\"line\">        delNode(target.value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1.需要先去找到要删除的结点 targetNode</span></span><br><span class=\"line\">            Node targetNode = search(value);</span><br><span class=\"line\">            <span class=\"comment\">//如果没有找到要删除的结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetNode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果我们发现当前这个二叉排序树只有一个结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//去找到targetNode的父结点</span></span><br><span class=\"line\">            Node parent = searchParent(value);</span><br><span class=\"line\">            <span class=\"comment\">//如果要删除的结点是叶子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetNode.left == <span class=\"keyword\">null</span> &amp;&amp; targetNode.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断targetNode是父结点的左子结点还是右子结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parent.left != <span class=\"keyword\">null</span> &amp;&amp; parent.left.value == value) &#123;<span class=\"comment\">//说明targetNode是parent的左子结点</span></span><br><span class=\"line\">                    parent.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parent.right != <span class=\"keyword\">null</span> &amp;&amp; parent.right.value == value) &#123;<span class=\"comment\">//说明targetNode是parent的右子结点</span></span><br><span class=\"line\">                    parent.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span> &amp;&amp; targetNode.right != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//删除有两颗子树的结点</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> minValue = delRightTreeMin(targetNode.right);</span><br><span class=\"line\">                targetNode.value=minValue;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//删除只有一颗子树的结点</span></span><br><span class=\"line\">                <span class=\"comment\">//如果要删除的结点有左子结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果targetNode 是parent的左子结点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (parent.left.value == value) &#123;</span><br><span class=\"line\">                            parent.left = targetNode.left;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//说明targetNode是parent的右子结点</span></span><br><span class=\"line\">                            parent.right = targetNode.left;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        root=targetNode.left;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//如果要删除的结点有右子结点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (parent.left.value == value) &#123; <span class=\"comment\">//targetNode是parent的左子结点</span></span><br><span class=\"line\">                            parent.left = targetNode.right;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//targetNode是parent的右子结点</span></span><br><span class=\"line\">                            parent.right = targetNode.right;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        root=targetNode.right;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root.infixOrder();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;二叉排序树为null，无法遍历&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Node结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    Node left;</span><br><span class=\"line\">    Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Node&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;value=&quot;</span> + value +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加结点</span></span><br><span class=\"line\">    <span class=\"comment\">//递归的形式添加结点，注意需要满足二叉排序树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断传入结点的值，和当前子树的根结点的值的关系</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.value &lt; <span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断当前结点的左子结点是否为 null</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.left = node;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//递归的向左子树添加</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.left.add(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//添加结点的值大于当前结点的值</span></span><br><span class=\"line\">            <span class=\"comment\">//判断当前结点的右子结点是否为 null</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.right = node;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//递归的向右子树添加</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.right.add(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找要删除的结点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 希望删除的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到该结点，就返回该结点，否则返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">this</span>.value) &#123; <span class=\"comment\">//找到就是该结点</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &lt; <span class=\"keyword\">this</span>.value) &#123; <span class=\"comment\">//如果查找的值小于当前结点，向左子树递归查找</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.search(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果查找的值不小于当前结点，向右子树递归查找</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.search(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找要删除结点的父结点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 要找到的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回要删除结点的父结点，没有就返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果当前结点就是要删除的结点的父结点，就反回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.value == value) || (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.value == value)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果查找的值小于当前结点的值，并且当前结点的左子结点不为null</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; value &lt; <span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.searchParent(value);<span class=\"comment\">//向左子树递归查找</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt;= <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.searchParent(value);<span class=\"comment\">//向右子树递归查找</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"平衡二叉树\"><a class=\"markdownIt-Anchor\" href=\"#平衡二叉树\">#</a> 平衡二叉树</h2>\n<h3 id=\"引出概念\"><a class=\"markdownIt-Anchor\" href=\"#引出概念\">#</a> 引出概念</h3>\n<p><strong>看一个案例 (说明二叉排序树可能的问题)</strong></p>\n<p>给你一个数列 {1,2,3,4,5,6}，要求创建一颗二叉排序树 (BST), 并分析问题所在.</p>\n<p><strong>下方 BST 存在的问题分析</strong>:</p>\n<p>1) 左子树全部为空，从形式上看，更像一个单链表.</p>\n<p>2) 插入速度没有影响</p>\n<p>3) 查询速度明显降低 (因为需要依次比较), 不能发挥 BST 的优势，因为每次还需要比较左子树，其查询速度比单链表还慢</p>\n<p>4) 解决方案 - 平衡二叉树 (AVL)</p>\n<p><a href=\"https://imgtu.com/i/R7WV8e\"><img src=\"https://z3.ax1x.com/2021/07/07/R7WV8e.png\" alt=\"R7WV8e.png\"></a></p>\n<h3 id=\"基本介绍-4\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍-4\">#</a> 基本介绍</h3>\n<p>1) 平衡二叉树也叫平衡二叉搜索树（Self-balancing binary search tree）又被称为 AVL 树， 可以<strong>保证查询效率较高</strong>。</p>\n<p>2) 具有以下<strong>特点</strong>：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有<a href=\"\">红黑树</a>)、<a href=\"\">AVL</a>、<a href=\"\">替罪羊树</a>、<a href=\"\">Treap</a>、<a href=\"\">伸展树</a>等。</p>\n<h3 id=\"左旋转\"><a class=\"markdownIt-Anchor\" href=\"#左旋转\">#</a> 左旋转</h3>\n<ul>\n<li 4,3,6,5,7,8=\"\">要求：给你一个数列，创建出对应的平衡二叉树。数列</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/R7WQVP\"><img src=\"https://z3.ax1x.com/2021/07/07/R7WQVP.png\" alt=\"R7WQVP.png\"></a></p>\n<h3 id=\"右旋转\"><a class=\"markdownIt-Anchor\" href=\"#右旋转\">#</a> 右旋转</h3>\n<ul>\n<li 10,12,=\"\" 8,=\"\" 9,=\"\" 7,=\"\" 6=\"\">要求：给你一个数列，创建出对应的平衡二叉树。数列</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/R7Wevd\"><img src=\"https://z3.ax1x.com/2021/07/07/R7Wevd.png\" alt=\"R7Wevd.png\"></a></p>\n<h3 id=\"双旋转\"><a class=\"markdownIt-Anchor\" href=\"#双旋转\">#</a> 双旋转</h3>\n<p>前面的两个数列，进行单旋转 (即一次旋转) 就可以将非平衡二叉树转成平衡二叉树，但是在某些情况下，单旋转不能完成平衡二叉树的转换。比如数列</p>\n<p><strong>int[]</strong> <strong>arr</strong> <strong>= { 10, 11, 7, 6, 8, 9 };</strong> <strong>运行原来的代码可以看到，并没有转成</strong> <strong>AVL 树.</strong></p>\n<p><strong>int[]</strong> <strong>arr</strong> <strong>= {2,1,6,5,7,3}; //</strong> <strong>运行原来的代码可以看到，并没有转成 AVL 树</strong></p>\n<p><a href=\"https://imgtu.com/i/R7WwV0\"><img src=\"https://z3.ax1x.com/2021/07/07/R7WwV0.png\" alt=\"R7WwV0.png\"></a></p>\n<h3 id=\"代码展示-3\"><a class=\"markdownIt-Anchor\" href=\"#代码展示-3\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVLTreeDemo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int[] arr=&#123;4,3,6,5,7,8&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//int[] arr=&#123;10,12,8,9,7,6&#125;;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=&#123;<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个AVLTree对象</span></span><br><span class=\"line\">        AVLTree avlTree = <span class=\"keyword\">new</span> AVLTree();</span><br><span class=\"line\">        <span class=\"comment\">//添加结点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            avlTree.add(<span class=\"keyword\">new</span> Node(arr[i]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//遍历</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;中序遍历&quot;</span>);</span><br><span class=\"line\">        avlTree.infixOrder();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;平衡处理后~~&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;树的高度&quot;</span>+avlTree.getRoot().height()); <span class=\"comment\">//3</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;树的左子树高度&quot;</span>+avlTree.getRoot().leftHeight()); <span class=\"comment\">//2</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;树的右子树高度&quot;</span>+avlTree.getRoot().rightHeight()); <span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前的根节点为&quot;</span>+avlTree.getRoot()); <span class=\"comment\">//8</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前的根节点左子结点为&quot;</span>+avlTree.getRoot().left); <span class=\"comment\">//7</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前的根节点右子结点为&quot;</span>+avlTree.getRoot().right); <span class=\"comment\">//10</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建AVL树</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVLTree</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">getRoot</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加结点方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root = node; <span class=\"comment\">//如果root为空，直接让root指向node</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            root.add(node);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找要删除的结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.search(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查找要删除的父结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root.searchParent(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.返回 以 node 为根节点的二叉排序树的最小结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.删除node为根节点的二叉排序树的最小结点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> node 传入的结点（当前二叉排序树的根节点）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回 以 node 为根节点的二叉排序树的最小结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">delRightTreeMin</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        Node target = node;</span><br><span class=\"line\">        <span class=\"comment\">//循环的查找左子节点，就会找到最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (target.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            target = target.left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这是target就指向了最小结点</span></span><br><span class=\"line\">        <span class=\"comment\">//删除最小结点</span></span><br><span class=\"line\">        delNode(target.value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> target.value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除结点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//1.需要先去找到要删除的结点 targetNode</span></span><br><span class=\"line\">            Node targetNode = search(value);</span><br><span class=\"line\">            <span class=\"comment\">//如果没有找到要删除的结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetNode == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果我们发现当前这个二叉排序树只有一个结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (root.left == <span class=\"keyword\">null</span> &amp;&amp; root.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                root = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//去找到targetNode的父结点</span></span><br><span class=\"line\">            Node parent = searchParent(value);</span><br><span class=\"line\">            <span class=\"comment\">//如果要删除的结点是叶子结点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetNode.left == <span class=\"keyword\">null</span> &amp;&amp; targetNode.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//判断targetNode是父结点的左子结点还是右子结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parent.left != <span class=\"keyword\">null</span> &amp;&amp; parent.left.value == value) &#123;<span class=\"comment\">//说明targetNode是parent的左子结点</span></span><br><span class=\"line\">                    parent.left = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (parent.right != <span class=\"keyword\">null</span> &amp;&amp; parent.right.value == value) &#123;<span class=\"comment\">//说明targetNode是parent的右子结点</span></span><br><span class=\"line\">                    parent.right = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span> &amp;&amp; targetNode.right != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">//删除有两颗子树的结点</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> minValue = delRightTreeMin(targetNode.right);</span><br><span class=\"line\">                targetNode.value = minValue;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//删除只有一颗子树的结点</span></span><br><span class=\"line\">                <span class=\"comment\">//如果要删除的结点有左子结点</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (targetNode.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果targetNode 是parent的左子结点</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (parent.left.value == value) &#123;</span><br><span class=\"line\">                            parent.left = targetNode.left;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//说明targetNode是parent的右子结点</span></span><br><span class=\"line\">                            parent.right = targetNode.left;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        root = targetNode.left;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//如果要删除的结点有右子结点</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (parent.left.value == value) &#123; <span class=\"comment\">//targetNode是parent的左子结点</span></span><br><span class=\"line\">                            parent.left = targetNode.right;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//targetNode是parent的右子结点</span></span><br><span class=\"line\">                            parent.right = targetNode.right;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        root = targetNode.right;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root.infixOrder();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;二叉排序树为null，无法遍历&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建Node结点</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    Node left;</span><br><span class=\"line\">    Node right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Node&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;value=&quot;</span> + value +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回左子树的高度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">leftHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left.height();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回右子树的高度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">rightHeight</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right.height();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回当前结点的高度，当前结点为根节点的树的高度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">height</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(left == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : left.height(), right == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : right.height()) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//左旋转的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">leftRotate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建新的结点，以当前根节点的值</span></span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">        <span class=\"comment\">//把新的结点的左子树设置成当前结点的左子树</span></span><br><span class=\"line\">        newNode.left=left;</span><br><span class=\"line\">        <span class=\"comment\">//把新的结点的右子树设置成当前结点的右子树的左子树</span></span><br><span class=\"line\">        newNode.right=right.left;</span><br><span class=\"line\">        <span class=\"comment\">//把当前结点的值替换成右子结点的值</span></span><br><span class=\"line\">        value=right.value;</span><br><span class=\"line\">        <span class=\"comment\">//把当前结点的右子树设置成当前结点的右子树的右子树</span></span><br><span class=\"line\">        right=right.right;</span><br><span class=\"line\">        <span class=\"comment\">//把当前结点的左子树(左子节点)设置成新的结点</span></span><br><span class=\"line\">        left=newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//右旋转的方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rightRotate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建新的结点，以当前根节点的值</span></span><br><span class=\"line\">        Node newNode = <span class=\"keyword\">new</span> Node(value);</span><br><span class=\"line\">        <span class=\"comment\">//把新的结点的右子树设置成当前结点的右子树</span></span><br><span class=\"line\">        newNode.right=right;</span><br><span class=\"line\">        <span class=\"comment\">//把新的结点的左子树设置成当前结点的左子树的右子树</span></span><br><span class=\"line\">        newNode.left=left.right;</span><br><span class=\"line\">        <span class=\"comment\">//把当前结点的值替换成左子结点的值</span></span><br><span class=\"line\">        value=left.value;</span><br><span class=\"line\">        <span class=\"comment\">//把当前结点的左子树设置成当前结点的左子树的左子树</span></span><br><span class=\"line\">        left=left.left;</span><br><span class=\"line\">        <span class=\"comment\">//把当前结点的右子树(右子节点)设置成新的结点</span></span><br><span class=\"line\">        right=newNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//添加结点</span></span><br><span class=\"line\">    <span class=\"comment\">//递归的形式添加结点，注意需要满足二叉排序树</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//判断传入结点的值，和当前子树的根结点的值的关系</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.value &lt; <span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//判断当前结点的左子结点是否为 null</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.left = node;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//递归的向左子树添加</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.left.add(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//添加结点的值大于当前结点的值</span></span><br><span class=\"line\">            <span class=\"comment\">//判断当前结点的右子结点是否为 null</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.right = node;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//递归的向右子树添加</span></span><br><span class=\"line\">                <span class=\"keyword\">this</span>.right.add(node);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//双旋转</span></span><br><span class=\"line\">        <span class=\"comment\">//当添加完一个结点后，如果发现：(右子树高度 - 左子树高度) &gt; 1,实现左旋转</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rightHeight()-leftHeight()&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果它的右子树的左子树的高度大于他的右子树的右子树高度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (right!=<span class=\"keyword\">null</span> &amp;&amp; right.leftHeight()&gt;right.rightHeight())&#123;</span><br><span class=\"line\">                <span class=\"comment\">//先对他的右子结点(右子树)进行右旋转</span></span><br><span class=\"line\">                right.leftRotate();</span><br><span class=\"line\">                <span class=\"comment\">//再对当前结点进行左旋转</span></span><br><span class=\"line\">                leftRotate();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//直接左旋转</span></span><br><span class=\"line\">                leftRotate();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//必须要 ！！！！！！！！！！！！</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//双旋转</span></span><br><span class=\"line\">        <span class=\"comment\">//当添加完一个结点后，如果发现：(左子树高度 - 右子树高度) &gt; 1,实现右旋转</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftHeight()-rightHeight()&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果他的左子树的右子树高度大于它的左子树的左子树高度</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left!=<span class=\"keyword\">null</span> &amp;&amp; left.rightHeight()&gt;left.leftHeight())&#123;</span><br><span class=\"line\">                <span class=\"comment\">//先对当前结点的左子结点(左子树)-&gt;左旋转</span></span><br><span class=\"line\">                left.leftRotate();</span><br><span class=\"line\">                <span class=\"comment\">//再对当前结点进行右旋转</span></span><br><span class=\"line\">                rightRotate();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//直接进行右旋转即可</span></span><br><span class=\"line\">                rightRotate();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找要删除的结点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 希望删除的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到该结点，就返回该结点，否则返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">this</span>.value) &#123; <span class=\"comment\">//找到就是该结点</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &lt; <span class=\"keyword\">this</span>.value) &#123; <span class=\"comment\">//如果查找的值小于当前结点，向左子树递归查找</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.search(value);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">//如果查找的值不小于当前结点，向右子树递归查找</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.search(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找要删除结点的父结点</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> value 要找到的结点的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回要删除结点的父结点，没有就返回null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Node <span class=\"title\">searchParent</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果当前结点就是要删除的结点的父结点，就反回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.left.value == value) || (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span> &amp;&amp; <span class=\"keyword\">this</span>.right.value == value)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果查找的值小于当前结点的值，并且当前结点的左子结点不为null</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span> &amp;&amp; value &lt; <span class=\"keyword\">this</span>.value) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.left.searchParent(value);<span class=\"comment\">//向左子树递归查找</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt;= <span class=\"keyword\">this</span>.value &amp;&amp; <span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.right.searchParent(value);<span class=\"comment\">//向右子树递归查找</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//中序遍历</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">infixOrder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.left != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.left.infixOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.right != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.right.infixOrder();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "堆排序",
                "赫夫曼树",
                "赫夫曼编码",
                "二叉排序树",
                "平衡二叉树"
            ]
        }
    ]
}