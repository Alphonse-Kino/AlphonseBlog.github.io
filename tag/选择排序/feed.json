{
    "version": "https://jsonfeed.org/version/1",
    "title": "品一份静谧人生 • All posts by \"选择排序\" tag",
    "description": "",
    "home_page_url": "https://alphonse-Kino.github.io",
    "items": [
        {
            "id": "https://alphonse-kino.github.io/2021/07/07/07.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "https://alphonse-kino.github.io/2021/07/07/07.%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2021-07-07T14:12:53.203Z",
            "content_html": "<h2 id=\"排序算法\"><a class=\"markdownIt-Anchor\" href=\"#排序算法\">#</a> 排序算法</h2>\n<h3 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念</h3>\n<p>排序也称排序算法 (Sort Algorithm)，排序是将一组数据，依指定的顺序进行排列的过程。</p>\n<h3 id=\"排序的分类\"><a class=\"markdownIt-Anchor\" href=\"#排序的分类\">#</a> 排序的分类</h3>\n<h4 id=\"内部排序\"><a class=\"markdownIt-Anchor\" href=\"#内部排序\">#</a> 内部排序</h4>\n<p>指将需要处理的所有数据都加载到 ** 内部存储器 (内存)** 中进行排序。</p>\n<h4 id=\"外部排序法\"><a class=\"markdownIt-Anchor\" href=\"#外部排序法\">#</a> 外部排序法</h4>\n<p>数据量过大，无法全部加载到内存中，需要借助 ** 外部存储 (文件等)** 进行排序。</p>\n<p><a href=\"https://imgtu.com/i/R7VESf\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VESf.png\" alt=\"R7VESf.png\"></a></p>\n<h3 id=\"算法的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#算法的时间复杂度\">#</a> 算法的时间复杂度</h3>\n<h4 id=\"度量一个程序算法执行时间的两种方法\"><a class=\"markdownIt-Anchor\" href=\"#度量一个程序算法执行时间的两种方法\">#</a> 度量一个程序 (算法) 执行时间的两种方法</h4>\n<ol>\n<li>\n<p>事后统计的方法</p>\n<ul>\n<li>这种方法可行，但是有两个问题 ：</li>\n<li>一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；</li>\n<li>二是所得时间的统计量依赖于计算机的硬件、软件等环境因素，<strong>这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法速度更快</strong>。</li>\n</ul>\n</li>\n<li>\n<p>事前估算的方法</p>\n<ul>\n<li>通过分析某个算法的<strong>时间复杂度</strong>来判断哪个算法更优.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"时间频度\"><a class=\"markdownIt-Anchor\" href=\"#时间频度\">#</a> 时间频度</h4>\n<p>一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。<strong>一个算法中的语句执行次数称为语句频度或时间频度</strong>。记为 T (n)。</p>\n<h5 id=\"1忽略常数项\"><a class=\"markdownIt-Anchor\" href=\"#1忽略常数项\">#</a> &lt;1&gt; 忽略常数项</h5>\n<p><a href=\"https://imgtu.com/i/R7Vuwj\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Vuwj.png\" alt=\"R7Vuwj.png\"></a></p>\n<h5 id=\"2忽略低次项\"><a class=\"markdownIt-Anchor\" href=\"#2忽略低次项\">#</a> &lt;2&gt; 忽略低次项</h5>\n<p><a href=\"https://imgtu.com/i/R7VQkn\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VQkn.png\" alt=\"R7VQkn.png\"></a></p>\n<h5 id=\"3忽略系数\"><a class=\"markdownIt-Anchor\" href=\"#3忽略系数\">#</a> &lt;3&gt; 忽略系数</h5>\n<p><a href=\"https://imgtu.com/i/R7VlYq\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VlYq.png\" alt=\"R7VlYq.png\"></a></p>\n<h3 id=\"时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#时间复杂度\">#</a> 时间复杂度</h3>\n<h4 id=\"概念-2\"><a class=\"markdownIt-Anchor\" href=\"#概念-2\">#</a> 概念</h4>\n<ol>\n<li>\n<p>一般情况下，算法中的基本操作语句的重复执行次数是问题规模 n 的某个函数，用 T (n) 表示，若有某个辅助函数 f (n)，使得当 n 趋近于无穷大时，T (n) /f (n) 的极限值为不等于零的常数，则称 f (n) 是 T (n) 的同数量级函数。记作 T (n)=Ｏ( f (n) )，称Ｏ( f (n) ) 为算法的渐进时间复杂度，简称时间复杂度。</p>\n</li>\n<li>\n<p>T (n) 不同，但时间复杂度可能相同。 如：T (n)=n²+7n+6 与 T (n)=3n²+2n+2 它们的 T (n) 不同，但时间复杂度相同，都为 O (n²)。</p>\n</li>\n</ol>\n<h4 id=\"计算时间复杂度的方法\"><a class=\"markdownIt-Anchor\" href=\"#计算时间复杂度的方法\">#</a> 计算时间复杂度的方法：</h4>\n<ol>\n<li>\n<p>用常数 1 代替运行时间中的所有加法常数 T (n)=n²+7n+6 =&gt; T (n)=n²+7n+1</p>\n</li>\n<li>\n<p>修改后的运行次数函数中，只保留最高阶项 T (n)=n²+7n+1 =&gt; T (n) = n²</p>\n</li>\n<li>\n<p>去除最高阶项的系数 T (n) = n² =&gt;  T (n) = n² =&gt; O (n²)</p>\n</li>\n</ol>\n<h4 id=\"常见的时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#常见的时间复杂度\">#</a> 常见的时间复杂度</h4>\n<p><a href=\"https://imgtu.com/i/R7VGlT\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VGlT.png\" alt=\"R7VGlT.png\"></a></p>\n<h4 id=\"平均时间复杂度和最坏时间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#平均时间复杂度和最坏时间复杂度\">#</a> 平均时间复杂度和最坏时间复杂度</h4>\n<ol>\n<li>\n<p>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</p>\n</li>\n<li>\n<p>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</p>\n</li>\n<li>\n<p>平均时间复杂度和最坏时间复杂度是否一致，和算法有关</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7Vgne\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Vgne.png\" alt=\"R7Vgne.png\"></a></p>\n<h3 id=\"空间复杂度\"><a class=\"markdownIt-Anchor\" href=\"#空间复杂度\">#</a> 空间复杂度</h3>\n<h4 id=\"简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#简单介绍\">#</a> 简单介绍</h4>\n<ul>\n<li>类似于时间复杂度的讨论，一个算法的空间复杂度 (Space Complexity) 定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。</li>\n<li>空间复杂度 (Space Complexity) 是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</li>\n<li>在做算法分析时，<strong>主要讨论的是时间复杂度</strong>。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品 (redis, memcache) 和算法 (基数排序) 本质就是<strong>用空间换时间</strong>.</li>\n</ul>\n<h1 id=\"八种基本排序算法\"><a class=\"markdownIt-Anchor\" href=\"#八种基本排序算法\">#</a> 八种基本排序算法</h1>\n<h2 id=\"1-冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#1-冒泡排序\">#</a> 1、冒泡排序</h2>\n<h3 id=\"思路分析\"><a class=\"markdownIt-Anchor\" href=\"#思路分析\">#</a> 思路分析</h3>\n<p><a href=\"https://imgtu.com/i/R7VfAA\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VfAA.png\" alt=\"R7VfAA.png\"></a></p>\n<h3 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;3, 9, -1, 10, 9&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;排序前&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        bubbleSort(arr);</span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;排序后&quot;);</span></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        //为了容易理解，我们把冒泡排序的演变过程，展示出来</span></span><br><span class=\"line\"><span class=\"comment\">        //第一趟排序，就是将最大的数排在最后</span></span><br><span class=\"line\"><span class=\"comment\">        int temp=0;//临时变量</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; arr.length-1; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\"><span class=\"comment\">            if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                temp=arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i]=arr[i+1];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i+1]=temp;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第一次排序后的数组&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        //第二趟排序，就是将第二大的数排在倒数第二位</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; arr.length-2; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\"><span class=\"comment\">            if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                temp=arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i]=arr[i+1];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i+1]=temp;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第二次排序后的数组&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第三趟排序，就是将第三大的数排在倒数第三位</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; arr.length-3; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\"><span class=\"comment\">            if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                temp=arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i]=arr[i+1];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i+1]=temp;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第三次排序后的数组&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第四趟排序，就是将第四大的数排在倒数第四位</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 0; i &lt; arr.length-4; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\"><span class=\"comment\">            if(arr[i]&gt;arr[i+1])&#123;</span></span><br><span class=\"line\"><span class=\"comment\">                temp=arr[i];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i]=arr[i+1];</span></span><br><span class=\"line\"><span class=\"comment\">                arr[i+1]=temp;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第四次排序后的数组&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//冒泡排序的时间复杂度O(n^2)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;<span class=\"comment\">//临时变量</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> flag=<span class=\"keyword\">false</span>;<span class=\"comment\">//标识变量，标识是否进行交换</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果前面的数比后面的数大，则交换</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    flag=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    temp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;第&quot;+(i+1)+&quot;次排序后的数组&quot;);</span></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag)&#123;  <span class=\"comment\">//在一趟排序中，一次交换都没有发生过</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                flag=<span class=\"keyword\">false</span>;<span class=\"comment\">//重置flag，进行下次判断</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-选择排序\"><a class=\"markdownIt-Anchor\" href=\"#2-选择排序\">#</a> 2、选择排序</h2>\n<h3 id=\"思路分析-2\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-2\">#</a> 思路分析</h3>\n<p>选择排序（select sorting）也是一种简单的排序方法。</p>\n<p>它的<strong>基本思想</strong>是：</p>\n<p>第一次从 arr [0]~arr [n-1] 中选取最小值，与 arr [0] 交换，</p>\n<p>第二次从 arr [1]~arr [n-1] 中选取最小值，与 arr [1] 交换，</p>\n<p>第三次从 arr [2]~arr [n-1] 中选取最小值，与 arr [2] 交换，…，</p>\n<p>第 i 次从 arr [i-1]~arr [n-1] 中选取最小值，与 arr [i-1] 交换，…,</p>\n<p>第 n-1 次从 arr [n-2]~arr [n-1] 中选取最小值，与 arr [n-2] 交换，</p>\n<p>总共通过 n-1 次，得到一个按排序码从小到大排列的有序序列。</p>\n<p><a href=\"https://imgtu.com/i/R7VTc8\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VTc8.png\" alt=\"R7VTc8.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7VXAs\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VXAs.png\" alt=\"R7VXAs.png\"></a></p>\n<h3 id=\"代码实现-2\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-2\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        slelctSort(arr);</span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//选择排序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">slelctSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//选择排序的时间复杂度O(n^2)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length-<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> minIndex = i;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> min=arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length ; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(min&gt;arr[j])&#123;<span class=\"comment\">//说明假定的最小值，并不是最小</span></span><br><span class=\"line\">                    min=arr[j];<span class=\"comment\">//重置min</span></span><br><span class=\"line\">                    minIndex=j;<span class=\"comment\">//重置minIndex</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minIndex!=i)&#123;</span><br><span class=\"line\">                arr[minIndex]=arr[i];</span><br><span class=\"line\">                arr[i]=min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //使用逐步推导的方式来，讲解选择排序</span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮</span></span><br><span class=\"line\"><span class=\"comment\">        //原始数组：101,34,119,1</span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮排序：1,34,119,101</span></span><br><span class=\"line\"><span class=\"comment\">        //算法，先简单 --&gt;再复杂，就是可以把一个复杂的算法，拆分成简单的问题 --&gt;逐步解决</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮</span></span><br><span class=\"line\"><span class=\"comment\">        int minIndex = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        int min=arr[0];</span></span><br><span class=\"line\"><span class=\"comment\">        for(int j = 0+1;j&lt;arr.length;j++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if(min&gt;arr[j])&#123;//说明假定的最小值，并不是最小</span></span><br><span class=\"line\"><span class=\"comment\">                min=arr[j];//重置min</span></span><br><span class=\"line\"><span class=\"comment\">                minIndex=j;//重置minIndex</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //将最小值，放在arr[0],即交换</span></span><br><span class=\"line\"><span class=\"comment\">        if(minIndex!=0)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[minIndex]=arr[0];</span></span><br><span class=\"line\"><span class=\"comment\">            arr[0]=min;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第一轮后···&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第二轮</span></span><br><span class=\"line\"><span class=\"comment\">        minIndex = 1;</span></span><br><span class=\"line\"><span class=\"comment\">        min=arr[1];</span></span><br><span class=\"line\"><span class=\"comment\">        for(int j = 1+1;j&lt;arr.length;j++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if(min&gt;arr[j])&#123;//说明假定的最小值，并不是最小</span></span><br><span class=\"line\"><span class=\"comment\">                min=arr[j];//重置min</span></span><br><span class=\"line\"><span class=\"comment\">                minIndex=j;//重置minIndex</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //将最小值，放在arr[1],即交换</span></span><br><span class=\"line\"><span class=\"comment\">        if (minIndex != 1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[minIndex]=arr[1];</span></span><br><span class=\"line\"><span class=\"comment\">            arr[1]=min;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第二轮后···&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第三轮</span></span><br><span class=\"line\"><span class=\"comment\">        minIndex = 2;</span></span><br><span class=\"line\"><span class=\"comment\">        min=arr[2];</span></span><br><span class=\"line\"><span class=\"comment\">        for(int j = 2+1;j&lt;arr.length;j++)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">            if(min&gt;arr[j])&#123;//说明假定的最小值，并不是最小</span></span><br><span class=\"line\"><span class=\"comment\">                min=arr[j];//重置min</span></span><br><span class=\"line\"><span class=\"comment\">                minIndex=j;//重置minIndex</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //将最小值，放在arr[2],即交换</span></span><br><span class=\"line\"><span class=\"comment\">        if (minIndex != 2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[minIndex]=arr[2];</span></span><br><span class=\"line\"><span class=\"comment\">            arr[2]=min;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第三轮后···&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-插入排序\"><a class=\"markdownIt-Anchor\" href=\"#3-插入排序\">#</a> 3、插入排序</h2>\n<h3 id=\"思路分析-3\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-3\">#</a> 思路分析</h3>\n<p>插入排序（Insertion Sorting）的<strong>基本思想</strong>是：</p>\n<p>把 n 个待排序的元素看成为一个有序表和一个无序表，</p>\n<p>开始时有序表中只包含一个元素，无序表中包含有 n-1 个元素，</p>\n<p>排序过程中每次从无序表中取出第一个元素，</p>\n<p>把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，</p>\n<p>使之成为新的有序表。</p>\n<h3 id=\"r7vjnnpng\"><a class=\"markdownIt-Anchor\" href=\"#r7vjnnpng\">#</a> <a href=\"https://imgtu.com/i/R7VjNn\"><img src=\"https://z3.ax1x.com/2021/07/06/R7VjNn.png\" alt=\"R7VjNn.png\"></a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        int[] arr = &#123;101, 34, 119, 1, -1, 88&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//        insertSort(arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        insertSort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//插入排序</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> insertVal = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> insertIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//使用for循环简化代码</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//定义待插入的数</span></span><br><span class=\"line\">            insertVal = arr[i];</span><br><span class=\"line\">            insertIndex = i - <span class=\"number\">1</span>;<span class=\"comment\">//即arr[1]的前面这个数的下标</span></span><br><span class=\"line\">            <span class=\"comment\">//给insertVal找到插入队伍</span></span><br><span class=\"line\">            <span class=\"comment\">//说明</span></span><br><span class=\"line\">            <span class=\"comment\">//1.insertIndex &gt;= 0 保证在给insertVal找插入位置，不越界</span></span><br><span class=\"line\">            <span class=\"comment\">//2.insertVal &lt; arr[insertIndex] 待插入的数，还没找到插入的位置</span></span><br><span class=\"line\">            <span class=\"comment\">//3.就需要将arr[insertIndex] 后移</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (insertIndex &gt;= <span class=\"number\">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class=\"line\">                arr[insertIndex + <span class=\"number\">1</span>] = arr[insertIndex];</span><br><span class=\"line\">                insertIndex--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//当退出while循环时,说明插入的位置找到，insertIndex+1</span></span><br><span class=\"line\">            <span class=\"comment\">//这里判断是否需要赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(insertIndex+<span class=\"number\">1</span>!=i)&#123;</span><br><span class=\"line\">                arr[insertIndex + <span class=\"number\">1</span>] = insertVal;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.printf(&quot;第%d轮插入&quot;,i);</span></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        //使用逐步推导的方式来讲解，便于理解</span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮&#123;101,34,119,1&#125; =》&#123;34,101,119,1&#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //定义待插入的数</span></span><br><span class=\"line\"><span class=\"comment\">        int insertVal = arr[1];</span></span><br><span class=\"line\"><span class=\"comment\">        int insertIndex = 1 - 1;//即arr[1]的前面这个数的下标</span></span><br><span class=\"line\"><span class=\"comment\">        //给insertVal找到插入队伍</span></span><br><span class=\"line\"><span class=\"comment\">        //说明</span></span><br><span class=\"line\"><span class=\"comment\">        //1.insertIndex &gt;= 0 保证在给insertVal找插入位置，不越界</span></span><br><span class=\"line\"><span class=\"comment\">        //2.insertVal &lt; arr[insertIndex] 待插入的数，还没找到插入的位置</span></span><br><span class=\"line\"><span class=\"comment\">        //3.就需要将arr[insertIndex] 后移</span></span><br><span class=\"line\"><span class=\"comment\">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[insertIndex + 1] = arr[insertIndex];</span></span><br><span class=\"line\"><span class=\"comment\">            insertIndex--;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //当退出while循环时,说明插入的位置找到，insertIndex+1</span></span><br><span class=\"line\"><span class=\"comment\">        arr[insertIndex + 1] = insertVal;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.printf(&quot;第1轮插入&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第2轮</span></span><br><span class=\"line\"><span class=\"comment\">        insertVal = arr[2];</span></span><br><span class=\"line\"><span class=\"comment\">        insertIndex = 2 - 1;</span></span><br><span class=\"line\"><span class=\"comment\">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[insertIndex + 1] = arr[insertIndex];</span></span><br><span class=\"line\"><span class=\"comment\">            insertIndex--;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        arr[insertIndex + 1] = insertVal;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.printf(&quot;第2轮插入&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第3轮</span></span><br><span class=\"line\"><span class=\"comment\">        insertVal = arr[3];</span></span><br><span class=\"line\"><span class=\"comment\">        insertIndex = 3 - 1;</span></span><br><span class=\"line\"><span class=\"comment\">        while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            arr[insertIndex + 1] = arr[insertIndex];</span></span><br><span class=\"line\"><span class=\"comment\">            insertIndex--;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        arr[insertIndex + 1] = insertVal;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.printf(&quot;第3轮插入&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-希尔排序\"><a class=\"markdownIt-Anchor\" href=\"#4-希尔排序\">#</a> 4、希尔排序</h2>\n<h3 id=\"希尔排序法介绍\"><a class=\"markdownIt-Anchor\" href=\"#希尔排序法介绍\">#</a> 希尔排序法介绍</h3>\n<p>希尔排序是希尔（Donald Shell）于 1959 年提出的一种排序算法。希尔排序也是一种<strong>插入排序</strong>，它是简单插入排序经过改进之后的一个<strong>更高效的版本</strong>，也称为<strong>缩小增量排序</strong>。</p>\n<h3 id=\"思路分析-4\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-4\">#</a> 思路分析</h3>\n<p><strong>希尔排序法基本思想</strong></p>\n<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止</p>\n<p><a href=\"https://imgtu.com/i/R7ZpcT\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ZpcT.png\" alt=\"R7ZpcT.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7Vz90\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Vz90.png\" alt=\"R7Vz90.png\"></a></p>\n<h3 id=\"代码实现两种方法\"><a class=\"markdownIt-Anchor\" href=\"#代码实现两种方法\">#</a> 代码实现 (两种方法)</h3>\n<h4 id=\"交换法\"><a class=\"markdownIt-Anchor\" href=\"#交换法\">#</a> 交换法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;8, 9, 1, 7, 2, 3, 5, 4, 6, 0&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//shellSort(arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        shellSort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//循环处理</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i - gap; j &gt;= <span class=\"number\">0</span>; j -= gap) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果当前元素大于加上步长后的那个元素，说明交换</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + gap]) &#123;</span><br><span class=\"line\">                        temp = arr[j];</span><br><span class=\"line\">                        arr[j] = arr[j + gap];</span><br><span class=\"line\">                        arr[j + gap] = temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;第&quot; + (++count) + &quot;轮后&quot; + Arrays.toString(arr));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        //使用逐步推导的方式逐步说明</span></span><br><span class=\"line\"><span class=\"comment\">        int temp = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮</span></span><br><span class=\"line\"><span class=\"comment\">        //因为第一轮排序是将10个数据分成了5组</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 5; i &lt; arr.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //遍历各组中所有的元素（共5组，每组两个元素）</span></span><br><span class=\"line\"><span class=\"comment\">            for (int j = i - 5; j &gt;= 0; j -= 5) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //如果当前元素大于加上步长后的那个元素，说明交换</span></span><br><span class=\"line\"><span class=\"comment\">                if (arr[j] &gt; arr[j + 5]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    temp = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j] = arr[j + 5];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j + 5] = temp;</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第1轮后&quot;+ Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        //第二轮排序</span></span><br><span class=\"line\"><span class=\"comment\">        //因为第二轮排序是将10个数据分成了2组</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 2; i &lt; arr.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //遍历各组中所有的元素（共5组，每组两个元素）</span></span><br><span class=\"line\"><span class=\"comment\">            for (int j = i - 2; j &gt;= 0; j -= 2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //如果当前元素大于加上步长后的那个元素，说明交换</span></span><br><span class=\"line\"><span class=\"comment\">                if (arr[j] &gt; arr[j + 2]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    temp = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j] = arr[j + 2];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j + 2] = temp;</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第2轮后&quot;+ Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        //第三轮排序</span></span><br><span class=\"line\"><span class=\"comment\">        //因为第三轮排序是将10个数据分成了2/2=1组</span></span><br><span class=\"line\"><span class=\"comment\">        for (int i = 1; i &lt; arr.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //遍历各组中所有的元素（共5组，每组两个元素）</span></span><br><span class=\"line\"><span class=\"comment\">            for (int j = i - 1; j &gt;= 0; j -= 1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //如果当前元素大于加上步长后的那个元素，说明交换</span></span><br><span class=\"line\"><span class=\"comment\">                if (arr[j] &gt; arr[j + 1]) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    temp = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j] = arr[j + 1];</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[j + 1] = temp;</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第3轮后&quot;+ Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"移位法\"><a class=\"markdownIt-Anchor\" href=\"#移位法\">#</a> 移位法</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo4;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;8, 9, 1, 7, 2, 3, 5, 4, 6, 0&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//shellSort(arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        shellSort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对交换式的希尔排序进行优化 -&gt; 移位法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//常量gap，并逐渐的缩小常量</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//从第gap个元素，逐个对其所在的组进行直接插入排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j=i;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp =arr[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[j]&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (j-gap&gt;=<span class=\"number\">0</span>&amp;&amp;temp&lt;arr[j-gap])&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//移动</span></span><br><span class=\"line\">                        arr[j]=arr[j-gap];</span><br><span class=\"line\">                        j-=gap;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//当退出while后，就给temp找到插入的位置</span></span><br><span class=\"line\">                    arr[j]=temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-快速排序\"><a class=\"markdownIt-Anchor\" href=\"#5-快速排序\">#</a> 5、快速排序</h2>\n<h3 id=\"思路分析-5\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-5\">#</a> 思路分析</h3>\n<p>** 快速排序（Quicksort）是对冒泡排序的一种改进。** 基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p>\n<p><a href=\"https://imgtu.com/i/R7Zt8P\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Zt8P.jpg\" alt=\"R7Zt8P.jpg\"></a></p>\n<h3 id=\"代码实现-3\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-3\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo5;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuickSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        int[] arr = &#123;-9, 78, 0, 23, -567, 70,-5,54,899,-155&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">//        quickSort(arr, 0, arr.length - 1);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;arr=&quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        quickSort(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = left;   <span class=\"comment\">//左小标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = right;  <span class=\"comment\">//右下标</span></span><br><span class=\"line\">        <span class=\"comment\">//pivot 中轴值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> pivot = arr[(left + right) / <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = <span class=\"number\">0</span>;<span class=\"comment\">//临时变量，交换时使用</span></span><br><span class=\"line\">        <span class=\"comment\">//while循环的目的是让比pivot值小的放到左边</span></span><br><span class=\"line\">        <span class=\"comment\">//比pivot大的值放到右边</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; r) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//在pivot的左边一直找，找到大于等于pivot值，才退出</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[l] &lt; pivot) &#123;</span><br><span class=\"line\">                l += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//在pivot的右边一直找，找到小于等于pivot值，才退出</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[r] &gt; pivot) &#123;</span><br><span class=\"line\">                r -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果 l &gt;= r 说明pivot 的左右两边的值，已经按照左边全部是小于等于pivot的值，右边全部是大于等于pivot的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l &gt;= r) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//交换</span></span><br><span class=\"line\">            temp = arr[l];</span><br><span class=\"line\">            arr[l] = arr[r];</span><br><span class=\"line\">            arr[r] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//如果交换完后，发现这个arr[l]==pivot 值，相当于 r--，前移</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[l] == pivot) &#123;</span><br><span class=\"line\">                r -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果交换完后，发现这个arr[r]==pivot 值，相当于 l++，前移</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[r] == pivot) &#123;</span><br><span class=\"line\">                l += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//如果l==r,必须l++,r--,否则出现栈溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l == r) &#123;</span><br><span class=\"line\">            l += <span class=\"number\">1</span>;</span><br><span class=\"line\">            r -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向左递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; r) &#123;</span><br><span class=\"line\">            quickSort(arr, left, r);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//向右递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &gt; l) &#123;</span><br><span class=\"line\">            quickSort(arr, l, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"6-归并排序\"><a class=\"markdownIt-Anchor\" href=\"#6-归并排序\">#</a> 6、归并排序</h2>\n<h3 id=\"思路分析-6\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-6\">#</a> 思路分析</h3>\n<p><strong>归并排序思想示意图 1:</strong></p>\n<p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分 (divide) 成一些小的问题然后递归求解，而治 (conquer) 的阶段则将分的阶段得到的各答案 &quot;修补&quot; 在一起，即分而治之)。</p>\n<p><a href=\"https://imgtu.com/i/R7ZdKS\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ZdKS.png\" alt=\"R7ZdKS.png\"></a></p>\n<p><strong>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。分阶段可以理解为就是递归拆分子序列的过程。</strong></p>\n<p><strong>归并排序思想示意图 2:</strong></p>\n<p><strong>再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将 [4,5,7,8] 和 [1,2,3,6] 两个已经有序的子序列，合并为最终序列 [1,2,3,4,5,6,7,8]，来看下实现步骤</strong></p>\n<p><a href=\"https://imgtu.com/i/R7Z6Cq\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Z6Cq.png\" alt=\"R7Z6Cq.png\"></a></p>\n<p><a href=\"https://imgtu.com/i/R7ZWKU\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ZWKU.png\" alt=\"R7ZWKU.png\"></a></p>\n<h3 id=\"代码实现-4\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-4\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo6;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergetSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;8, 4, 5, 7, 1, 3, 6, 2&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i]=(<span class=\"keyword\">int</span>)(Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span>+format);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arr.length];<span class=\"comment\">//归并排序需要一个额外空间</span></span><br><span class=\"line\">        mergeSort(arr,<span class=\"number\">0</span>,arr.length-<span class=\"number\">1</span>,temp);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1=<span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span>+format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;归并排序后=&quot;</span>+ Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//分+合方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span>[] temp)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;<span class=\"comment\">//中间索引</span></span><br><span class=\"line\">            <span class=\"comment\">//向左递归进行分解</span></span><br><span class=\"line\">            mergeSort(arr, left, mid, temp);</span><br><span class=\"line\">            <span class=\"comment\">//向右递归进行分际</span></span><br><span class=\"line\">            mergeSort(arr, mid+<span class=\"number\">1</span>, right, temp);</span><br><span class=\"line\">            <span class=\"comment\">//合并</span></span><br><span class=\"line\">            merge(arr,left,mid,right,temp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 合并的方法</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr   排序的原始数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left  左边有序序列的初始索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> mid   中间索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right 右边有序序列的初始索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> temp  做中转的数组</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span>[] temp)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;=========================&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = left;<span class=\"comment\">//初始化 i,左边有序序列的初始索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = mid + <span class=\"number\">1</span>;<span class=\"comment\">//初始化 j,右边有序序列的初始索引</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; <span class=\"comment\">//指向temp数组的当前索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//（一）</span></span><br><span class=\"line\">        <span class=\"comment\">//先把左右两边（有序）的数据按照规则填充到temp数组</span></span><br><span class=\"line\">        <span class=\"comment\">//直到左右两边的有序序列，有一边处理完毕</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<span class=\"comment\">//继续</span></span><br><span class=\"line\">            <span class=\"comment\">//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素</span></span><br><span class=\"line\">            <span class=\"comment\">//即将左边的当前元素，填充到temp数组</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class=\"line\">                temp[t] = arr[i];</span><br><span class=\"line\">                t += <span class=\"number\">1</span>;</span><br><span class=\"line\">                i += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//反之，将右边有序序列的当前元素，填充到temp数组中</span></span><br><span class=\"line\">                temp[t] = arr[j];</span><br><span class=\"line\">                t += <span class=\"number\">1</span>;</span><br><span class=\"line\">                j += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//（二）</span></span><br><span class=\"line\">        <span class=\"comment\">//把有剩余数据的一边的数据依次全部填充到temp</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid) &#123;<span class=\"comment\">//左边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class=\"line\">            temp[t] = arr[i];</span><br><span class=\"line\">            t += <span class=\"number\">1</span>;</span><br><span class=\"line\">            i += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= right) &#123;<span class=\"comment\">//右边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class=\"line\">            temp[t] = arr[j];</span><br><span class=\"line\">            t += <span class=\"number\">1</span>;</span><br><span class=\"line\">            j += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//（三）</span></span><br><span class=\"line\">        <span class=\"comment\">//将temp数组的元素拷贝到arr</span></span><br><span class=\"line\">        <span class=\"comment\">//注意：并不是每次都拷贝数组中所有的元素</span></span><br><span class=\"line\">        t = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> templeft = left;</span><br><span class=\"line\">        <span class=\"comment\">//第一次合并 templeft = 0，right = 1；</span></span><br><span class=\"line\">        <span class=\"comment\">//第二次合并 templeft = 2，right = 3；</span></span><br><span class=\"line\">        <span class=\"comment\">//第三次合并 templeft = 0，right = 3；</span></span><br><span class=\"line\">        <span class=\"comment\">// . . .</span></span><br><span class=\"line\">        <span class=\"comment\">//最后一次合并 templeft = 0，right = 7；</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;templeft=&quot;+templeft+&quot;,right&quot;+right);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (templeft &lt;= right) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            arr[templeft] = temp[t];</span><br><span class=\"line\">            t += <span class=\"number\">1</span>;</span><br><span class=\"line\">            templeft += <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"7-基数排序桶排序的扩展\"><a class=\"markdownIt-Anchor\" href=\"#7-基数排序桶排序的扩展\">#</a> 7、基数排序 (桶排序的扩展)</h2>\n<h3 id=\"思路分析-7\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-7\">#</a> 思路分析</h3>\n<ol>\n<li>\n<p><strong>基数排序</strong>（radix sort）属于 “分配式排序”（distribution sort），又称 “桶子法”（bucket sort）或 bin sort，顾名思义，它是通过键值的各个位的值，将要排序的<strong>元素分配</strong>至某些 “桶” 中，达到排序的作用</p>\n</li>\n<li>\n<p>基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法</p>\n</li>\n<li>\n<p>基数排序 (Radix Sort) 是<strong>桶排序</strong>的扩展</p>\n</li>\n<li>\n<p>基数排序是 1887 年赫尔曼・何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p>\n</li>\n</ol>\n<p><strong>基本思想</strong></p>\n<ul>\n<li>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序，这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列</li>\n</ul>\n<p><strong>图文解释</strong></p>\n<p><a href=\"https://imgtu.com/i/R7ZIa9\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ZIa9.png\" alt=\"R7ZIa9.png\"></a></p>\n<p><strong>基数排序的说明</strong></p>\n<ol>\n<li>\n<p>基数排序是对传统桶排序的扩展，速度很快.</p>\n</li>\n<li>\n<p>基数排序是经典的空间换时间的方式，占用内存很大，当对海量数据排序时，容易造成 OutOfMemoryError 。</p>\n</li>\n<li>\n<p>基数排序时稳定的。[注：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r [i]=r [j]，且 r [i] 在 r [j] 之前，而在排序后的序列中，r [i] 仍在 r [j] 之前，<strong>则称这种排序算法是稳定的；否则称为不稳定的</strong>]</p>\n</li>\n<li>\n<p><strong>有负数的数组，我们不用基数排序来进行排序</strong> **,** <strong>如果要支持负数，参考</strong> **😗* <strong><a href=\"https://code.i-harness.com/zh-CN/q/e98fa9\">https://code.i-harness.com/zh-CN/q/e98fa9</a></strong></p>\n</li>\n</ol>\n<h3 id=\"代码实现-5\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-5\">#</a> 代码实现</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo7;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RadixSort</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//int[] arr = &#123;53, 3, 542, 748, 14, 214&#125;;</span></span><br><span class=\"line\">        <span class=\"comment\">//radixSort(arr);</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//80000 * 11 *4</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">80000</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">80000</span>; i++) &#123;</span><br><span class=\"line\">            arr[i] = (<span class=\"keyword\">int</span>) (Math.random() * <span class=\"number\">80000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        SimpleDateFormat simpleDateFormat = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">        String format = simpleDateFormat.format(date);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序前时间：&quot;</span> + format);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        radixSort(arr);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Date date1 = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">        String format1 = simpleDateFormat.format(date1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;排序后时间：&quot;</span> + format1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(&quot;arr=&quot;+Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//基数排序方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">radixSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据前面的推导过程，我们可以得到最终的基数排序代码</span></span><br><span class=\"line\">        <span class=\"comment\">//1.得到数组中最大的数的位数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &gt; arr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">                max = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//得到最大数是几位数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxLength = (max + <span class=\"string\">&quot;&quot;</span>).length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//定义一个二维数组，表示10个桶，每个桶都是一个一维数组</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 二维数组包含10个一维数组</span></span><br><span class=\"line\">        <span class=\"comment\">//2. 为了防止在放入数的时候，数据溢出，则每一个一维数组（桶），大小定为arr.length</span></span><br><span class=\"line\">        <span class=\"comment\">//3.明确，基数排序是使用空间换时间的经典算法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[][] bucket = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>][arr.length];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录各个桶的每次放入的数据个数</span></span><br><span class=\"line\">        <span class=\"comment\">//可以这样理解</span></span><br><span class=\"line\">        <span class=\"comment\">//比如：buckerElementCounts[0]，记录的就是 bucket[0] 桶的放入数据个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] buckerElementCounts = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, n = <span class=\"number\">1</span>; i &lt; maxLength; i++, n *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//（针对每个元素对应的位进行排序处理），第一次是个位，第二次是十位，第三次是百位 依次类推</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//取出每个元素对应位数的值</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> digitOfElement = arr[j] / n % <span class=\"number\">10</span>;</span><br><span class=\"line\">                <span class=\"comment\">//放入到对应的桶中</span></span><br><span class=\"line\">                bucket[digitOfElement][buckerElementCounts[digitOfElement]] = arr[j];</span><br><span class=\"line\">                buckerElementCounts[digitOfElement]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//按照这个桶的顺序（一维数组的下标依次取出数据，放回原来数组）</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个桶，并将桶中的数据，放回原来的数组中</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; buckerElementCounts.length; k++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果桶中，有数据，我们才放入到原数组中</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buckerElementCounts[k] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//循环该桶即第k个桶（即第看个一维数组），放入</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; buckerElementCounts[k]; l++) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//取出元素放入到arr</span></span><br><span class=\"line\">                        arr[index++] = bucket[k][l];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//第 i+1 轮处理后需要将每个buckerElementCounts[k] 置零</span></span><br><span class=\"line\">                buckerElementCounts[k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(&quot;第&quot;+(i+1)+&quot;轮，对个位的排序处理arr = &quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮排序（针对每个元素的个位进行排序处理）</span></span><br><span class=\"line\"><span class=\"comment\">        //定义一个二维数组，表示10个桶，每个桶都是一个一维数组</span></span><br><span class=\"line\"><span class=\"comment\">        //说明</span></span><br><span class=\"line\"><span class=\"comment\">        //1. 二维数组包含10个一维数组</span></span><br><span class=\"line\"><span class=\"comment\">        //2. 为了防止在放入数的时候，数据溢出，则每一个一维数组（桶），大小定为arr.length</span></span><br><span class=\"line\"><span class=\"comment\">        //3.明确，基数排序是使用空间换时间的经典算法</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        int[][] bucket = new int[10][arr.length];</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录各个桶的每次放入的数据个数</span></span><br><span class=\"line\"><span class=\"comment\">        //可以这样理解</span></span><br><span class=\"line\"><span class=\"comment\">        //比如：buckerElementCounts[0]，记录的就是 bucket[0] 桶的放入数据个数</span></span><br><span class=\"line\"><span class=\"comment\">        int[] buckerElementCounts = new int[10];</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第一轮（针对每个元素的个位进行排序处理）</span></span><br><span class=\"line\"><span class=\"comment\">        for (int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //取出每个元素的个位的值</span></span><br><span class=\"line\"><span class=\"comment\">            int digitOfElement = arr[j] / 1 % 10;</span></span><br><span class=\"line\"><span class=\"comment\">            //放入到对应的桶中</span></span><br><span class=\"line\"><span class=\"comment\">            bucket[digitOfElement][buckerElementCounts[digitOfElement]] = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[digitOfElement]++;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //按照这个桶的顺序（一维数组的下标依次取出数据，放回原来数组）</span></span><br><span class=\"line\"><span class=\"comment\">        int index = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        //遍历每一个桶，并将桶中的数据，放回原来的数组中</span></span><br><span class=\"line\"><span class=\"comment\">        for (int k = 0; k &lt; buckerElementCounts.length; k++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果桶中，有数据，我们才放入到原数组中</span></span><br><span class=\"line\"><span class=\"comment\">            if (buckerElementCounts[k] != 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //循环该桶即第k个桶（即第看个一维数组），放入</span></span><br><span class=\"line\"><span class=\"comment\">                for (int l = 0; l &lt; buckerElementCounts[k]; l++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    //取出元素放入到arr</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[index++] = bucket[k][l];</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            //第一轮处理后需要将每个buckerElementCounts[k] 置零</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[k] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第一轮，对个位的排序处理arr = &quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //---------------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第二轮（针对每个元素的十位进行排序处理）</span></span><br><span class=\"line\"><span class=\"comment\">        for (int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //取出每个元素的十位的值</span></span><br><span class=\"line\"><span class=\"comment\">            int digitOfElement = arr[j] / 10 % 10;</span></span><br><span class=\"line\"><span class=\"comment\">            //放入到对应的桶中</span></span><br><span class=\"line\"><span class=\"comment\">            bucket[digitOfElement][buckerElementCounts[digitOfElement]] = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[digitOfElement]++;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //按照这个桶的顺序（一维数组的下标依次取出数据，放回原来数组）</span></span><br><span class=\"line\"><span class=\"comment\">        index = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        //遍历每一个桶，并将桶中的数据，放回原来的数组中</span></span><br><span class=\"line\"><span class=\"comment\">        for (int k = 0; k &lt; buckerElementCounts.length; k++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果桶中，有数据，我们才放入到原数组中</span></span><br><span class=\"line\"><span class=\"comment\">            if (buckerElementCounts[k] != 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //循环该桶即第k个桶（即第看个一维数组），放入</span></span><br><span class=\"line\"><span class=\"comment\">                for (int l = 0; l &lt; buckerElementCounts[k]; l++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    //取出元素放入到arr</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[index++] = bucket[k][l];</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            //第二轮处理后需要将每个buckerElementCounts[k] 置零</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[k] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第二轮，对十位的排序处理arr = &quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\">        //---------------------------------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        //第三轮（针对每个元素的百位进行排序处理）</span></span><br><span class=\"line\"><span class=\"comment\">        for (int j = 0; j &lt; arr.length; j++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //取出每个元素的百位的值</span></span><br><span class=\"line\"><span class=\"comment\">            int digitOfElement = arr[j] / 100 % 10;</span></span><br><span class=\"line\"><span class=\"comment\">            //放入到对应的桶中</span></span><br><span class=\"line\"><span class=\"comment\">            bucket[digitOfElement][buckerElementCounts[digitOfElement]] = arr[j];</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[digitOfElement]++;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        //按照这个桶的顺序（一维数组的下标依次取出数据，放回原来数组）</span></span><br><span class=\"line\"><span class=\"comment\">        index = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        //遍历每一个桶，并将桶中的数据，放回原来的数组中</span></span><br><span class=\"line\"><span class=\"comment\">        for (int k = 0; k &lt; buckerElementCounts.length; k++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            //如果桶中，有数据，我们才放入到原数组中</span></span><br><span class=\"line\"><span class=\"comment\">            if (buckerElementCounts[k] != 0) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                //循环该桶即第k个桶（即第看个一维数组），放入</span></span><br><span class=\"line\"><span class=\"comment\">                for (int l = 0; l &lt; buckerElementCounts[k]; l++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                    //取出元素放入到arr</span></span><br><span class=\"line\"><span class=\"comment\">                    arr[index++] = bucket[k][l];</span></span><br><span class=\"line\"><span class=\"comment\">                &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">            //第三轮处理后需要将每个buckerElementCounts[k] 置零</span></span><br><span class=\"line\"><span class=\"comment\">            buckerElementCounts[k] = 0;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        System.out.println(&quot;第三轮，对百个位的排序处理arr = &quot; + Arrays.toString(arr));</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"8-堆排序未讲解\"><a class=\"markdownIt-Anchor\" href=\"#8-堆排序未讲解\">#</a> 8、堆排序（未讲解）</h2>\n<h3 id=\"思路分析-8\"><a class=\"markdownIt-Anchor\" href=\"#思路分析-8\">#</a> 思路分析</h3>\n<h3 id=\"代码实现-6\"><a class=\"markdownIt-Anchor\" href=\"#代码实现-6\">#</a> 代码实现</h3>\n<h2 id=\"基本排序算法的比较\"><a class=\"markdownIt-Anchor\" href=\"#基本排序算法的比较\">#</a> 基本排序算法的比较</h2>\n<ol>\n<li><a href=\"https://imgtu.com/i/R7Zzad\"><img src=\"https://z3.ax1x.com/2021/07/06/R7Zzad.png\" alt=\"R7Zzad.png\"></a><strong> 稳定</strong>：如果 a 原本在 b 前面，而 a=b，排序之后 a 仍然在 b 的前面；</li>\n<li><strong>不稳定</strong>：如果 a 原本在 b 的前面，而 a=b，排序之后 a 可能会出现在 b 的后面；</li>\n<li><strong>内排序</strong>：所有排序操作都在内存中完成；</li>\n<li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>\n<li><strong>时间复杂度：</strong> 一个算法执行所耗费的时间。</li>\n<li><strong>空间复杂度</strong>：运行完一个程序所需内存的大小。</li>\n<li><strong>n:</strong> 数据规模</li>\n<li><strong>k:</strong> “桶” 的个数</li>\n<li><strong>In-place:</strong>  不占用额外内存</li>\n<li><strong>Out-place:</strong> 占用额外内存</li>\n</ol>\n",
            "tags": [
                "算法与数据结构",
                "排序算法",
                "冒泡排序",
                "时间复杂度",
                "选择排序",
                "插入排序",
                "希尔排序",
                "快速排序",
                "归并排序",
                "基数排序",
                "堆排序"
            ]
        }
    ]
}