{
    "version": "https://jsonfeed.org/version/1",
    "title": "品一份静谧人生 • All posts by \"广度优先算法\" tag",
    "description": "",
    "home_page_url": "https://alphonse-Kino.github.io",
    "items": [
        {
            "id": "https://alphonse-kino.github.io/2022/03/15/13%E3%80%81%E5%9B%BE/",
            "url": "https://alphonse-kino.github.io/2022/03/15/13%E3%80%81%E5%9B%BE/",
            "title": "13、图",
            "date_published": "2022-03-15T14:08:27.197Z",
            "content_html": "<h1 id=\"图\"><a class=\"markdownIt-Anchor\" href=\"#图\">#</a> 图</h1>\n<p><strong>为什么要有图</strong></p>\n<p>1) 前面我们学了线性表和树</p>\n<p>2) 线性表局限于一个直接前驱和一个直接后继的关系</p>\n<p>3) 树也只能有一个直接前驱也就是父节点</p>\n<p>4) 当我们需要表示多对多的关系时， 这里我们就用到了图</p>\n<h2 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\">#</a> 基本介绍</h2>\n<p>图是一种数据结构，其中结点可以具有零个或多个相邻元素。两个结点之间的连接称为边。 结点也可以称为顶点。如图：</p>\n<p><a href=\"https://imgtu.com/i/R7fIwq\"><img src=\"https://z3.ax1x.com/2021/07/07/R7fIwq.png\" alt=\"R7fIwq.png\"></a></p>\n<h2 id=\"常见概念\"><a class=\"markdownIt-Anchor\" href=\"#常见概念\">#</a> 常见概念</h2>\n<ol>\n<li>顶点 (vertex)</li>\n<li>边 (edge)</li>\n<li>路径</li>\n<li>无向图 (下图所示)</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7foT0\"><img src=\"https://z3.ax1x.com/2021/07/07/R7foT0.png\" alt=\"R7foT0.png\"></a></p>\n<ol start=\"5\">\n<li>有向图</li>\n<li>带权图（网）</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7f7kV\"><img src=\"https://z3.ax1x.com/2021/07/07/R7f7kV.png\" alt=\"R7f7kV.png\"></a></p>\n<h2 id=\"表示方式\"><a class=\"markdownIt-Anchor\" href=\"#表示方式\">#</a> 表示方式</h2>\n<p>图的表示方式有两种：二维数组表示（邻接矩阵）；链表表示（邻接表）</p>\n<h3 id=\"邻接矩阵\"><a class=\"markdownIt-Anchor\" href=\"#邻接矩阵\">#</a> 邻接矩阵</h3>\n<p>邻接矩阵是表示图形中顶点之间相邻关系的矩阵，对于 n 个顶点的图而言，矩阵是的 row 和 col 表示的是 1…n 个点</p>\n<p><a href=\"https://imgtu.com/i/R7fHYT\"><img src=\"https://z3.ax1x.com/2021/07/07/R7fHYT.png\" alt=\"R7fHYT.png\"></a></p>\n<h3 id=\"链表邻接表\"><a class=\"markdownIt-Anchor\" href=\"#链表邻接表\">#</a> 链表（邻接表）</h3>\n<ol>\n<li>\n<p>邻接矩阵需要为每个顶点都分配 n 个边的空间，其实有很多边都是不存在，会造成空间的一定损失.</p>\n</li>\n<li>\n<p>邻接表的实现只关心存在的边，不关心不存在的边。因此没有空间浪费，邻接表由数组 + 链表组成</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7fLpF\"><img src=\"https://z3.ax1x.com/2021/07/07/R7fLpF.png\" alt=\"R7fLpF.png\"></a></p>\n<h2 id=\"入门案例\"><a class=\"markdownIt-Anchor\" href=\"#入门案例\">#</a> 入门案例</h2>\n<p><a href=\"https://imgtu.com/i/R7fX6J\"><img src=\"https://z3.ax1x.com/2021/07/07/R7fX6J.png\" alt=\"R7fX6J.png\"></a></p>\n<h2 id=\"代码实现\"><a class=\"markdownIt-Anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo01;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; vertexList;<span class=\"comment\">//存储顶点集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] edges; <span class=\"comment\">//存储图对应的邻接矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> numOfEdges; <span class=\"comment\">//表示边的数目</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试是否创建成功</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=<span class=\"number\">5</span>;</span><br><span class=\"line\">        String[] Vertexs =&#123;<span class=\"string\">&quot;A&quot;</span>,<span class=\"string\">&quot;B&quot;</span>,<span class=\"string\">&quot;C&quot;</span>,<span class=\"string\">&quot;D&quot;</span>,<span class=\"string\">&quot;E&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建图对象</span></span><br><span class=\"line\">        Graph graph = <span class=\"keyword\">new</span> Graph(n);</span><br><span class=\"line\">        <span class=\"comment\">//循环的添加顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String vertex:Vertexs)&#123;</span><br><span class=\"line\">            graph.insertVertex(vertex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//添加边</span></span><br><span class=\"line\">        <span class=\"comment\">//A-B A-C B-C B-D B-E</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);<span class=\"comment\">//A-B</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);<span class=\"comment\">//A-C</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);<span class=\"comment\">//B-C</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>);<span class=\"comment\">//B-D</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>);<span class=\"comment\">//B-E</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//显示邻接矩阵</span></span><br><span class=\"line\">        graph.showGraph();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化矩阵和vertexList</span></span><br><span class=\"line\">        edges=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][n];</span><br><span class=\"line\">        vertexList=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        numOfEdges=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//图中常用的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//返回节点的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfVertex</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vertexList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//得到边的数目</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfEdges</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numOfEdges;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回结点 i (下标)对应的数据 0-&gt;&quot;A&quot; 1-&gt;&quot;B&quot; 2-&gt;&quot;C&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValueByIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vertexList.get(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回v1,v2的权值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWeight</span><span class=\"params\">(<span class=\"keyword\">int</span> v1,<span class=\"keyword\">int</span> v2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> edges[v1][v2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//显示图对应的矩阵</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] link:edges)&#123;</span><br><span class=\"line\">            System.out.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入顶点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertVertex</span><span class=\"params\">(String vertex)</span></span>&#123;</span><br><span class=\"line\">        vertexList.add(vertex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加边</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 表示点的下标即是第几个顶点 &quot;A&quot;-&quot;B&quot; &quot;A&quot;-0 &quot;B&quot;-1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 第二个顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> weight</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v1,<span class=\"keyword\">int</span> v2,<span class=\"keyword\">int</span> weight)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//因为是无向图</span></span><br><span class=\"line\">        edges[v1][v2]=weight;</span><br><span class=\"line\">        edges[v2][v1]=weight;</span><br><span class=\"line\">        numOfEdges++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"图的遍历\"><a class=\"markdownIt-Anchor\" href=\"#图的遍历\">#</a> 图的遍历</h1>\n<p>所谓图的遍历，即是对结点的访问。一个图有那么多个结点，如何遍历这些结点，需要特定策略，一般有两种访问策略:</p>\n<p>(1) 深度优先遍历</p>\n<p>(2) 广度优先遍历</p>\n<h2 id=\"深度优先遍历dfs\"><a class=\"markdownIt-Anchor\" href=\"#深度优先遍历dfs\">#</a> 深度优先遍历 DFS</h2>\n<h3 id=\"简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#简单介绍\">#</a> 简单介绍</h3>\n<ul>\n<li>\n<p>图的深度优先搜索 (Depth First Search) 。</p>\n<ol>\n<li>\n<p>深度优先遍历，从初始访问结点出发，初始访问结点可能有多个邻接结点，深度优先遍历的策略就是首先访问第一个邻接结点，然后再以这个被访问的邻接结点作为初始结点，访问它的第一个邻接结点， 可以这样理解：每次都在访问完<strong>当前结点</strong>后首先访问<strong>当前结点的第一个邻接结点</strong>。</p>\n</li>\n<li>\n<p>我们可以看到，这样的访问策略是优先往纵向挖掘深入，而不是对一个结点的所有邻接结点进行横向访问。</p>\n</li>\n<li>\n<p>显然，深度优先搜索是一个递归的过程</p>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"算法步骤\"><a class=\"markdownIt-Anchor\" href=\"#算法步骤\">#</a> 算法步骤</h3>\n<ol>\n<li>\n<p>访问初始结点 v，并标记结点 v 为已访问。</p>\n</li>\n<li>\n<p>查找结点 v 的第一个邻接结点 w。</p>\n</li>\n<li>\n<p>若 w 存在，则继续执行 4，如果 w 不存在，则回到第 1 步，将从 v 的下一个结点继续。</p>\n</li>\n<li>\n<p>若 w 未被访问，对 w 进行深度优先遍历递归（即把 w 当做另一个 v，然后进行步骤 123）。</p>\n</li>\n<li>\n<p>查找结点 v 的 w 邻接结点的下一个邻接结点，转到步骤 3。</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7fxmR\"><img src=\"https://z3.ax1x.com/2021/07/07/R7fxmR.png\" alt=\"R7fxmR.png\"></a></p>\n<h3 id=\"代码展示\"><a class=\"markdownIt-Anchor\" href=\"#代码展示\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; vertexList;<span class=\"comment\">//存储顶点集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] edges; <span class=\"comment\">//存储图对应的邻接矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> numOfEdges; <span class=\"comment\">//表示边的数目</span></span><br><span class=\"line\">    <span class=\"comment\">//定义给数组boolean[] ,记录某个结点是否被访问</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] isVisited ;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试是否创建成功</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n=<span class=\"number\">5</span>;</span><br><span class=\"line\">        String[] Vertexs =&#123;<span class=\"string\">&quot;A&quot;</span>,<span class=\"string\">&quot;B&quot;</span>,<span class=\"string\">&quot;C&quot;</span>,<span class=\"string\">&quot;D&quot;</span>,<span class=\"string\">&quot;E&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建图对象</span></span><br><span class=\"line\">        Graph graph = <span class=\"keyword\">new</span> Graph(n);</span><br><span class=\"line\">        <span class=\"comment\">//循环的添加顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String vertex:Vertexs)&#123;</span><br><span class=\"line\">            graph.insertVertex(vertex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//添加边</span></span><br><span class=\"line\">        <span class=\"comment\">//A-B A-C B-C B-D B-E</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>);<span class=\"comment\">//A-B</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);<span class=\"comment\">//A-C</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>);<span class=\"comment\">//B-C</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>);<span class=\"comment\">//B-D</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>);<span class=\"comment\">//B-E</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//显示邻接矩阵</span></span><br><span class=\"line\">        graph.showGraph();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试 dfs 遍历是否 OK</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;深度遍历&quot;</span>);</span><br><span class=\"line\">        graph.dfs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化矩阵和vertexList</span></span><br><span class=\"line\">        edges=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][n];</span><br><span class=\"line\">        vertexList=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        numOfEdges=<span class=\"number\">0</span>;</span><br><span class=\"line\">        isVisited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到第一个邻接节点的下标 w</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFirstNeighbor</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;vertexList.size();j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edges[index][j]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//根据前一个邻接节点的下标来获取下一个邻接节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNextNeighbor</span><span class=\"params\">(<span class=\"keyword\">int</span> v1,<span class=\"keyword\">int</span> v2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=v2+<span class=\"number\">1</span>;j&lt;vertexList.size();j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edges[v1][j]&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//深度优先遍历方法</span></span><br><span class=\"line\">    <span class=\"comment\">// i 第一次是 0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] isVisited,<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先我们访问该节点，输出</span></span><br><span class=\"line\">        System.out.print(getValueByIndex(i)+<span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将节点设置成已访问</span></span><br><span class=\"line\">        isVisited[i]=<span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//查找结点 i 的第一个邻接节点 w</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> w=getFirstNeighbor(i);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (w!=-<span class=\"number\">1</span>)&#123; <span class=\"comment\">//说明有邻接节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isVisited[w])&#123;</span><br><span class=\"line\">                dfs(isVisited,w);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果 w 结点已经被访问过</span></span><br><span class=\"line\">            w = getNextNeighbor(i,w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对 dfs 进行一个重载，遍历我们所有的节点，并进行 dfs</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历所有的节点，进行dfs【回溯】</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isVisited[i])&#123;</span><br><span class=\"line\">                dfs(isVisited,i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//图中常用的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//返回节点的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfVertex</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vertexList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//得到边的数目</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfEdges</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numOfEdges;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回结点 i (下标)对应的数据 0-&gt;&quot;A&quot; 1-&gt;&quot;B&quot; 2-&gt;&quot;C&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValueByIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vertexList.get(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//返回v1,v2的权值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWeight</span><span class=\"params\">(<span class=\"keyword\">int</span> v1,<span class=\"keyword\">int</span> v2)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> edges[v1][v2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//显示图对应的矩阵</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] link:edges)&#123;</span><br><span class=\"line\">            System.out.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入顶点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertVertex</span><span class=\"params\">(String vertex)</span></span>&#123;</span><br><span class=\"line\">        vertexList.add(vertex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加边</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1 表示点的下标即是第几个顶点 &quot;A&quot;-&quot;B&quot; &quot;A&quot;-0 &quot;B&quot;-1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2 第二个顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> weight</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v1,<span class=\"keyword\">int</span> v2,<span class=\"keyword\">int</span> weight)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//因为是无向图</span></span><br><span class=\"line\">        edges[v1][v2]=weight;</span><br><span class=\"line\">        edges[v2][v1]=weight;</span><br><span class=\"line\">        numOfEdges++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"广度优先遍历bfs\"><a class=\"markdownIt-Anchor\" href=\"#广度优先遍历bfs\">#</a> 广度优先遍历 BFS</h2>\n<h3 id=\"基本思想\"><a class=\"markdownIt-Anchor\" href=\"#基本思想\">#</a> 基本思想</h3>\n<p>图的广度优先搜索 (Broad First Search) 。</p>\n<p>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点</p>\n<h3 id=\"算法步骤-2\"><a class=\"markdownIt-Anchor\" href=\"#算法步骤-2\">#</a> 算法步骤</h3>\n<p>1) 访问初始结点 v 并标记结点 v 为已访问。</p>\n<p>2) 结点 v 入队列</p>\n<p>3) 当队列非空时，继续执行，否则算法结束。</p>\n<p>4) 出队列，取得队头结点 u。</p>\n<p>5) 查找结点 u 的第一个邻接结点 w。</p>\n<p>6) 若结点 u 的邻接结点 w 不存在，则转到步骤 3；否则循环执行以下三个步骤：</p>\n<p>6.1 若结点 w 尚未被访问，则访问结点 w 并标记为已访问。</p>\n<p>6.2 结点 w 入队列</p>\n<p>6.3 查找结点 u 的继 w 邻接结点后的下一个邻接结点 w，转到步骤 6。</p>\n<p><a href=\"https://imgtu.com/i/R7fxmR\"><img src=\"https://z3.ax1x.com/2021/07/07/R7fxmR.png\" alt=\"R7fxmR.png\"></a></p>\n<h3 id=\"代码分析\"><a class=\"markdownIt-Anchor\" href=\"#代码分析\">#</a> 代码分析</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo03;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.LinkedList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//广度优先算法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Graph</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; vertexList;<span class=\"comment\">//存储顶点集合</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[][] edges; <span class=\"comment\">//存储图对应的邻接矩阵</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> numOfEdges; <span class=\"comment\">//表示边的数目</span></span><br><span class=\"line\">    <span class=\"comment\">//定义给数组boolean[] ,记录某个结点是否被访问</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>[] isVisited;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//测试是否创建成功</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">        String[] Vertexs = &#123;<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;E&quot;</span>&#125;;</span><br><span class=\"line\">        <span class=\"comment\">//创建图对象</span></span><br><span class=\"line\">        Graph graph = <span class=\"keyword\">new</span> Graph(n);</span><br><span class=\"line\">        <span class=\"comment\">//循环的添加顶点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String vertex : Vertexs) &#123;</span><br><span class=\"line\">            graph.insertVertex(vertex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//添加边</span></span><br><span class=\"line\">        <span class=\"comment\">//A-B A-C B-C B-D B-E</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>);<span class=\"comment\">//A-B</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>);<span class=\"comment\">//A-C</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>);<span class=\"comment\">//B-C</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>);<span class=\"comment\">//B-D</span></span><br><span class=\"line\">        graph.insertEdge(<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>);<span class=\"comment\">//B-E</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//显示邻接矩阵</span></span><br><span class=\"line\">        graph.showGraph();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试 dfs 遍历是否 OK</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;深度遍历&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//graph.dfs();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//广度优先</span></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;广度优先&quot;</span>);</span><br><span class=\"line\">        graph.bfs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//初始化矩阵和vertexList</span></span><br><span class=\"line\">        edges = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[n][n];</span><br><span class=\"line\">        vertexList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        numOfEdges = <span class=\"number\">0</span>;</span><br><span class=\"line\">        isVisited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到第一个邻接节点的下标 w</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getFirstNeighbor</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edges[index][j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据前一个邻接节点的下标来获取下一个邻接节点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNextNeighbor</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = v2 + <span class=\"number\">1</span>; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edges[v1][j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//深度优先遍历方法</span></span><br><span class=\"line\">    <span class=\"comment\">// i 第一次是 0</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] isVisited, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//首先我们访问该节点，输出</span></span><br><span class=\"line\">        System.out.print(getValueByIndex(i) + <span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将节点设置成已访问</span></span><br><span class=\"line\">        isVisited[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//查找结点 i 的第一个邻接节点 w</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> w = getFirstNeighbor(i);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (w != -<span class=\"number\">1</span>) &#123; <span class=\"comment\">//说明有邻接节点</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isVisited[w]) &#123;</span><br><span class=\"line\">                dfs(isVisited, w);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果 w 结点已经被访问过</span></span><br><span class=\"line\">            w = getNextNeighbor(i, w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对 dfs 进行一个重载，遍历我们所有的节点，并进行 dfs</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//遍历所有的节点，进行dfs【回溯】</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isVisited[i]) &#123;</span><br><span class=\"line\">                dfs(isVisited, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//对一个节点进行广度优先算法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">boolean</span>[] isVisited, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u; <span class=\"comment\">//表示队列的头节点对应的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> w; <span class=\"comment\">//邻接节点 w</span></span><br><span class=\"line\">        <span class=\"comment\">//队列,节点访问的顺序</span></span><br><span class=\"line\">        LinkedList queue = <span class=\"keyword\">new</span> LinkedList();</span><br><span class=\"line\">        <span class=\"comment\">//访问节点，输出节点信息</span></span><br><span class=\"line\">        System.out.print(getValueByIndex(i) + <span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//标记为已访问</span></span><br><span class=\"line\">        isVisited[i] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//将节点加入队列</span></span><br><span class=\"line\">        queue.addLast(i);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//取出队列的头节点下标</span></span><br><span class=\"line\">            u = (Integer) queue.removeFirst();</span><br><span class=\"line\">            <span class=\"comment\">//得到第一个邻接点的下标 w</span></span><br><span class=\"line\">            w = getFirstNeighbor(u);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (w != -<span class=\"number\">1</span>) &#123; <span class=\"comment\">//找到</span></span><br><span class=\"line\">                <span class=\"comment\">//判断是否访问过</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isVisited[w]) &#123;</span><br><span class=\"line\">                    System.out.print(getValueByIndex(w) + <span class=\"string\">&quot;-&gt;&quot;</span>);</span><br><span class=\"line\">                    <span class=\"comment\">//标记已经访问</span></span><br><span class=\"line\">                    isVisited[w] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"comment\">//加入队列</span></span><br><span class=\"line\">                    queue.addLast(w);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//以 u 为前驱点找 w 后面的下一个邻接点</span></span><br><span class=\"line\">                w = getNextNeighbor(u, w); <span class=\"comment\">//体现出广度优先</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//要遍历所有的节点，都进行广度优先搜索</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isVisited[i]) &#123;</span><br><span class=\"line\">                bfs(isVisited, i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//图中常用的方法</span></span><br><span class=\"line\">    <span class=\"comment\">//返回节点的个数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfVertex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vertexList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到边的数目</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumOfEdges</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numOfEdges;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回结点 i (下标)对应的数据 0-&gt;&quot;A&quot; 1-&gt;&quot;B&quot; 2-&gt;&quot;C&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getValueByIndex</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> vertexList.get(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回v1,v2的权值</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getWeight</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> edges[v1][v2];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//显示图对应的矩阵</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showGraph</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] link : edges) &#123;</span><br><span class=\"line\">            System.out.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//插入顶点</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertVertex</span><span class=\"params\">(String vertex)</span> </span>&#123;</span><br><span class=\"line\">        vertexList.add(vertex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加边</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v1     表示点的下标即是第几个顶点 &quot;A&quot;-&quot;B&quot; &quot;A&quot;-0 &quot;B&quot;-1</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> v2     第二个顶点对应的下标</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> weight</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">insertEdge</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2, <span class=\"keyword\">int</span> weight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//因为是无向图</span></span><br><span class=\"line\">        edges[v1][v2] = weight;</span><br><span class=\"line\">        edges[v2][v1] = weight;</span><br><span class=\"line\">        numOfEdges++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"深度优先vs广度优先\"><a class=\"markdownIt-Anchor\" href=\"#深度优先vs广度优先\">#</a> 深度优先 VS 广度优先</h2>\n<p>深度优先：纵向往下走</p>\n<p>广度优先：横向的，一层一层的走</p>\n<p><a href=\"https://imgtu.com/i/R7hSTx\"><img src=\"https://z3.ax1x.com/2021/07/07/R7hSTx.png\" alt=\"R7hSTx.png\"></a></p>\n",
            "tags": [
                "图",
                "深度优先算法",
                "广度优先算法"
            ]
        }
    ]
}