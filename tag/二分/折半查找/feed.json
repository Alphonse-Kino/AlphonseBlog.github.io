{
    "version": "https://jsonfeed.org/version/1",
    "title": "品一份静谧人生 • All posts by \"二分/折半查找\" tag",
    "description": "",
    "home_page_url": "https://alphonse-Kino.github.io",
    "items": [
        {
            "id": "https://alphonse-kino.github.io/2021/07/07/08.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "url": "https://alphonse-kino.github.io/2021/07/07/08.%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "title": "查找算法",
            "date_published": "2021-07-07T14:15:31.909Z",
            "content_html": "<h1 id=\"查找算法介绍\"><a class=\"markdownIt-Anchor\" href=\"#查找算法介绍\">#</a> 查找算法介绍</h1>\n<p>在 java 中，我们常用的查找有四种：</p>\n<ol>\n<li>顺序（线性）查找</li>\n<li>二分查找 / 折半查找</li>\n<li>插值查找</li>\n<li>斐波那契查找</li>\n</ol>\n<h2 id=\"顺序线性查找算法\"><a class=\"markdownIt-Anchor\" href=\"#顺序线性查找算法\">#</a> 顺序（线性）查找算法</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeqSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr=&#123;<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">74</span>,<span class=\"number\">5</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">1</span>,<span class=\"number\">6</span>,-<span class=\"number\">238</span>&#125;;<span class=\"comment\">//无序数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = seqSearch(arr,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;没有找到&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;找到该值下标为&quot;</span>+index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//普通的线性查找</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">seqSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//线性查找是注意比较，发现有相同值，就返回下标</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] == value) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"二分查找-折半查找算法\"><a class=\"markdownIt-Anchor\" href=\"#二分查找-折半查找算法\">#</a> 二分查找 / 折半查找算法</h2>\n<p><a href=\"https://imgtu.com/i/R7e1MT\"><img src=\"https://z3.ax1x.com/2021/07/06/R7e1MT.png\" alt=\"R7e1MT.png\"></a></p>\n<h3 id=\"代码示例\"><a class=\"markdownIt-Anchor\" href=\"#代码示例\">#</a> 代码示例</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二分查找必须保证该数组是有序的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">213</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> resIndex=binarySearch(arr,<span class=\"number\">0</span>,arr.length,<span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(resIndex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr     数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left    左边的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right   右边的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> findVal 需要查找的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到就返回下标，没有找到就返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">binarySearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&gt;right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (findVal &gt; midVal) &#123;<span class=\"comment\">//向右递归</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123;<span class=\"comment\">//向左递归</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"进阶代码\"><a class=\"markdownIt-Anchor\" href=\"#进阶代码\">#</a> 进阶代码</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo02;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *课后习题：</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;1, 8, 10, 89, 100,100,100, 213&#125;当一个有序数组中</span></span><br><span class=\"line\"><span class=\"comment\"> * 有多个相同数值时，如何将所有的数值都查找到</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 思路分析：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1、在找到mid 索引值，不需要马上返回</span></span><br><span class=\"line\"><span class=\"comment\"> * 2、向mid 索引值的左边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList 中</span></span><br><span class=\"line\"><span class=\"comment\"> * 3、向mid 索引值的右边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList</span></span><br><span class=\"line\"><span class=\"comment\"> * 4、将 ArrayList 返回</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//二分查找必须保证该数组是有序的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinarySearch_pro</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">100</span>,<span class=\"number\">100</span>,<span class=\"number\">100</span>, <span class=\"number\">213</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayList&lt;Integer&gt; integers = binarySearch_pro(arr, <span class=\"number\">0</span>, arr.length-<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">        System.out.println(integers);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr     数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left    左边的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right   右边的索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> findVal 需要查找的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到就返回下标，没有找到就返回-1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ArrayList&lt;Integer&gt; <span class=\"title\">binarySearch_pro</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> midVal = arr[mid];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left&gt;right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (findVal &gt; midVal) &#123;<span class=\"comment\">//向右递归</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch_pro(arr, mid + <span class=\"number\">1</span>, right, findVal);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (findVal &lt; midVal) &#123;<span class=\"comment\">//向左递归</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> binarySearch_pro(arr, left, mid - <span class=\"number\">1</span>, findVal);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 思路分析：</span></span><br><span class=\"line\"><span class=\"comment\">             * 1、在找到mid 索引值，不需要马上返回</span></span><br><span class=\"line\"><span class=\"comment\">             * 2、向mid 索引值的左边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList中</span></span><br><span class=\"line\"><span class=\"comment\">             * 3、向mid 索引值的右边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList</span></span><br><span class=\"line\"><span class=\"comment\">             * 4、将 ArrayList 返回</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            ArrayList&lt;Integer&gt; resIndexList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">            <span class=\"comment\">//向mid 索引值的左边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList 中</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp=mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp&lt;<span class=\"number\">0</span>||arr[temp]!=findVal)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//退出</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//否则，就将temp放入到resIndexList 中</span></span><br><span class=\"line\">                resIndexList.add(temp);</span><br><span class=\"line\">                temp-=<span class=\"number\">1</span>; <span class=\"comment\">//temp 左移</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            resIndexList.add(mid);</span><br><span class=\"line\">            <span class=\"comment\">//向mid 索引值的右边扫描，将所有满足 100 的元素的下标，加入到集合 ArrayList</span></span><br><span class=\"line\">            temp=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp&gt;arr.length-<span class=\"number\">1</span> || arr[temp]!=findVal)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//退出</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//否则，就将temp放入到resIndexList 中</span></span><br><span class=\"line\">                resIndexList.add(temp);</span><br><span class=\"line\">                temp+=<span class=\"number\">1</span>; <span class=\"comment\">//temp 右移</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> resIndexList;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"插值查找算法\"><a class=\"markdownIt-Anchor\" href=\"#插值查找算法\">#</a> 插值查找算法</h2>\n<h3 id=\"原理介绍\"><a class=\"markdownIt-Anchor\" href=\"#原理介绍\">#</a> 原理介绍</h3>\n<ol>\n<li>\n<p>插值查找算法类似于二分查找，不同的是插值查找每次从<strong>自适应</strong> mid 处开始查找。</p>\n</li>\n<li>\n<p>将折半查找中的求 mid 索引的公式，low 表示左边索引 left, high 表示右边索引 right。key 就是前面我们讲的 findVal</p>\n<p><a href=\"https://imgtu.com/i/R7eJZ4\"><img src=\"https://z3.ax1x.com/2021/07/06/R7eJZ4.png\" alt=\"R7eJZ4.png\"></a></p>\n</li>\n<li>\n<p>int mid = low + (high - low) * (key - arr[low]) / (arr[high] - arr[low]) ;   <em>插值索引</em><br>\n对应前面的代码公式：<br>\nint mid = left + (right – left) * (findVal – arr[left]) / (arr[right] – arr[left])</p>\n</li>\n</ol>\n<p><a href=\"https://imgtu.com/i/R7edRx\"><img src=\"https://z3.ax1x.com/2021/07/06/R7edRx.png\" alt=\"R7edRx.png\"></a></p>\n<h3 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ol>\n<li>\n<p>对于数据量较大，<strong>关键字分布比较均匀</strong>的查找表来说，采用<strong>插值查找，速度较快.</strong></p>\n</li>\n<li>\n<p>关键字分布不均匀的情况下，该方法不一定比折半查找要好</p>\n</li>\n</ol>\n<h3 id=\"代码展示\"><a class=\"markdownIt-Anchor\" href=\"#代码展示\">#</a> 代码展示</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo03;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertValueSearch</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            arr[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> index = insertValueSearch(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;index=&quot;</span>+index);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 编写插值查找算法</span></span><br><span class=\"line\"><span class=\"comment\">     * 说明：插值查找算法也要求数组是有序的</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arr     数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> left    左边索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> right   右边索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> findVal 查找的值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 如果找到就返回对应的下标，没有就返回 -1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">insertValueSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> findVal)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断退出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &gt; right || findVal &lt; arr[<span class=\"number\">0</span>] || findVal &gt; arr[arr.length - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//求出 mid</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) * (findVal - arr[left]) / (arr[right] - arr[left]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> midVal=arr[mid];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(findVal&gt;midVal)&#123; <span class=\"comment\">//说明应该向右边递归查找</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> insertValueSearch(arr,mid+<span class=\"number\">1</span>,right,findVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(findVal&lt;midVal)&#123; <span class=\"comment\">//说明应该向左边递归查找</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> insertValueSearch(arr,left,mid-<span class=\"number\">1</span>,findVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"斐波那契查找算法\"><a class=\"markdownIt-Anchor\" href=\"#斐波那契查找算法\">#</a> 斐波那契查找算法</h2>\n<h3 id=\"基本介绍\"><a class=\"markdownIt-Anchor\" href=\"#基本介绍\">#</a> 基本介绍</h3>\n<p>黄金分割点是指把一条<a href=\"\">线段</a>分割为两部分，使其中一部分与全长之比等于另一部分与这部分之比。取其前三位数字的近似值是<a href=\"\"> 0.618</a>。由于按此比例设计的造型十分美丽，因此称为<a href=\"\">黄金分割</a>，也称为<a href=\"\">中外比</a>。这是一个神奇的数字，会带来意向不大的效果。</p>\n<p><strong>斐波那契数列</strong> {1, 1, 2, 3, 5, 8, 13, 21, 34, 55} 发现斐波那契数列的两个相邻数 的比例，无限接近 黄金分割值 0.618</p>\n<h3 id=\"原理分析\"><a class=\"markdownIt-Anchor\" href=\"#原理分析\">#</a> 原理分析</h3>\n<p><strong>斐波那契 (黄金分割法) 原理:</strong></p>\n<p><strong>斐波那契查找</strong>原理与前两种相似，仅仅改变了中间结点（mid）的位置，mid 不再是中间或插值得到，而是位于黄金分割点附近，即<strong> mid=low+F (k-1)-1</strong>（F 代表斐波那契数列），如下图所示</p>\n<p><a href=\"https://imgtu.com/i/R7ecod\"><img src=\"https://z3.ax1x.com/2021/07/06/R7ecod.png\" alt=\"R7ecod.png\"></a></p>\n<p><strong>对 F (k-1)-1 的理解：</strong></p>\n<p>1、由斐波那契数列 <strong>F[k]=F[k-1]+F[k-2]</strong> 的性质，可以得到 <strong>（F[k]-1）=（F[k-1]-1）+（F[k-2]-1）+1</strong> 。该式说明：只要顺序表的长度为<strong> F [k]-1</strong>，则可以将该表分成长度为<strong> F [k-1]-1</strong> 和<strong> F [k-2]-1</strong> 的两段，即如上图所示。从而中间位置为<strong> mid=low+F (k-1)-1</strong></p>\n<p>2、类似的，每一子段也可以用相同的方式分割</p>\n<p>3、但顺序表长度 n 不一定刚好等于 F [k]-1，所以需要将原来的顺序表长度 n 增加至 F [k]-1。这里的 k 值只要能使得 F [k]-1 恰好大于或等于 n 即可，由以下代码得到，顺序表长度增加后，新增的位置（从 n+1 到 F [k]-1 位置），都赋为 n 位置的值即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n&gt;fib(k)-<span class=\"number\">1</span>)</span><br><span class=\"line\">    k++;</span><br></pre></td></tr></table></figure>\n<h3 id=\"代码分析\"><a class=\"markdownIt-Anchor\" href=\"#代码分析\">#</a> 代码分析</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> demo04;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fibonaci</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxSize = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] arr = &#123;<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>, <span class=\"number\">89</span>, <span class=\"number\">1000</span>, <span class=\"number\">1024</span>&#125;;</span><br><span class=\"line\">        System.out.println(fibSearch(arr, <span class=\"number\">8</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//因为后面 mid=low+F(k-1)-1,需要使用斐波那契数列，所以先获取到一个菲波那契数列</span></span><br><span class=\"line\">    <span class=\"comment\">//非递归方式得到一个斐波那契数列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] fib() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] f = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[maxSize];</span><br><span class=\"line\">        f[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class=\"line\">            f[i] = f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> a   数组</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> key 需要查找的数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> 返回对应的下标，如果没有就返回-1；</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//编写斐波那契算法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">fibSearch</span><span class=\"params\">(<span class=\"keyword\">int</span>[] a, <span class=\"keyword\">int</span> key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = a.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;<span class=\"comment\">//表示斐波那契数值下标</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = <span class=\"number\">0</span>;<span class=\"comment\">//放mid 的值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] f = fib();<span class=\"comment\">//获取斐波那契数列</span></span><br><span class=\"line\">        <span class=\"comment\">//获取斐波那契分割数值的下标</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (high &gt; f[k] - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//因为f[k] 值可能大于 a 的长度，因此我们需要使用Arrays类，构造一个新的数组，并指向temp[]</span></span><br><span class=\"line\">        <span class=\"comment\">//不足的部分会使用 0 填充</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = Arrays.copyOf(a, f[k]);</span><br><span class=\"line\">        <span class=\"comment\">//实际上需要使用a数组最后的数据填充temp</span></span><br><span class=\"line\">        <span class=\"comment\">//举例：</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;1,8,10,89,1000,1024,0,0,0&#125; -----&gt; &#123;1,8,10,89,1000,1024,1024,1024,1024&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = high + <span class=\"number\">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class=\"line\">            temp[i] = a[high];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用while来循环处理，找到我们的数 key</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">            mid =low + f[k - <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key &lt; temp[mid]) &#123;<span class=\"comment\">//向数组左边查找</span></span><br><span class=\"line\">                high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//为什么是k--</span></span><br><span class=\"line\">                <span class=\"comment\">//说明</span></span><br><span class=\"line\">                <span class=\"comment\">//1.全部元素 = 前面的元素 + 后面的元素</span></span><br><span class=\"line\">                <span class=\"comment\">//2.f[k] = f[k-1] +f[k-2]</span></span><br><span class=\"line\">                <span class=\"comment\">//3.因为前面有f[k-1] 个元素，所有可以继续拆分f[k-1]=f[k-2]+f[k-3]</span></span><br><span class=\"line\">                <span class=\"comment\">//即 在f[k-1] 的前面继续查找 k--</span></span><br><span class=\"line\">                <span class=\"comment\">//即下次循环 mid=f[k-1-1]-1</span></span><br><span class=\"line\">                k--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; temp[mid]) &#123;<span class=\"comment\">//向数组右边查找</span></span><br><span class=\"line\">                low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"comment\">//为什么是k-=2;</span></span><br><span class=\"line\">                <span class=\"comment\">//说明</span></span><br><span class=\"line\">                <span class=\"comment\">//1.全部元素 = 前面的元素 + 后面的元素</span></span><br><span class=\"line\">                <span class=\"comment\">//2.f[k] = f[k-1] +f[k-2]</span></span><br><span class=\"line\">                <span class=\"comment\">//3.因为前面有f[k-2] 个元素，所有可以继续拆分f[k-2]=f[k-3]+f[k-4]</span></span><br><span class=\"line\">                <span class=\"comment\">//即 在f[k-2] 的前面继续查找 k-=2</span></span><br><span class=\"line\">                <span class=\"comment\">//即下次循环 mid=f[k-1-2]-1</span></span><br><span class=\"line\">                k -= <span class=\"number\">2</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;<span class=\"comment\">//找到</span></span><br><span class=\"line\">                <span class=\"comment\">//需要确定，返回的是哪个下标</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mid &lt;= high) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> high;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "算法与数据结构",
                "线性查找",
                "二分/折半查找",
                "插值查找",
                "斐波那契查找"
            ]
        }
    ]
}